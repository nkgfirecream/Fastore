Index: trunk/lib/cpp/src/thrift/protocol/TBinaryProtocol.tcc
===================================================================
--- trunk/lib/cpp/src/thrift/protocol/TBinaryProtocol.tcc	(revision 1381333)
+++ trunk/lib/cpp/src/thrift/protocol/TBinaryProtocol.tcc	(working copy)
@@ -22,6 +22,9 @@
 
 #include "TBinaryProtocol.h"
 
+#if !defined(_WIN32)
+# include <arpa/inet.h>
+#endif
 #include <limits>
 
 
@@ -158,12 +161,19 @@
 
 template <class Transport_>
 uint32_t TBinaryProtocolT<Transport_>::writeI64(const int64_t i64) {
-  int64_t net = (int64_t)htonll(i64);
+  int64_t net = (int64_t)htonll( static_cast<uint64_t>(i64) );
   this->trans_->write((uint8_t*)&net, 8);
   return 8;
 }
 
 template <class Transport_>
+uint32_t TBinaryProtocolT<Transport_>::writeI64(const uint64_t i64) {
+  uint64_t net = (uint64_t)htonll(i64);
+  this->trans_->write((uint8_t*)&net, 8);
+  return 8;
+}
+
+template <class Transport_>
 uint32_t TBinaryProtocolT<Transport_>::writeDouble(const double dub) {
   BOOST_STATIC_ASSERT(sizeof(double) == sizeof(uint64_t));
   BOOST_STATIC_ASSERT(std::numeric_limits<double>::is_iec559);
@@ -178,7 +188,7 @@
 template <class Transport_>
 template<typename StrType>
 uint32_t TBinaryProtocolT<Transport_>::writeString(const StrType& str) {
-  uint32_t size = str.size();
+  uint32_t size = THRIFT_SAFE_CAST(uint32_t, str.size());
   uint32_t result = writeI32((int32_t)size);
   if (size > 0) {
     this->trans_->write((uint8_t*)str.data(), size);
