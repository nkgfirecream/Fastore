Index: trunk/lib/cpp/src/thrift/transport/TServerSocket.cpp
===================================================================
--- trunk/lib/cpp/src/thrift/transport/TServerSocket.cpp	(revision 1381333)
+++ trunk/lib/cpp/src/thrift/transport/TServerSocket.cpp	(working copy)
@@ -186,9 +186,9 @@
   }
 
   if (! path_.empty()) {
-    serverSocket_ = socket(PF_UNIX, SOCK_STREAM, IPPROTO_IP);
+    serverSocket_ = THRIFT_SAFE_CAST(int, socket(PF_UNIX, SOCK_STREAM, IPPROTO_IP));
   } else {
-    serverSocket_ = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
+    serverSocket_ = THRIFT_SAFE_CAST(int, socket(res->ai_family, res->ai_socktype, res->ai_protocol));
   }
 
   if (serverSocket_ == -1) {
@@ -321,7 +321,7 @@
 #endif
   } else {
     do {
-      if (0 == ::bind(serverSocket_, res->ai_addr, res->ai_addrlen)) {
+      if (0 == ::bind(serverSocket_, res->ai_addr, THRIFT_SAFE_CAST(socklen_t, res->ai_addrlen))) {
         break;
       }
       // use short circuit evaluation here to only sleep if we need to
@@ -413,9 +413,10 @@
 
   struct sockaddr_storage clientAddress;
   int size = sizeof(clientAddress);
-  int clientSocket = ::accept(serverSocket_,
-                              (struct sockaddr *) &clientAddress,
-                              (socklen_t *) &size);
+  int clientSocket = THRIFT_SAFE_CAST( int, 
+						::accept(serverSocket_,
+								 (struct sockaddr *) &clientAddress,
+								 (socklen_t *) &size) );
 
   if (clientSocket < 0) {
     int errno_copy = errno;
