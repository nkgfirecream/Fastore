/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Answer : TBase
  {
    private List<byte[]> _RowIDValues;
    private List<List<ValueRows>> _RangeValues;

    public List<byte[]> RowIDValues
    {
      get
      {
        return _RowIDValues;
      }
      set
      {
        __isset.RowIDValues = true;
        this._RowIDValues = value;
      }
    }

    public List<List<ValueRows>> RangeValues
    {
      get
      {
        return _RangeValues;
      }
      set
      {
        __isset.RangeValues = true;
        this._RangeValues = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool RowIDValues;
      public bool RangeValues;
    }

    public Answer() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RowIDValues = new List<byte[]>();
                TList _list38 = iprot.ReadListBegin();
                for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                {
                  byte[] _elem40 = null;
                  _elem40 = iprot.ReadBinary();
                  RowIDValues.Add(_elem40);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RangeValues = new List<List<ValueRows>>();
                TList _list41 = iprot.ReadListBegin();
                for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                {
                  List<ValueRows> _elem43 = new List<ValueRows>();
                  {
                    _elem43 = new List<ValueRows>();
                    TList _list44 = iprot.ReadListBegin();
                    for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                    {
                      ValueRows _elem46 = new ValueRows();
                      _elem46 = new ValueRows();
                      _elem46.Read(iprot);
                      _elem43.Add(_elem46);
                    }
                    iprot.ReadListEnd();
                  }
                  RangeValues.Add(_elem43);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Answer");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RowIDValues != null && __isset.RowIDValues) {
        field.Name = "RowIDValues";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, RowIDValues.Count));
          foreach (byte[] _iter47 in RowIDValues)
          {
            oprot.WriteBinary(_iter47);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RangeValues != null && __isset.RangeValues) {
        field.Name = "RangeValues";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, RangeValues.Count));
          foreach (List<ValueRows> _iter48 in RangeValues)
          {
            {
              oprot.WriteListBegin(new TList(TType.Struct, _iter48.Count));
              foreach (ValueRows _iter49 in _iter48)
              {
                _iter49.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Answer(");
      sb.Append("RowIDValues: ");
      sb.Append(RowIDValues);
      sb.Append(",RangeValues: ");
      sb.Append(RangeValues);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
