/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Answer : TBase
  {
    private List<byte[]> _rowIDValues;
    private List<RangeResult> _rangeValues;

    public List<byte[]> RowIDValues
    {
      get
      {
        return _rowIDValues;
      }
      set
      {
        __isset.rowIDValues = true;
        this._rowIDValues = value;
      }
    }

    public List<RangeResult> RangeValues
    {
      get
      {
        return _rangeValues;
      }
      set
      {
        __isset.rangeValues = true;
        this._rangeValues = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rowIDValues;
      public bool rangeValues;
    }

    public Answer() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RowIDValues = new List<byte[]>();
                TList _list42 = iprot.ReadListBegin();
                for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                {
                  byte[] _elem44 = null;
                  _elem44 = iprot.ReadBinary();
                  RowIDValues.Add(_elem44);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RangeValues = new List<RangeResult>();
                TList _list45 = iprot.ReadListBegin();
                for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  RangeResult _elem47 = new RangeResult();
                  _elem47 = new RangeResult();
                  _elem47.Read(iprot);
                  RangeValues.Add(_elem47);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Answer");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RowIDValues != null && __isset.rowIDValues) {
        field.Name = "rowIDValues";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, RowIDValues.Count));
          foreach (byte[] _iter48 in RowIDValues)
          {
            oprot.WriteBinary(_iter48);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RangeValues != null && __isset.rangeValues) {
        field.Name = "rangeValues";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RangeValues.Count));
          foreach (RangeResult _iter49 in RangeValues)
          {
            _iter49.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Answer(");
      sb.Append("RowIDValues: ");
      sb.Append(RowIDValues);
      sb.Append(",RangeValues: ");
      sb.Append(RangeValues);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
