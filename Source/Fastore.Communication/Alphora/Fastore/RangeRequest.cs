/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RangeRequest : TBase
  {
    private int _Limit;
    private bool _Ascending;
    private RangeBound _Start;
    private RangeBound _End;

    public int Limit
    {
      get
      {
        return _Limit;
      }
      set
      {
        __isset.Limit = true;
        this._Limit = value;
      }
    }

    public bool Ascending
    {
      get
      {
        return _Ascending;
      }
      set
      {
        __isset.Ascending = true;
        this._Ascending = value;
      }
    }

    public RangeBound Start
    {
      get
      {
        return _Start;
      }
      set
      {
        __isset.Start = true;
        this._Start = value;
      }
    }

    public RangeBound End
    {
      get
      {
        return _End;
      }
      set
      {
        __isset.End = true;
        this._End = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Limit;
      public bool Ascending;
      public bool Start;
      public bool End;
    }

    public RangeRequest() {
      this._Limit = 500;
      this._Ascending = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Limit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Ascending = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Start = new RangeBound();
              Start.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              End = new RangeBound();
              End.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RangeRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Limit) {
        field.Name = "Limit";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Limit);
        oprot.WriteFieldEnd();
      }
      if (__isset.Ascending) {
        field.Name = "Ascending";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Ascending);
        oprot.WriteFieldEnd();
      }
      if (Start != null && __isset.Start) {
        field.Name = "Start";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Start.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (End != null && __isset.End) {
        field.Name = "End";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        End.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RangeRequest(");
      sb.Append("Limit: ");
      sb.Append(Limit);
      sb.Append(",Ascending: ");
      sb.Append(Ascending);
      sb.Append(",Start: ");
      sb.Append(Start== null ? "<null>" : Start.ToString());
      sb.Append(",End: ");
      sb.Append(End== null ? "<null>" : End.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
