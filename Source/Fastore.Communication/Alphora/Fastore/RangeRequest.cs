/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RangeRequest : TBase
  {
    private bool _ascending;
    private int _limit;
    private RangeBound _first;
    private RangeBound _last;
    private byte[] _rowID;

    public bool Ascending
    {
      get
      {
        return _ascending;
      }
      set
      {
        __isset.ascending = true;
        this._ascending = value;
      }
    }

    public int Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public RangeBound First
    {
      get
      {
        return _first;
      }
      set
      {
        __isset.first = true;
        this._first = value;
      }
    }

    public RangeBound Last
    {
      get
      {
        return _last;
      }
      set
      {
        __isset.last = true;
        this._last = value;
      }
    }

    public byte[] RowID
    {
      get
      {
        return _rowID;
      }
      set
      {
        __isset.rowID = true;
        this._rowID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ascending;
      public bool limit;
      public bool first;
      public bool last;
      public bool rowID;
    }

    public RangeRequest() {
      this._ascending = true;
      this._limit = 500;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Ascending = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Limit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              First = new RangeBound();
              First.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Last = new RangeBound();
              Last.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              RowID = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RangeRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ascending) {
        field.Name = "ascending";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Ascending);
        oprot.WriteFieldEnd();
      }
      if (__isset.limit) {
        field.Name = "limit";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Limit);
        oprot.WriteFieldEnd();
      }
      if (First != null && __isset.first) {
        field.Name = "first";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        First.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Last != null && __isset.last) {
        field.Name = "last";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Last.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RowID != null && __isset.rowID) {
        field.Name = "rowID";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(RowID);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RangeRequest(");
      sb.Append("Ascending: ");
      sb.Append(Ascending);
      sb.Append(",Limit: ");
      sb.Append(Limit);
      sb.Append(",First: ");
      sb.Append(First== null ? "<null>" : First.ToString());
      sb.Append(",Last: ");
      sb.Append(Last== null ? "<null>" : Last.ToString());
      sb.Append(",RowID: ");
      sb.Append(RowID);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
