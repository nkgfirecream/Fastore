/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{
  public partial class Worker {
    public interface Iface {
      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - HIVE TRANSACTED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      long prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      long End_prepare(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - HIVE TRANSACTED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      TransactionID apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      #if SILVERLIGHT
      IAsyncResult Begin_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      TransactionID End_apply(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was successful on the majority of workers, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      void commit(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_commit(AsyncCallback callback, object state, TransactionID transactionID);
      void End_commit(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was unsuccessful on the majority of workers, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      void rollback(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_rollback(AsyncCallback callback, object state, TransactionID transactionID);
      void End_rollback(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      void flush(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_flush(AsyncCallback callback, object state, TransactionID transactionID);
      void End_flush(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      bool doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      bool End_doesConflict(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      TransactionID update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      TransactionID End_update(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      Dictionary<int, Dictionary<Query, Answer>> transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      Dictionary<int, Dictionary<Query, Answer>> End_transgrade(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      Dictionary<int, ReadResult> query(Dictionary<int, Query> queries);
      #if SILVERLIGHT
      IAsyncResult Begin_query(AsyncCallback callback, object state, Dictionary<int, Query> queries);
      Dictionary<int, ReadResult> End_query(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      List<Statistic> getStatistics(List<int> columnIDs);
      #if SILVERLIGHT
      IAsyncResult Begin_getStatistics(AsyncCallback callback, object state, List<int> columnIDs);
      List<Statistic> End_getStatistics(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_prepare(callback, state, transactionID, writes, reads);
      }

      public long End_prepare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_prepare();
      }

      #endif

      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - HIVE TRANSACTED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public long prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_prepare(transactionID, writes, reads);
        return recv_prepare();

        #else
        var asyncResult = Begin_prepare(null, null, transactionID, writes, reads);
        return End_prepare(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("prepare", TMessageType.Call, seqid_));
        prepare_args args = new prepare_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_prepare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        prepare_result result = new prepare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notLatest) {
          throw result.NotLatest;
        }
        if (result.__isset.alreadyPending) {
          throw result.AlreadyPending;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "prepare failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        return send_apply(callback, state, transactionID, writes);
      }

      public TransactionID End_apply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_apply();
      }

      #endif

      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - HIVE TRANSACTED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      public TransactionID apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        #if !SILVERLIGHT
        send_apply(transactionID, writes);
        return recv_apply();

        #else
        var asyncResult = Begin_apply(null, null, transactionID, writes);
        return End_apply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #else
      public void send_apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("apply", TMessageType.Call, seqid_));
        apply_args args = new apply_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_apply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        apply_result result = new apply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.alreadyPending) {
          throw result.AlreadyPending;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apply failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commit(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_commit(callback, state, transactionID);
      }

      public void End_commit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      /// <summary>
      /// Informs that the prepare was successful on the majority of workers, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      public void commit(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_commit(transactionID);

        #else
        var asyncResult = Begin_commit(null, null, transactionID);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commit(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_commit(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commit", TMessageType.Call, seqid_));
        commit_args args = new commit_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rollback(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_rollback(callback, state, transactionID);
      }

      public void End_rollback(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      /// <summary>
      /// Informs that the prepare was unsuccessful on the majority of workers, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      public void rollback(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_rollback(transactionID);

        #else
        var asyncResult = Begin_rollback(null, null, transactionID);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rollback(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_rollback(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rollback", TMessageType.Call, seqid_));
        rollback_args args = new rollback_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_flush(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_flush(callback, state, transactionID);
      }

      public void End_flush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_flush();
      }

      #endif

      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      public void flush(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_flush(transactionID);
        recv_flush();

        #else
        var asyncResult = Begin_flush(null, null, transactionID);
        End_flush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_flush(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_flush(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("flush", TMessageType.Call, seqid_));
        flush_args args = new flush_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_result result = new flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_doesConflict(callback, state, reads, source, target);
      }

      public bool End_doesConflict(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_doesConflict();
      }

      #endif

      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public bool doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_doesConflict(reads, source, target);
        return recv_doesConflict();

        #else
        var asyncResult = Begin_doesConflict(null, null, reads, source, target);
        return End_doesConflict(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("doesConflict", TMessageType.Call, seqid_));
        doesConflict_args args = new doesConflict_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_doesConflict()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        doesConflict_result result = new doesConflict_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "doesConflict failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_update(callback, state, transactionID, writes, reads);
      }

      public TransactionID End_update(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_update();
      }

      #endif

      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public TransactionID update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_update(transactionID, writes, reads);
        return recv_update();

        #else
        var asyncResult = Begin_update(null, null, transactionID, writes, reads);
        return End_update(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("update", TMessageType.Call, seqid_));
        update_args args = new update_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        update_result result = new update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.conflict) {
          throw result.Conflict;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "update failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_transgrade(callback, state, reads, source, target);
      }

      public Dictionary<int, Dictionary<Query, Answer>> End_transgrade(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_transgrade();
      }

      #endif

      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public Dictionary<int, Dictionary<Query, Answer>> transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_transgrade(reads, source, target);
        return recv_transgrade();

        #else
        var asyncResult = Begin_transgrade(null, null, reads, source, target);
        return End_transgrade(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("transgrade", TMessageType.Call, seqid_));
        transgrade_args args = new transgrade_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, Dictionary<Query, Answer>> recv_transgrade()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        transgrade_result result = new transgrade_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "transgrade failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      {
        return send_query(callback, state, queries);
      }

      public Dictionary<int, ReadResult> End_query(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_query();
      }

      #endif

      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      public Dictionary<int, ReadResult> query(Dictionary<int, Query> queries)
      {
        #if !SILVERLIGHT
        send_query(queries);
        return recv_query();

        #else
        var asyncResult = Begin_query(null, null, queries);
        return End_query(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      #else
      public void send_query(Dictionary<int, Query> queries)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("query", TMessageType.Call, seqid_));
        query_args args = new query_args();
        args.Queries = queries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, ReadResult> recv_query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        query_result result = new query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "query failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      {
        return send_getStatistics(callback, state, columnIDs);
      }

      public List<Statistic> End_getStatistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getStatistics();
      }

      #endif

      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      public List<Statistic> getStatistics(List<int> columnIDs)
      {
        #if !SILVERLIGHT
        send_getStatistics(columnIDs);
        return recv_getStatistics();

        #else
        var asyncResult = Begin_getStatistics(null, null, columnIDs);
        return End_getStatistics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      #else
      public void send_getStatistics(List<int> columnIDs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getStatistics", TMessageType.Call, seqid_));
        getStatistics_args args = new getStatistics_args();
        args.ColumnIDs = columnIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Statistic> recv_getStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getStatistics_result result = new getStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStatistics failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["prepare"] = prepare_Process;
        processMap_["apply"] = apply_Process;
        processMap_["commit"] = commit_Process;
        processMap_["rollback"] = rollback_Process;
        processMap_["flush"] = flush_Process;
        processMap_["doesConflict"] = doesConflict_Process;
        processMap_["update"] = update_Process;
        processMap_["transgrade"] = transgrade_Process;
        processMap_["query"] = query_Process;
        processMap_["getStatistics"] = getStatistics_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void prepare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        prepare_args args = new prepare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        prepare_result result = new prepare_result();
        try {
          result.Success = iface_.prepare(args.TransactionID, args.Writes, args.Reads);
        } catch (NotLatest notLatest) {
          result.NotLatest = notLatest;
        } catch (AlreadyPending alreadyPending) {
          result.AlreadyPending = alreadyPending;
        }
        oprot.WriteMessageBegin(new TMessage("prepare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void apply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        apply_args args = new apply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        apply_result result = new apply_result();
        try {
          result.Success = iface_.apply(args.TransactionID, args.Writes);
        } catch (AlreadyPending alreadyPending) {
          result.AlreadyPending = alreadyPending;
        }
        oprot.WriteMessageBegin(new TMessage("apply", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commit_args args = new commit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.commit(args.TransactionID);
        return;
      }
      public void rollback_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rollback_args args = new rollback_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.rollback(args.TransactionID);
        return;
      }
      public void flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_args args = new flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_result result = new flush_result();
        iface_.flush(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void doesConflict_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        doesConflict_args args = new doesConflict_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        doesConflict_result result = new doesConflict_result();
        try {
          result.Success = iface_.doesConflict(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("doesConflict", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        update_args args = new update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        update_result result = new update_result();
        try {
          result.Success = iface_.update(args.TransactionID, args.Writes, args.Reads);
        } catch (Conflict conflict) {
          result.Conflict = conflict;
        }
        oprot.WriteMessageBegin(new TMessage("update", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void transgrade_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        transgrade_args args = new transgrade_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        transgrade_result result = new transgrade_result();
        try {
          result.Success = iface_.transgrade(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("transgrade", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        query_args args = new query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        query_result result = new query_result();
        result.Success = iface_.query(args.Queries);
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getStatistics_args args = new getStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getStatistics_result result = new getStatistics_result();
        result.Success = iface_.getStatistics(args.ColumnIDs);
        oprot.WriteMessageBegin(new TMessage("getStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepare_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public prepare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map69 = iprot.ReadMapBegin();
                  for( int _i70 = 0; _i70 < _map69.Count; ++_i70)
                  {
                    int _key71;
                    ColumnWrites _val72;
                    _key71 = iprot.ReadI32();
                    _val72 = new ColumnWrites();
                    _val72.Read(iprot);
                    Writes[_key71] = _val72;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map73 = iprot.ReadMapBegin();
                  for( int _i74 = 0; _i74 < _map73.Count; ++_i74)
                  {
                    int _key75;
                    Dictionary<Query, Answer> _val76;
                    _key75 = iprot.ReadI32();
                    {
                      _val76 = new Dictionary<Query, Answer>();
                      TMap _map77 = iprot.ReadMapBegin();
                      for( int _i78 = 0; _i78 < _map77.Count; ++_i78)
                      {
                        Query _key79;
                        Answer _val80;
                        _key79 = new Query();
                        _key79.Read(iprot);
                        _val80 = new Answer();
                        _val80.Read(iprot);
                        _val76[_key79] = _val80;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key75] = _val76;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter81 in Writes.Keys)
            {
              oprot.WriteI32(_iter81);
              Writes[_iter81].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter82 in Reads.Keys)
            {
              oprot.WriteI32(_iter82);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter82].Count));
                foreach (Query _iter83 in Reads[_iter82].Keys)
                {
                  _iter83.Write(oprot);
                  Reads[_iter82][_iter83].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepare_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepare_result : TBase
    {
      private long _success;
      private NotLatest _notLatest;
      private AlreadyPending _alreadyPending;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotLatest NotLatest
      {
        get
        {
          return _notLatest;
        }
        set
        {
          __isset.notLatest = true;
          this._notLatest = value;
        }
      }

      public AlreadyPending AlreadyPending
      {
        get
        {
          return _alreadyPending;
        }
        set
        {
          __isset.alreadyPending = true;
          this._alreadyPending = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool notLatest;
        public bool alreadyPending;
      }

      public prepare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotLatest = new NotLatest();
                NotLatest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AlreadyPending = new AlreadyPending();
                AlreadyPending.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.notLatest) {
          if (NotLatest != null) {
            field.Name = "NotLatest";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotLatest.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.alreadyPending) {
          if (AlreadyPending != null) {
            field.Name = "AlreadyPending";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            AlreadyPending.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepare_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",NotLatest: ");
        sb.Append(NotLatest== null ? "<null>" : NotLatest.ToString());
        sb.Append(",AlreadyPending: ");
        sb.Append(AlreadyPending== null ? "<null>" : AlreadyPending.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class apply_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
      }

      public apply_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map84 = iprot.ReadMapBegin();
                  for( int _i85 = 0; _i85 < _map84.Count; ++_i85)
                  {
                    int _key86;
                    ColumnWrites _val87;
                    _key86 = iprot.ReadI32();
                    _val87 = new ColumnWrites();
                    _val87.Read(iprot);
                    Writes[_key86] = _val87;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("apply_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter88 in Writes.Keys)
            {
              oprot.WriteI32(_iter88);
              Writes[_iter88].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("apply_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class apply_result : TBase
    {
      private TransactionID _success;
      private AlreadyPending _alreadyPending;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AlreadyPending AlreadyPending
      {
        get
        {
          return _alreadyPending;
        }
        set
        {
          __isset.alreadyPending = true;
          this._alreadyPending = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool alreadyPending;
      }

      public apply_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                AlreadyPending = new AlreadyPending();
                AlreadyPending.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("apply_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.alreadyPending) {
          if (AlreadyPending != null) {
            field.Name = "AlreadyPending";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AlreadyPending.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("apply_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",AlreadyPending: ");
        sb.Append(AlreadyPending== null ? "<null>" : AlreadyPending.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commit_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public commit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commit_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rollback_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public rollback_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rollback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rollback_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_result : TBase
    {

      public flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class doesConflict_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public doesConflict_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map89 = iprot.ReadMapBegin();
                  for( int _i90 = 0; _i90 < _map89.Count; ++_i90)
                  {
                    int _key91;
                    Dictionary<Query, Answer> _val92;
                    _key91 = iprot.ReadI32();
                    {
                      _val92 = new Dictionary<Query, Answer>();
                      TMap _map93 = iprot.ReadMapBegin();
                      for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                      {
                        Query _key95;
                        Answer _val96;
                        _key95 = new Query();
                        _key95.Read(iprot);
                        _val96 = new Answer();
                        _val96.Read(iprot);
                        _val92[_key95] = _val96;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key91] = _val92;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("doesConflict_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter97 in Reads.Keys)
            {
              oprot.WriteI32(_iter97);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter97].Count));
                foreach (Query _iter98 in Reads[_iter97].Keys)
                {
                  _iter98.Write(oprot);
                  Reads[_iter97][_iter98].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("doesConflict_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class doesConflict_result : TBase
    {
      private bool _success;
      private BeyondHistory _beyondHistory;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public doesConflict_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("doesConflict_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("doesConflict_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class update_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public update_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map99 = iprot.ReadMapBegin();
                  for( int _i100 = 0; _i100 < _map99.Count; ++_i100)
                  {
                    int _key101;
                    ColumnWrites _val102;
                    _key101 = iprot.ReadI32();
                    _val102 = new ColumnWrites();
                    _val102.Read(iprot);
                    Writes[_key101] = _val102;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map103 = iprot.ReadMapBegin();
                  for( int _i104 = 0; _i104 < _map103.Count; ++_i104)
                  {
                    int _key105;
                    Dictionary<Query, Answer> _val106;
                    _key105 = iprot.ReadI32();
                    {
                      _val106 = new Dictionary<Query, Answer>();
                      TMap _map107 = iprot.ReadMapBegin();
                      for( int _i108 = 0; _i108 < _map107.Count; ++_i108)
                      {
                        Query _key109;
                        Answer _val110;
                        _key109 = new Query();
                        _key109.Read(iprot);
                        _val110 = new Answer();
                        _val110.Read(iprot);
                        _val106[_key109] = _val110;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key105] = _val106;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("update_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter111 in Writes.Keys)
            {
              oprot.WriteI32(_iter111);
              Writes[_iter111].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter112 in Reads.Keys)
            {
              oprot.WriteI32(_iter112);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter112].Count));
                foreach (Query _iter113 in Reads[_iter112].Keys)
                {
                  _iter113.Write(oprot);
                  Reads[_iter112][_iter113].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("update_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class update_result : TBase
    {
      private TransactionID _success;
      private Conflict _conflict;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Conflict Conflict
      {
        get
        {
          return _conflict;
        }
        set
        {
          __isset.conflict = true;
          this._conflict = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool conflict;
      }

      public update_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Conflict = new Conflict();
                Conflict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("update_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.conflict) {
          if (Conflict != null) {
            field.Name = "Conflict";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Conflict.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("update_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Conflict: ");
        sb.Append(Conflict== null ? "<null>" : Conflict.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class transgrade_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public transgrade_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map114 = iprot.ReadMapBegin();
                  for( int _i115 = 0; _i115 < _map114.Count; ++_i115)
                  {
                    int _key116;
                    Dictionary<Query, Answer> _val117;
                    _key116 = iprot.ReadI32();
                    {
                      _val117 = new Dictionary<Query, Answer>();
                      TMap _map118 = iprot.ReadMapBegin();
                      for( int _i119 = 0; _i119 < _map118.Count; ++_i119)
                      {
                        Query _key120;
                        Answer _val121;
                        _key120 = new Query();
                        _key120.Read(iprot);
                        _val121 = new Answer();
                        _val121.Read(iprot);
                        _val117[_key120] = _val121;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key116] = _val117;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transgrade_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter122 in Reads.Keys)
            {
              oprot.WriteI32(_iter122);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter122].Count));
                foreach (Query _iter123 in Reads[_iter122].Keys)
                {
                  _iter123.Write(oprot);
                  Reads[_iter122][_iter123].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transgrade_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class transgrade_result : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _success;
      private BeyondHistory _beyondHistory;

      public Dictionary<int, Dictionary<Query, Answer>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public transgrade_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map124 = iprot.ReadMapBegin();
                  for( int _i125 = 0; _i125 < _map124.Count; ++_i125)
                  {
                    int _key126;
                    Dictionary<Query, Answer> _val127;
                    _key126 = iprot.ReadI32();
                    {
                      _val127 = new Dictionary<Query, Answer>();
                      TMap _map128 = iprot.ReadMapBegin();
                      for( int _i129 = 0; _i129 < _map128.Count; ++_i129)
                      {
                        Query _key130;
                        Answer _val131;
                        _key130 = new Query();
                        _key130.Read(iprot);
                        _val131 = new Answer();
                        _val131.Read(iprot);
                        _val127[_key130] = _val131;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key126] = _val127;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transgrade_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
              foreach (int _iter132 in Success.Keys)
              {
                oprot.WriteI32(_iter132);
                {
                  oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Success[_iter132].Count));
                  foreach (Query _iter133 in Success[_iter132].Keys)
                  {
                    _iter133.Write(oprot);
                    Success[_iter132][_iter133].Write(oprot);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transgrade_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_args : TBase
    {
      private Dictionary<int, Query> _queries;

      public Dictionary<int, Query> Queries
      {
        get
        {
          return _queries;
        }
        set
        {
          __isset.queries = true;
          this._queries = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool queries;
      }

      public query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Queries = new Dictionary<int, Query>();
                  TMap _map134 = iprot.ReadMapBegin();
                  for( int _i135 = 0; _i135 < _map134.Count; ++_i135)
                  {
                    int _key136;
                    Query _val137;
                    _key136 = iprot.ReadI32();
                    _val137 = new Query();
                    _val137.Read(iprot);
                    Queries[_key136] = _val137;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Queries != null && __isset.queries) {
          field.Name = "queries";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Queries.Count));
            foreach (int _iter138 in Queries.Keys)
            {
              oprot.WriteI32(_iter138);
              Queries[_iter138].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_args(");
        sb.Append("Queries: ");
        sb.Append(Queries);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_result : TBase
    {
      private Dictionary<int, ReadResult> _success;

      public Dictionary<int, ReadResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, ReadResult>();
                  TMap _map139 = iprot.ReadMapBegin();
                  for( int _i140 = 0; _i140 < _map139.Count; ++_i140)
                  {
                    int _key141;
                    ReadResult _val142;
                    _key141 = iprot.ReadI32();
                    _val142 = new ReadResult();
                    _val142.Read(iprot);
                    Success[_key141] = _val142;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Success.Count));
              foreach (int _iter143 in Success.Keys)
              {
                oprot.WriteI32(_iter143);
                Success[_iter143].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStatistics_args : TBase
    {
      private List<int> _columnIDs;

      public List<int> ColumnIDs
      {
        get
        {
          return _columnIDs;
        }
        set
        {
          __isset.columnIDs = true;
          this._columnIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool columnIDs;
      }

      public getStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ColumnIDs = new List<int>();
                  TList _list144 = iprot.ReadListBegin();
                  for( int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    int _elem146 = 0;
                    _elem146 = iprot.ReadI32();
                    ColumnIDs.Add(_elem146);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ColumnIDs != null && __isset.columnIDs) {
          field.Name = "columnIDs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ColumnIDs.Count));
            foreach (int _iter147 in ColumnIDs)
            {
              oprot.WriteI32(_iter147);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getStatistics_args(");
        sb.Append("ColumnIDs: ");
        sb.Append(ColumnIDs);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStatistics_result : TBase
    {
      private List<Statistic> _success;

      public List<Statistic> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Statistic>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    Statistic _elem150 = new Statistic();
                    _elem150 = new Statistic();
                    _elem150.Read(iprot);
                    Success.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Statistic _iter151 in Success)
              {
                _iter151.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
