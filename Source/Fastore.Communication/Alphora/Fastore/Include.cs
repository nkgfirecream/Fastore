/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Alphora.Fastore
{

  [Serializable]
  public partial class Include : TBase
  {
    private byte[] _RowID;
    private byte[] _Value;

    public byte[] RowID
    {
      get
      {
        return _RowID;
      }
      set
      {
        __isset.RowID = true;
        this._RowID = value;
      }
    }

    public byte[] Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.Value = true;
        this._Value = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool RowID;
      public bool Value;
    }

    public Include() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              RowID = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Include");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RowID != null && __isset.RowID) {
        field.Name = "RowID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(RowID);
        oprot.WriteFieldEnd();
      }
      if (Value != null && __isset.Value) {
        field.Name = "Value";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Include(");
      sb.Append("RowID: ");
      sb.Append(RowID);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
