/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Conflict : Exception, TBase
  {
    private string _Details;
    private List<int> _ColumnIDs;

    public string Details
    {
      get
      {
        return _Details;
      }
      set
      {
        __isset.Details = true;
        this._Details = value;
      }
    }

    public List<int> ColumnIDs
    {
      get
      {
        return _ColumnIDs;
      }
      set
      {
        __isset.ColumnIDs = true;
        this._ColumnIDs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Details;
      public bool ColumnIDs;
    }

    public Conflict() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Details = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ColumnIDs = new List<int>();
                TList _list55 = iprot.ReadListBegin();
                for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                {
                  int _elem57 = 0;
                  _elem57 = iprot.ReadI32();
                  ColumnIDs.Add(_elem57);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Conflict");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Details != null && __isset.Details) {
        field.Name = "Details";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Details);
        oprot.WriteFieldEnd();
      }
      if (ColumnIDs != null && __isset.ColumnIDs) {
        field.Name = "ColumnIDs";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ColumnIDs.Count));
          foreach (int _iter58 in ColumnIDs)
          {
            oprot.WriteI32(_iter58);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Conflict(");
      sb.Append("Details: ");
      sb.Append(Details);
      sb.Append(",ColumnIDs: ");
      sb.Append(ColumnIDs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
