/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Alphora.Fastore
{

  [Serializable]
  public partial class TopologyReport : TBase
  {
    private int _TopologyID;
    private Dictionary<int, HostReport> _Hosts;
    private long _Revision;

    public int TopologyID
    {
      get
      {
        return _TopologyID;
      }
      set
      {
        __isset.TopologyID = true;
        this._TopologyID = value;
      }
    }

    public Dictionary<int, HostReport> Hosts
    {
      get
      {
        return _Hosts;
      }
      set
      {
        __isset.Hosts = true;
        this._Hosts = value;
      }
    }

    public long Revision
    {
      get
      {
        return _Revision;
      }
      set
      {
        __isset.Revision = true;
        this._Revision = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool TopologyID;
      public bool Hosts;
      public bool Revision;
    }

    public TopologyReport() {
      this._Revision = 1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TopologyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Hosts = new Dictionary<int, HostReport>();
                TMap _map13 = iprot.ReadMapBegin();
                for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                {
                  int _key15;
                  HostReport _val16;
                  _key15 = iprot.ReadI32();
                  _val16 = new HostReport();
                  _val16.Read(iprot);
                  Hosts[_key15] = _val16;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Revision = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TopologyReport");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.TopologyID) {
        field.Name = "TopologyID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TopologyID);
        oprot.WriteFieldEnd();
      }
      if (Hosts != null && __isset.Hosts) {
        field.Name = "Hosts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Hosts.Count));
          foreach (int _iter17 in Hosts.Keys)
          {
            oprot.WriteI32(_iter17);
            Hosts[_iter17].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.Revision) {
        field.Name = "Revision";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Revision);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TopologyReport(");
      sb.Append("TopologyID: ");
      sb.Append(TopologyID);
      sb.Append(",Hosts: ");
      sb.Append(Hosts);
      sb.Append(",Revision: ");
      sb.Append(Revision);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
