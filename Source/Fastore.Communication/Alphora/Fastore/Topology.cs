/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Topology : TBase
  {
    private int _topologyID;
    private Dictionary<int, Dictionary<int, List<int>>> _hosts;

    public int TopologyID
    {
      get
      {
        return _topologyID;
      }
      set
      {
        __isset.topologyID = true;
        this._topologyID = value;
      }
    }

    public Dictionary<int, Dictionary<int, List<int>>> Hosts
    {
      get
      {
        return _hosts;
      }
      set
      {
        __isset.hosts = true;
        this._hosts = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool topologyID;
      public bool hosts;
    }

    public Topology() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TopologyID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Hosts = new Dictionary<int, Dictionary<int, List<int>>>();
                TMap _map15 = iprot.ReadMapBegin();
                for( int _i16 = 0; _i16 < _map15.Count; ++_i16)
                {
                  int _key17;
                  Dictionary<int, List<int>> _val18;
                  _key17 = iprot.ReadI32();
                  {
                    _val18 = new Dictionary<int, List<int>>();
                    TMap _map19 = iprot.ReadMapBegin();
                    for( int _i20 = 0; _i20 < _map19.Count; ++_i20)
                    {
                      int _key21;
                      List<int> _val22;
                      _key21 = iprot.ReadI32();
                      {
                        _val22 = new List<int>();
                        TList _list23 = iprot.ReadListBegin();
                        for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                        {
                          int _elem25 = 0;
                          _elem25 = iprot.ReadI32();
                          _val22.Add(_elem25);
                        }
                        iprot.ReadListEnd();
                      }
                      _val18[_key21] = _val22;
                    }
                    iprot.ReadMapEnd();
                  }
                  Hosts[_key17] = _val18;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Topology");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.topologyID) {
        field.Name = "topologyID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TopologyID);
        oprot.WriteFieldEnd();
      }
      if (Hosts != null && __isset.hosts) {
        field.Name = "hosts";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Hosts.Count));
          foreach (int _iter26 in Hosts.Keys)
          {
            oprot.WriteI32(_iter26);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.List, Hosts[_iter26].Count));
              foreach (int _iter27 in Hosts[_iter26].Keys)
              {
                oprot.WriteI32(_iter27);
                {
                  oprot.WriteListBegin(new TList(TType.I32, Hosts[_iter26][_iter27].Count));
                  foreach (int _iter28 in Hosts[_iter26][_iter27])
                  {
                    oprot.WriteI32(_iter28);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Topology(");
      sb.Append("TopologyID: ");
      sb.Append(TopologyID);
      sb.Append(",Hosts: ");
      sb.Append(Hosts);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
