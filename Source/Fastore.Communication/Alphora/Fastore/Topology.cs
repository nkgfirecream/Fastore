/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Alphora.Fastore
{

  [Serializable]
  public partial class Topology : TBase
  {
    private int _ID;
    private THashSet<Host> _Hosts;
    private THashSet<Repository> _Repositories;

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public THashSet<Host> Hosts
    {
      get
      {
        return _Hosts;
      }
      set
      {
        __isset.Hosts = true;
        this._Hosts = value;
      }
    }

    public THashSet<Repository> Repositories
    {
      get
      {
        return _Repositories;
      }
      set
      {
        __isset.Repositories = true;
        this._Repositories = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool ID;
      public bool Hosts;
      public bool Repositories;
    }

    public Topology() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                Hosts = new THashSet<Host>();
                TSet _set0 = iprot.ReadSetBegin();
                for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                {
                  Host _elem2 = new Host();
                  _elem2 = new Host();
                  _elem2.Read(iprot);
                  Hosts.Add(_elem2);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                Repositories = new THashSet<Repository>();
                TSet _set3 = iprot.ReadSetBegin();
                for( int _i4 = 0; _i4 < _set3.Count; ++_i4)
                {
                  Repository _elem5 = new Repository();
                  _elem5 = new Repository();
                  _elem5.Read(iprot);
                  Repositories.Add(_elem5);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Topology");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ID) {
        field.Name = "ID";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ID);
        oprot.WriteFieldEnd();
      }
      if (Hosts != null && __isset.Hosts) {
        field.Name = "Hosts";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Hosts.Count));
          foreach (Host _iter6 in Hosts)
          {
            _iter6.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Repositories != null && __isset.Repositories) {
        field.Name = "Repositories";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Repositories.Count));
          foreach (Repository _iter7 in Repositories)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Topology(");
      sb.Append("ID: ");
      sb.Append(ID);
      sb.Append(",Hosts: ");
      sb.Append(Hosts);
      sb.Append(",Repositories: ");
      sb.Append(Repositories);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
