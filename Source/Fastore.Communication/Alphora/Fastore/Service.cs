/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Alphora.Fastore
{
  public class Service {
    public interface Iface {
      TopologyResult GetTopology();
      long PrepareTopology(TransactionID transactionID, Topology topology);
      void CommitTopology(TransactionID transactionID);
      void RollbackTopology(TransactionID transactionID);
      TopologyReport GetTopologyReport();
      HostReport GetReport();
      long Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      TransactionID Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      void Commit(TransactionID transactionID);
      void Rollback(TransactionID transactionID);
      void Flush(TransactionID transactionID);
      bool DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      TransactionID Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      Dictionary<int, Dictionary<Query, Answer>> Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      long AcquireLock(string name, LockMode mode, int timeout);
      void KeepLock(long lockID);
      void EscalateLock(long lockID, int timeout);
      void ReleaseLock(long lockID);
      ReadResults Query(Dictionary<int, Query> queries);
      List<Statistic> GetStatistics(List<int> columnIDs);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public TopologyResult GetTopology()
      {
        send_GetTopology();
        return recv_GetTopology();
      }

      public void send_GetTopology()
      {
        oprot_.WriteMessageBegin(new TMessage("GetTopology", TMessageType.Call, seqid_));
        GetTopology_args args = new GetTopology_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TopologyResult recv_GetTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTopology_result result = new GetTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTopology failed: unknown result");
      }

      public long PrepareTopology(TransactionID transactionID, Topology topology)
      {
        send_PrepareTopology(transactionID, topology);
        return recv_PrepareTopology();
      }

      public void send_PrepareTopology(TransactionID transactionID, Topology topology)
      {
        oprot_.WriteMessageBegin(new TMessage("PrepareTopology", TMessageType.Call, seqid_));
        PrepareTopology_args args = new PrepareTopology_args();
        args.TransactionID = transactionID;
        args.Topology = topology;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_PrepareTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PrepareTopology_result result = new PrepareTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PrepareTopology failed: unknown result");
      }

      public void CommitTopology(TransactionID transactionID)
      {
        send_CommitTopology(transactionID);
        recv_CommitTopology();
      }

      public void send_CommitTopology(TransactionID transactionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CommitTopology", TMessageType.Call, seqid_));
        CommitTopology_args args = new CommitTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_CommitTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CommitTopology_result result = new CommitTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void RollbackTopology(TransactionID transactionID)
      {
        send_RollbackTopology(transactionID);
        recv_RollbackTopology();
      }

      public void send_RollbackTopology(TransactionID transactionID)
      {
        oprot_.WriteMessageBegin(new TMessage("RollbackTopology", TMessageType.Call, seqid_));
        RollbackTopology_args args = new RollbackTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_RollbackTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RollbackTopology_result result = new RollbackTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public TopologyReport GetTopologyReport()
      {
        send_GetTopologyReport();
        return recv_GetTopologyReport();
      }

      public void send_GetTopologyReport()
      {
        oprot_.WriteMessageBegin(new TMessage("GetTopologyReport", TMessageType.Call, seqid_));
        GetTopologyReport_args args = new GetTopologyReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TopologyReport recv_GetTopologyReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTopologyReport_result result = new GetTopologyReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTopologyReport failed: unknown result");
      }

      public HostReport GetReport()
      {
        send_GetReport();
        return recv_GetReport();
      }

      public void send_GetReport()
      {
        oprot_.WriteMessageBegin(new TMessage("GetReport", TMessageType.Call, seqid_));
        GetReport_args args = new GetReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HostReport recv_GetReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReport_result result = new GetReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReport failed: unknown result");
      }

      public long Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        send_Prepare(transactionID, writes, reads);
        return recv_Prepare();
      }

      public void send_Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        oprot_.WriteMessageBegin(new TMessage("Prepare", TMessageType.Call, seqid_));
        Prepare_args args = new Prepare_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_Prepare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Prepare_result result = new Prepare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notLatest) {
          throw result.NotLatest;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Prepare failed: unknown result");
      }

      public TransactionID Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        send_Apply(transactionID, writes);
        return recv_Apply();
      }

      public void send_Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        oprot_.WriteMessageBegin(new TMessage("Apply", TMessageType.Call, seqid_));
        Apply_args args = new Apply_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TransactionID recv_Apply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Apply_result result = new Apply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Apply failed: unknown result");
      }

      public void Commit(TransactionID transactionID)
      {
        send_Commit(transactionID);
        recv_Commit();
      }

      public void send_Commit(TransactionID transactionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Commit", TMessageType.Call, seqid_));
        Commit_args args = new Commit_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_Commit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Commit_result result = new Commit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void Rollback(TransactionID transactionID)
      {
        send_Rollback(transactionID);
        recv_Rollback();
      }

      public void send_Rollback(TransactionID transactionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Rollback", TMessageType.Call, seqid_));
        Rollback_args args = new Rollback_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_Rollback()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Rollback_result result = new Rollback_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void Flush(TransactionID transactionID)
      {
        send_Flush(transactionID);
        recv_Flush();
      }

      public void send_Flush(TransactionID transactionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Flush", TMessageType.Call, seqid_));
        Flush_args args = new Flush_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_Flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Flush_result result = new Flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public bool DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        send_DoesConflict(reads, source, target);
        return recv_DoesConflict();
      }

      public void send_DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        oprot_.WriteMessageBegin(new TMessage("DoesConflict", TMessageType.Call, seqid_));
        DoesConflict_args args = new DoesConflict_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_DoesConflict()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoesConflict_result result = new DoesConflict_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoesConflict failed: unknown result");
      }

      public TransactionID Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        send_Update(transactionID, writes, reads);
        return recv_Update();
      }

      public void send_Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        oprot_.WriteMessageBegin(new TMessage("Update", TMessageType.Call, seqid_));
        Update_args args = new Update_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TransactionID recv_Update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Update_result result = new Update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.conflict) {
          throw result.Conflict;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Update failed: unknown result");
      }

      public Dictionary<int, Dictionary<Query, Answer>> Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        send_Transgrade(reads, source, target);
        return recv_Transgrade();
      }

      public void send_Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        oprot_.WriteMessageBegin(new TMessage("Transgrade", TMessageType.Call, seqid_));
        Transgrade_args args = new Transgrade_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<int, Dictionary<Query, Answer>> recv_Transgrade()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Transgrade_result result = new Transgrade_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Transgrade failed: unknown result");
      }

      public long AcquireLock(string name, LockMode mode, int timeout)
      {
        send_AcquireLock(name, mode, timeout);
        return recv_AcquireLock();
      }

      public void send_AcquireLock(string name, LockMode mode, int timeout)
      {
        oprot_.WriteMessageBegin(new TMessage("AcquireLock", TMessageType.Call, seqid_));
        AcquireLock_args args = new AcquireLock_args();
        args.Name = name;
        args.Mode = mode;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_AcquireLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AcquireLock_result result = new AcquireLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AcquireLock failed: unknown result");
      }

      public void KeepLock(long lockID)
      {
        send_KeepLock(lockID);
        recv_KeepLock();
      }

      public void send_KeepLock(long lockID)
      {
        oprot_.WriteMessageBegin(new TMessage("KeepLock", TMessageType.Call, seqid_));
        KeepLock_args args = new KeepLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_KeepLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        KeepLock_result result = new KeepLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      public void EscalateLock(long lockID, int timeout)
      {
        send_EscalateLock(lockID, timeout);
        recv_EscalateLock();
      }

      public void send_EscalateLock(long lockID, int timeout)
      {
        oprot_.WriteMessageBegin(new TMessage("EscalateLock", TMessageType.Call, seqid_));
        EscalateLock_args args = new EscalateLock_args();
        args.LockID = lockID;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_EscalateLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EscalateLock_result result = new EscalateLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      public void ReleaseLock(long lockID)
      {
        send_ReleaseLock(lockID);
        recv_ReleaseLock();
      }

      public void send_ReleaseLock(long lockID)
      {
        oprot_.WriteMessageBegin(new TMessage("ReleaseLock", TMessageType.Call, seqid_));
        ReleaseLock_args args = new ReleaseLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_ReleaseLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReleaseLock_result result = new ReleaseLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      public ReadResults Query(Dictionary<int, Query> queries)
      {
        send_Query(queries);
        return recv_Query();
      }

      public void send_Query(Dictionary<int, Query> queries)
      {
        oprot_.WriteMessageBegin(new TMessage("Query", TMessageType.Call, seqid_));
        Query_args args = new Query_args();
        args.Queries = queries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ReadResults recv_Query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Query_result result = new Query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Query failed: unknown result");
      }

      public List<Statistic> GetStatistics(List<int> columnIDs)
      {
        send_GetStatistics(columnIDs);
        return recv_GetStatistics();
      }

      public void send_GetStatistics(List<int> columnIDs)
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatistics", TMessageType.Call, seqid_));
        GetStatistics_args args = new GetStatistics_args();
        args.ColumnIDs = columnIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Statistic> recv_GetStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStatistics_result result = new GetStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatistics failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetTopology"] = GetTopology_Process;
        processMap_["PrepareTopology"] = PrepareTopology_Process;
        processMap_["CommitTopology"] = CommitTopology_Process;
        processMap_["RollbackTopology"] = RollbackTopology_Process;
        processMap_["GetTopologyReport"] = GetTopologyReport_Process;
        processMap_["GetReport"] = GetReport_Process;
        processMap_["Prepare"] = Prepare_Process;
        processMap_["Apply"] = Apply_Process;
        processMap_["Commit"] = Commit_Process;
        processMap_["Rollback"] = Rollback_Process;
        processMap_["Flush"] = Flush_Process;
        processMap_["DoesConflict"] = DoesConflict_Process;
        processMap_["Update"] = Update_Process;
        processMap_["Transgrade"] = Transgrade_Process;
        processMap_["AcquireLock"] = AcquireLock_Process;
        processMap_["KeepLock"] = KeepLock_Process;
        processMap_["EscalateLock"] = EscalateLock_Process;
        processMap_["ReleaseLock"] = ReleaseLock_Process;
        processMap_["Query"] = Query_Process;
        processMap_["GetStatistics"] = GetStatistics_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTopology_args args = new GetTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTopology_result result = new GetTopology_result();
        result.Success = iface_.GetTopology();
        oprot.WriteMessageBegin(new TMessage("GetTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PrepareTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PrepareTopology_args args = new PrepareTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PrepareTopology_result result = new PrepareTopology_result();
        result.Success = iface_.PrepareTopology(args.TransactionID, args.Topology);
        oprot.WriteMessageBegin(new TMessage("PrepareTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CommitTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CommitTopology_args args = new CommitTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CommitTopology_result result = new CommitTopology_result();
        iface_.CommitTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("CommitTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RollbackTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RollbackTopology_args args = new RollbackTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RollbackTopology_result result = new RollbackTopology_result();
        iface_.RollbackTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("RollbackTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTopologyReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTopologyReport_args args = new GetTopologyReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTopologyReport_result result = new GetTopologyReport_result();
        result.Success = iface_.GetTopologyReport();
        oprot.WriteMessageBegin(new TMessage("GetTopologyReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReport_args args = new GetReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReport_result result = new GetReport_result();
        result.Success = iface_.GetReport();
        oprot.WriteMessageBegin(new TMessage("GetReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Prepare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Prepare_args args = new Prepare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Prepare_result result = new Prepare_result();
        try {
          result.Success = iface_.Prepare(args.TransactionID, args.Writes, args.Reads);
        } catch (NotLatest notLatest) {
          result.NotLatest = notLatest;
        }
        oprot.WriteMessageBegin(new TMessage("Prepare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Apply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Apply_args args = new Apply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Apply_result result = new Apply_result();
        result.Success = iface_.Apply(args.TransactionID, args.Writes);
        oprot.WriteMessageBegin(new TMessage("Apply", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Commit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Commit_args args = new Commit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Commit_result result = new Commit_result();
        iface_.Commit(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Commit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Rollback_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Rollback_args args = new Rollback_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Rollback_result result = new Rollback_result();
        iface_.Rollback(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Rollback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Flush_args args = new Flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Flush_result result = new Flush_result();
        iface_.Flush(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoesConflict_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoesConflict_args args = new DoesConflict_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoesConflict_result result = new DoesConflict_result();
        try {
          result.Success = iface_.DoesConflict(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("DoesConflict", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Update_args args = new Update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Update_result result = new Update_result();
        try {
          result.Success = iface_.Update(args.TransactionID, args.Writes, args.Reads);
        } catch (Conflict conflict) {
          result.Conflict = conflict;
        }
        oprot.WriteMessageBegin(new TMessage("Update", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Transgrade_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Transgrade_args args = new Transgrade_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Transgrade_result result = new Transgrade_result();
        try {
          result.Success = iface_.Transgrade(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("Transgrade", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AcquireLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AcquireLock_args args = new AcquireLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AcquireLock_result result = new AcquireLock_result();
        try {
          result.Success = iface_.AcquireLock(args.Name, args.Mode, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        }
        oprot.WriteMessageBegin(new TMessage("AcquireLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void KeepLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        KeepLock_args args = new KeepLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        KeepLock_result result = new KeepLock_result();
        try {
          iface_.KeepLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("KeepLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EscalateLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EscalateLock_args args = new EscalateLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EscalateLock_result result = new EscalateLock_result();
        try {
          iface_.EscalateLock(args.LockID, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("EscalateLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReleaseLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReleaseLock_args args = new ReleaseLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReleaseLock_result result = new ReleaseLock_result();
        try {
          iface_.ReleaseLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("ReleaseLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Query_args args = new Query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Query_result result = new Query_result();
        result.Success = iface_.Query(args.Queries);
        oprot.WriteMessageBegin(new TMessage("Query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStatistics_args args = new GetStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStatistics_result result = new GetStatistics_result();
        result.Success = iface_.GetStatistics(args.ColumnIDs);
        oprot.WriteMessageBegin(new TMessage("GetStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class GetTopology_args : TBase
    {

      public GetTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopology_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopology_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetTopology_result : TBase
    {
      private TopologyResult _success;

      public TopologyResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PrepareTopology_args : TBase
    {
      private TransactionID _transactionID;
      private Topology _topology;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Topology Topology
      {
        get
        {
          return _topology;
        }
        set
        {
          __isset.topology = true;
          this._topology = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
        public bool topology;
      }

      public PrepareTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Topology = new Topology();
                Topology.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PrepareTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Topology != null && __isset.topology) {
          field.Name = "topology";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Topology.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PrepareTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Topology: ");
        sb.Append(Topology== null ? "<null>" : Topology.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PrepareTopology_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public PrepareTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PrepareTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PrepareTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CommitTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
      }

      public CommitTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CommitTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CommitTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class CommitTopology_result : TBase
    {

      public CommitTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CommitTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CommitTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RollbackTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
      }

      public RollbackTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RollbackTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RollbackTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class RollbackTopology_result : TBase
    {

      public RollbackTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RollbackTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RollbackTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetTopologyReport_args : TBase
    {

      public GetTopologyReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopologyReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopologyReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetTopologyReport_result : TBase
    {
      private TopologyReport _success;

      public TopologyReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetTopologyReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopologyReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopologyReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetReport_args : TBase
    {

      public GetReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetReport_result : TBase
    {
      private HostReport _success;

      public HostReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Prepare_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public Prepare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map55 = iprot.ReadMapBegin();
                  for( int _i56 = 0; _i56 < _map55.Count; ++_i56)
                  {
                    int _key57;
                    ColumnWrites _val58;
                    _key57 = iprot.ReadI32();
                    _val58 = new ColumnWrites();
                    _val58.Read(iprot);
                    Writes[_key57] = _val58;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map59 = iprot.ReadMapBegin();
                  for( int _i60 = 0; _i60 < _map59.Count; ++_i60)
                  {
                    int _key61;
                    Dictionary<Query, Answer> _val62;
                    _key61 = iprot.ReadI32();
                    {
                      _val62 = new Dictionary<Query, Answer>();
                      TMap _map63 = iprot.ReadMapBegin();
                      for( int _i64 = 0; _i64 < _map63.Count; ++_i64)
                      {
                        Query _key65;
                        Answer _val66;
                        _key65 = new Query();
                        _key65.Read(iprot);
                        _val66 = new Answer();
                        _val66.Read(iprot);
                        _val62[_key65] = _val66;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key61] = _val62;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Prepare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter67 in Writes.Keys)
            {
              oprot.WriteI32(_iter67);
              Writes[_iter67].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter68 in Reads.Keys)
            {
              oprot.WriteI32(_iter68);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter68].Count));
                foreach (Query _iter69 in Reads[_iter68].Keys)
                {
                  _iter69.Write(oprot);
                  Reads[_iter68][_iter69].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Prepare_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Prepare_result : TBase
    {
      private long _success;
      private NotLatest _notLatest;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotLatest NotLatest
      {
        get
        {
          return _notLatest;
        }
        set
        {
          __isset.notLatest = true;
          this._notLatest = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool notLatest;
      }

      public Prepare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotLatest = new NotLatest();
                NotLatest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Prepare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.notLatest) {
          if (NotLatest != null) {
            field.Name = "NotLatest";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotLatest.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Prepare_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",NotLatest: ");
        sb.Append(NotLatest== null ? "<null>" : NotLatest.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Apply_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
        public bool writes;
      }

      public Apply_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map70 = iprot.ReadMapBegin();
                  for( int _i71 = 0; _i71 < _map70.Count; ++_i71)
                  {
                    int _key72;
                    ColumnWrites _val73;
                    _key72 = iprot.ReadI32();
                    _val73 = new ColumnWrites();
                    _val73.Read(iprot);
                    Writes[_key72] = _val73;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Apply_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter74 in Writes.Keys)
            {
              oprot.WriteI32(_iter74);
              Writes[_iter74].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Apply_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Apply_result : TBase
    {
      private TransactionID _success;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public Apply_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Apply_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Apply_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Commit_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
      }

      public Commit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Commit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Commit_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Commit_result : TBase
    {

      public Commit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Commit_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Commit_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Rollback_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
      }

      public Rollback_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Rollback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Rollback_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Rollback_result : TBase
    {

      public Rollback_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Rollback_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Rollback_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Flush_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
      }

      public Flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Flush_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Flush_result : TBase
    {

      public Flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Flush_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Flush_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DoesConflict_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public DoesConflict_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map75 = iprot.ReadMapBegin();
                  for( int _i76 = 0; _i76 < _map75.Count; ++_i76)
                  {
                    int _key77;
                    Dictionary<Query, Answer> _val78;
                    _key77 = iprot.ReadI32();
                    {
                      _val78 = new Dictionary<Query, Answer>();
                      TMap _map79 = iprot.ReadMapBegin();
                      for( int _i80 = 0; _i80 < _map79.Count; ++_i80)
                      {
                        Query _key81;
                        Answer _val82;
                        _key81 = new Query();
                        _key81.Read(iprot);
                        _val82 = new Answer();
                        _val82.Read(iprot);
                        _val78[_key81] = _val82;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key77] = _val78;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoesConflict_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter83 in Reads.Keys)
            {
              oprot.WriteI32(_iter83);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter83].Count));
                foreach (Query _iter84 in Reads[_iter83].Keys)
                {
                  _iter84.Write(oprot);
                  Reads[_iter83][_iter84].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DoesConflict_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class DoesConflict_result : TBase
    {
      private bool _success;
      private BeyondHistory _beyondHistory;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public DoesConflict_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoesConflict_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DoesConflict_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Update_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public Update_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map85 = iprot.ReadMapBegin();
                  for( int _i86 = 0; _i86 < _map85.Count; ++_i86)
                  {
                    int _key87;
                    ColumnWrites _val88;
                    _key87 = iprot.ReadI32();
                    _val88 = new ColumnWrites();
                    _val88.Read(iprot);
                    Writes[_key87] = _val88;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map89 = iprot.ReadMapBegin();
                  for( int _i90 = 0; _i90 < _map89.Count; ++_i90)
                  {
                    int _key91;
                    Dictionary<Query, Answer> _val92;
                    _key91 = iprot.ReadI32();
                    {
                      _val92 = new Dictionary<Query, Answer>();
                      TMap _map93 = iprot.ReadMapBegin();
                      for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                      {
                        Query _key95;
                        Answer _val96;
                        _key95 = new Query();
                        _key95.Read(iprot);
                        _val96 = new Answer();
                        _val96.Read(iprot);
                        _val92[_key95] = _val96;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key91] = _val92;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Update_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter97 in Writes.Keys)
            {
              oprot.WriteI32(_iter97);
              Writes[_iter97].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter98 in Reads.Keys)
            {
              oprot.WriteI32(_iter98);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter98].Count));
                foreach (Query _iter99 in Reads[_iter98].Keys)
                {
                  _iter99.Write(oprot);
                  Reads[_iter98][_iter99].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Update_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Update_result : TBase
    {
      private TransactionID _success;
      private Conflict _conflict;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Conflict Conflict
      {
        get
        {
          return _conflict;
        }
        set
        {
          __isset.conflict = true;
          this._conflict = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool conflict;
      }

      public Update_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Conflict = new Conflict();
                Conflict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Update_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.conflict) {
          if (Conflict != null) {
            field.Name = "Conflict";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Conflict.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Update_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Conflict: ");
        sb.Append(Conflict== null ? "<null>" : Conflict.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Transgrade_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public Transgrade_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map100 = iprot.ReadMapBegin();
                  for( int _i101 = 0; _i101 < _map100.Count; ++_i101)
                  {
                    int _key102;
                    Dictionary<Query, Answer> _val103;
                    _key102 = iprot.ReadI32();
                    {
                      _val103 = new Dictionary<Query, Answer>();
                      TMap _map104 = iprot.ReadMapBegin();
                      for( int _i105 = 0; _i105 < _map104.Count; ++_i105)
                      {
                        Query _key106;
                        Answer _val107;
                        _key106 = new Query();
                        _key106.Read(iprot);
                        _val107 = new Answer();
                        _val107.Read(iprot);
                        _val103[_key106] = _val107;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key102] = _val103;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Transgrade_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter108 in Reads.Keys)
            {
              oprot.WriteI32(_iter108);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter108].Count));
                foreach (Query _iter109 in Reads[_iter108].Keys)
                {
                  _iter109.Write(oprot);
                  Reads[_iter108][_iter109].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Transgrade_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Transgrade_result : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _success;
      private BeyondHistory _beyondHistory;

      public Dictionary<int, Dictionary<Query, Answer>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public Transgrade_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map110 = iprot.ReadMapBegin();
                  for( int _i111 = 0; _i111 < _map110.Count; ++_i111)
                  {
                    int _key112;
                    Dictionary<Query, Answer> _val113;
                    _key112 = iprot.ReadI32();
                    {
                      _val113 = new Dictionary<Query, Answer>();
                      TMap _map114 = iprot.ReadMapBegin();
                      for( int _i115 = 0; _i115 < _map114.Count; ++_i115)
                      {
                        Query _key116;
                        Answer _val117;
                        _key116 = new Query();
                        _key116.Read(iprot);
                        _val117 = new Answer();
                        _val117.Read(iprot);
                        _val113[_key116] = _val117;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key112] = _val113;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Transgrade_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
              foreach (int _iter118 in Success.Keys)
              {
                oprot.WriteI32(_iter118);
                {
                  oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Success[_iter118].Count));
                  foreach (Query _iter119 in Success[_iter118].Keys)
                  {
                    _iter119.Write(oprot);
                    Success[_iter118][_iter119].Write(oprot);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Transgrade_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AcquireLock_args : TBase
    {
      private string _name;
      private LockMode _mode;
      private int _timeout;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public LockMode Mode
      {
        get
        {
          return _mode;
        }
        set
        {
          __isset.mode = true;
          this._mode = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
        public bool mode;
        public bool timeout;
      }

      public AcquireLock_args() {
        this._timeout = 1000;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = (LockMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireLock_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Mode: ");
        sb.Append(Mode);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class AcquireLock_result : TBase
    {
      private long _success;
      private LockTimedOut _timeout;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool timeout;
      }

      public AcquireLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class KeepLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool lockID;
      }

      public KeepLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KeepLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KeepLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class KeepLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool expired;
      }

      public KeepLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KeepLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KeepLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class EscalateLock_args : TBase
    {
      private long _lockID;
      private int _timeout;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool lockID;
        public bool timeout;
      }

      public EscalateLock_args() {
        this._timeout = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EscalateLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EscalateLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class EscalateLock_result : TBase
    {
      private LockTimedOut _timeout;
      private LockExpired _expired;

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool timeout;
        public bool expired;
      }

      public EscalateLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EscalateLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EscalateLock_result(");
        sb.Append("Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(",Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReleaseLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool lockID;
      }

      public ReleaseLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ReleaseLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool expired;
      }

      public ReleaseLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Query_args : TBase
    {
      private Dictionary<int, Query> _queries;

      public Dictionary<int, Query> Queries
      {
        get
        {
          return _queries;
        }
        set
        {
          __isset.queries = true;
          this._queries = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool queries;
      }

      public Query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Queries = new Dictionary<int, Query>();
                  TMap _map120 = iprot.ReadMapBegin();
                  for( int _i121 = 0; _i121 < _map120.Count; ++_i121)
                  {
                    int _key122;
                    Query _val123;
                    _key122 = iprot.ReadI32();
                    _val123 = new Query();
                    _val123.Read(iprot);
                    Queries[_key122] = _val123;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Queries != null && __isset.queries) {
          field.Name = "queries";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Queries.Count));
            foreach (int _iter124 in Queries.Keys)
            {
              oprot.WriteI32(_iter124);
              Queries[_iter124].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Query_args(");
        sb.Append("Queries: ");
        sb.Append(Queries);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Query_result : TBase
    {
      private ReadResults _success;

      public ReadResults Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public Query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReadResults();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Query_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetStatistics_args : TBase
    {
      private List<int> _columnIDs;

      public List<int> ColumnIDs
      {
        get
        {
          return _columnIDs;
        }
        set
        {
          __isset.columnIDs = true;
          this._columnIDs = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool columnIDs;
      }

      public GetStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ColumnIDs = new List<int>();
                  TList _list125 = iprot.ReadListBegin();
                  for( int _i126 = 0; _i126 < _list125.Count; ++_i126)
                  {
                    int _elem127 = 0;
                    _elem127 = iprot.ReadI32();
                    ColumnIDs.Add(_elem127);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ColumnIDs != null && __isset.columnIDs) {
          field.Name = "columnIDs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ColumnIDs.Count));
            foreach (int _iter128 in ColumnIDs)
            {
              oprot.WriteI32(_iter128);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatistics_args(");
        sb.Append("ColumnIDs: ");
        sb.Append(ColumnIDs);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetStatistics_result : TBase
    {
      private List<Statistic> _success;

      public List<Statistic> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public GetStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Statistic>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    Statistic _elem131 = new Statistic();
                    _elem131 = new Statistic();
                    _elem131.Read(iprot);
                    Success.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Statistic _iter132 in Success)
              {
                _iter132.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
