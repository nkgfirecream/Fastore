/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{
  public partial class Service {
    public interface Iface {
      /// <summary>
      /// Initialize a new hive starting with this service
      /// </summary>
      HiveState init();
      #if SILVERLIGHT
      IAsyncResult Begin_init(AsyncCallback callback, object state, );
      HiveState End_init(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Associates the service with the given logical host ID within the given hive.
      /// </summary>
      /// <param name="hostID"></param>
      /// <param name="hiveState"></param>
      ServiceState join(int hostID, HiveState hiveState);
      #if SILVERLIGHT
      IAsyncResult Begin_join(AsyncCallback callback, object state, int hostID, HiveState hiveState);
      ServiceState End_join(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Dissociates the service from the current hive.
      /// </summary>
      void leave();
      #if SILVERLIGHT
      IAsyncResult Begin_leave(AsyncCallback callback, object state, );
      void End_leave(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of all services in the hive as understood by this service.
      /// </summary>
      HiveState getHiveState();
      #if SILVERLIGHT
      IAsyncResult Begin_getHiveState(AsyncCallback callback, object state, );
      HiveState End_getHiveState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of this service.
      /// </summary>
      ServiceState getState();
      #if SILVERLIGHT
      IAsyncResult Begin_getState(AsyncCallback callback, object state, );
      ServiceState End_getState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      long acquireLock(string name, LockMode mode, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout);
      long End_acquireLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      void keepLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_keepLock(AsyncCallback callback, object state, long lockID);
      void End_keepLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      void escalateLock(long lockID, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_escalateLock(AsyncCallback callback, object state, long lockID, int timeout);
      void End_escalateLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      void releaseLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_releaseLock(AsyncCallback callback, object state, long lockID);
      void End_releaseLock(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_init(AsyncCallback callback, object state, )
      {
        return send_init(callback, state);
      }

      public HiveState End_init(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_init();
      }

      #endif

      /// <summary>
      /// Initialize a new hive starting with this service
      /// </summary>
      public HiveState init()
      {
        #if !SILVERLIGHT
        send_init();
        return recv_init();

        #else
        var asyncResult = Begin_init(null, null, );
        return End_init(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_init(AsyncCallback callback, object state, )
      #else
      public void send_init()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("init", TMessageType.Call, seqid_));
        init_args args = new init_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HiveState recv_init()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        init_result result = new init_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.alreadyJoined) {
          throw result.AlreadyJoined;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "init failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_join(AsyncCallback callback, object state, int hostID, HiveState hiveState)
      {
        return send_join(callback, state, hostID, hiveState);
      }

      public ServiceState End_join(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_join();
      }

      #endif

      /// <summary>
      /// Associates the service with the given logical host ID within the given hive.
      /// </summary>
      /// <param name="hostID"></param>
      /// <param name="hiveState"></param>
      public ServiceState join(int hostID, HiveState hiveState)
      {
        #if !SILVERLIGHT
        send_join(hostID, hiveState);
        return recv_join();

        #else
        var asyncResult = Begin_join(null, null, hostID, hiveState);
        return End_join(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_join(AsyncCallback callback, object state, int hostID, HiveState hiveState)
      #else
      public void send_join(int hostID, HiveState hiveState)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("join", TMessageType.Call, seqid_));
        join_args args = new join_args();
        args.HostID = hostID;
        args.HiveState = hiveState;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServiceState recv_join()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        join_result result = new join_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.alreadyJoined) {
          throw result.AlreadyJoined;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "join failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_leave(AsyncCallback callback, object state, )
      {
        return send_leave(callback, state);
      }

      public void End_leave(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_leave();
      }

      #endif

      /// <summary>
      /// Dissociates the service from the current hive.
      /// </summary>
      public void leave()
      {
        #if !SILVERLIGHT
        send_leave();
        recv_leave();

        #else
        var asyncResult = Begin_leave(null, null, );
        End_leave(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_leave(AsyncCallback callback, object state, )
      #else
      public void send_leave()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("leave", TMessageType.Call, seqid_));
        leave_args args = new leave_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_leave()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        leave_result result = new leave_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHiveState(AsyncCallback callback, object state, )
      {
        return send_getHiveState(callback, state);
      }

      public HiveState End_getHiveState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHiveState();
      }

      #endif

      /// <summary>
      /// Returns the current status of all services in the hive as understood by this service.
      /// </summary>
      public HiveState getHiveState()
      {
        #if !SILVERLIGHT
        send_getHiveState();
        return recv_getHiveState();

        #else
        var asyncResult = Begin_getHiveState(null, null, );
        return End_getHiveState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHiveState(AsyncCallback callback, object state, )
      #else
      public void send_getHiveState()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHiveState", TMessageType.Call, seqid_));
        getHiveState_args args = new getHiveState_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HiveState recv_getHiveState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHiveState_result result = new getHiveState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHiveState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getState(AsyncCallback callback, object state, )
      {
        return send_getState(callback, state);
      }

      public ServiceState End_getState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getState();
      }

      #endif

      /// <summary>
      /// Returns the current status of this service.
      /// </summary>
      public ServiceState getState()
      {
        #if !SILVERLIGHT
        send_getState();
        return recv_getState();

        #else
        var asyncResult = Begin_getState(null, null, );
        return End_getState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getState(AsyncCallback callback, object state, )
      #else
      public void send_getState()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getState", TMessageType.Call, seqid_));
        getState_args args = new getState_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ServiceState recv_getState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getState_result result = new getState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      {
        return send_acquireLock(callback, state, name, mode, timeout);
      }

      public long End_acquireLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acquireLock();
      }

      #endif

      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      public long acquireLock(string name, LockMode mode, int timeout)
      {
        #if !SILVERLIGHT
        send_acquireLock(name, mode, timeout);
        return recv_acquireLock();

        #else
        var asyncResult = Begin_acquireLock(null, null, name, mode, timeout);
        return End_acquireLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      #else
      public void send_acquireLock(string name, LockMode mode, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acquireLock", TMessageType.Call, seqid_));
        acquireLock_args args = new acquireLock_args();
        args.Name = name;
        args.Mode = mode;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_acquireLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acquireLock_result result = new acquireLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_keepLock(AsyncCallback callback, object state, long lockID)
      {
        return send_keepLock(callback, state, lockID);
      }

      public void End_keepLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_keepLock();
      }

      #endif

      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      public void keepLock(long lockID)
      {
        #if !SILVERLIGHT
        send_keepLock(lockID);
        recv_keepLock();

        #else
        var asyncResult = Begin_keepLock(null, null, lockID);
        End_keepLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_keepLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_keepLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("keepLock", TMessageType.Call, seqid_));
        keepLock_args args = new keepLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_keepLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        keepLock_result result = new keepLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_escalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      {
        return send_escalateLock(callback, state, lockID, timeout);
      }

      public void End_escalateLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_escalateLock();
      }

      #endif

      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      public void escalateLock(long lockID, int timeout)
      {
        #if !SILVERLIGHT
        send_escalateLock(lockID, timeout);
        recv_escalateLock();

        #else
        var asyncResult = Begin_escalateLock(null, null, lockID, timeout);
        End_escalateLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_escalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      #else
      public void send_escalateLock(long lockID, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("escalateLock", TMessageType.Call, seqid_));
        escalateLock_args args = new escalateLock_args();
        args.LockID = lockID;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_escalateLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        escalateLock_result result = new escalateLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        if (result.__isset.expired) {
          throw result.Expired;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_releaseLock(AsyncCallback callback, object state, long lockID)
      {
        return send_releaseLock(callback, state, lockID);
      }

      public void End_releaseLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_releaseLock();
      }

      #endif

      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      public void releaseLock(long lockID)
      {
        #if !SILVERLIGHT
        send_releaseLock(lockID);
        recv_releaseLock();

        #else
        var asyncResult = Begin_releaseLock(null, null, lockID);
        End_releaseLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_releaseLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_releaseLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("releaseLock", TMessageType.Call, seqid_));
        releaseLock_args args = new releaseLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_releaseLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        releaseLock_result result = new releaseLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        if (result.__isset.notJoined) {
          throw result.NotJoined;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["init"] = init_Process;
        processMap_["join"] = join_Process;
        processMap_["leave"] = leave_Process;
        processMap_["getHiveState"] = getHiveState_Process;
        processMap_["getState"] = getState_Process;
        processMap_["acquireLock"] = acquireLock_Process;
        processMap_["keepLock"] = keepLock_Process;
        processMap_["escalateLock"] = escalateLock_Process;
        processMap_["releaseLock"] = releaseLock_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void init_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        init_args args = new init_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        init_result result = new init_result();
        try {
          result.Success = iface_.init();
        } catch (AlreadyJoined alreadyJoined) {
          result.AlreadyJoined = alreadyJoined;
        }
        oprot.WriteMessageBegin(new TMessage("init", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void join_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        join_args args = new join_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        join_result result = new join_result();
        try {
          result.Success = iface_.join(args.HostID, args.HiveState);
        } catch (AlreadyJoined alreadyJoined) {
          result.AlreadyJoined = alreadyJoined;
        }
        oprot.WriteMessageBegin(new TMessage("join", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void leave_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        leave_args args = new leave_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        leave_result result = new leave_result();
        try {
          iface_.leave();
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("leave", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHiveState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHiveState_args args = new getHiveState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHiveState_result result = new getHiveState_result();
        try {
          result.Success = iface_.getHiveState();
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("getHiveState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getState_args args = new getState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getState_result result = new getState_result();
        try {
          result.Success = iface_.getState();
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("getState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acquireLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acquireLock_args args = new acquireLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acquireLock_result result = new acquireLock_result();
        try {
          result.Success = iface_.acquireLock(args.Name, args.Mode, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("acquireLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void keepLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        keepLock_args args = new keepLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        keepLock_result result = new keepLock_result();
        try {
          iface_.keepLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("keepLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void escalateLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        escalateLock_args args = new escalateLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        escalateLock_result result = new escalateLock_result();
        try {
          iface_.escalateLock(args.LockID, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        } catch (LockExpired expired) {
          result.Expired = expired;
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("escalateLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void releaseLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        releaseLock_args args = new releaseLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        releaseLock_result result = new releaseLock_result();
        try {
          iface_.releaseLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        } catch (NotJoined notJoined) {
          result.NotJoined = notJoined;
        }
        oprot.WriteMessageBegin(new TMessage("releaseLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class init_args : TBase
    {

      public init_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("init_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("init_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class init_result : TBase
    {
      private HiveState _success;
      private AlreadyJoined _alreadyJoined;

      public HiveState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AlreadyJoined AlreadyJoined
      {
        get
        {
          return _alreadyJoined;
        }
        set
        {
          __isset.alreadyJoined = true;
          this._alreadyJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool alreadyJoined;
      }

      public init_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HiveState();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                AlreadyJoined = new AlreadyJoined();
                AlreadyJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("init_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.alreadyJoined) {
          if (AlreadyJoined != null) {
            field.Name = "AlreadyJoined";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AlreadyJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("init_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",AlreadyJoined: ");
        sb.Append(AlreadyJoined== null ? "<null>" : AlreadyJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class join_args : TBase
    {
      private int _hostID;
      private HiveState _hiveState;

      public int HostID
      {
        get
        {
          return _hostID;
        }
        set
        {
          __isset.hostID = true;
          this._hostID = value;
        }
      }

      public HiveState HiveState
      {
        get
        {
          return _hiveState;
        }
        set
        {
          __isset.hiveState = true;
          this._hiveState = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool hostID;
        public bool hiveState;
      }

      public join_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                HostID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                HiveState = new HiveState();
                HiveState.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("join_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.hostID) {
          field.Name = "hostID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(HostID);
          oprot.WriteFieldEnd();
        }
        if (HiveState != null && __isset.hiveState) {
          field.Name = "hiveState";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          HiveState.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("join_args(");
        sb.Append("HostID: ");
        sb.Append(HostID);
        sb.Append(",HiveState: ");
        sb.Append(HiveState== null ? "<null>" : HiveState.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class join_result : TBase
    {
      private ServiceState _success;
      private AlreadyJoined _alreadyJoined;

      public ServiceState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AlreadyJoined AlreadyJoined
      {
        get
        {
          return _alreadyJoined;
        }
        set
        {
          __isset.alreadyJoined = true;
          this._alreadyJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool alreadyJoined;
      }

      public join_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServiceState();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                AlreadyJoined = new AlreadyJoined();
                AlreadyJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("join_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.alreadyJoined) {
          if (AlreadyJoined != null) {
            field.Name = "AlreadyJoined";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AlreadyJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("join_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",AlreadyJoined: ");
        sb.Append(AlreadyJoined== null ? "<null>" : AlreadyJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leave_args : TBase
    {

      public leave_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leave_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leave_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leave_result : TBase
    {
      private NotJoined _notJoined;

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool notJoined;
      }

      public leave_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leave_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leave_result(");
        sb.Append("NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHiveState_args : TBase
    {

      public getHiveState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHiveState_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHiveState_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHiveState_result : TBase
    {
      private HiveState _success;
      private NotJoined _notJoined;

      public HiveState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool notJoined;
      }

      public getHiveState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HiveState();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHiveState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHiveState_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getState_args : TBase
    {

      public getState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getState_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getState_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getState_result : TBase
    {
      private ServiceState _success;
      private NotJoined _notJoined;

      public ServiceState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool notJoined;
      }

      public getState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServiceState();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getState_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireLock_args : TBase
    {
      private string _name;
      private LockMode _mode;
      private int _timeout;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="LockMode"/>
      /// </summary>
      public LockMode Mode
      {
        get
        {
          return _mode;
        }
        set
        {
          __isset.mode = true;
          this._mode = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool mode;
        public bool timeout;
      }

      public acquireLock_args() {
        this._timeout = 1000;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = (LockMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireLock_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Mode: ");
        sb.Append(Mode);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireLock_result : TBase
    {
      private long _success;
      private LockTimedOut _timeout;
      private NotJoined _notJoined;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool timeout;
        public bool notJoined;
      }

      public acquireLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class keepLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public keepLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("keepLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("keepLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class keepLock_result : TBase
    {
      private LockExpired _expired;
      private NotJoined _notJoined;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
        public bool notJoined;
      }

      public keepLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("keepLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("keepLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class escalateLock_args : TBase
    {
      private long _lockID;
      private int _timeout;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
        public bool timeout;
      }

      public escalateLock_args() {
        this._timeout = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("escalateLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("escalateLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class escalateLock_result : TBase
    {
      private LockTimedOut _timeout;
      private LockExpired _expired;
      private NotJoined _notJoined;

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeout;
        public bool expired;
        public bool notJoined;
      }

      public escalateLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("escalateLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("escalateLock_result(");
        sb.Append("Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(",Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public releaseLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseLock_result : TBase
    {
      private LockExpired _expired;
      private NotJoined _notJoined;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }

      public NotJoined NotJoined
      {
        get
        {
          return _notJoined;
        }
        set
        {
          __isset.notJoined = true;
          this._notJoined = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
        public bool notJoined;
      }

      public releaseLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                NotJoined = new NotJoined();
                NotJoined.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.notJoined) {
          if (NotJoined != null) {
            field.Name = "NotJoined";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            NotJoined.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(",NotJoined: ");
        sb.Append(NotJoined== null ? "<null>" : NotJoined.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
