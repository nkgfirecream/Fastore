/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{
  public partial class Service {
    public interface Iface {
      /// <summary>
      /// Returns the target topology as this host presently understands it.
      /// </summary>
      TopologyResult getTopology();
      #if SILVERLIGHT
      IAsyncResult Begin_getTopology(AsyncCallback callback, object state, );
      TopologyResult End_getTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the topology and returns the new topology revision - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="topology"></param>
      long prepareTopology(TransactionID transactionID, Topology topology);
      #if SILVERLIGHT
      IAsyncResult Begin_prepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology);
      long End_prepareTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was successful, the change should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      void commitTopology(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_commitTopology(AsyncCallback callback, object state, TransactionID transactionID);
      void End_commitTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was unsuccessful, the change should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      void rollbackTopology(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_rollbackTopology(AsyncCallback callback, object state, TransactionID transactionID);
      void End_rollbackTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of all hosts as this host understands it.
      /// </summary>
      TopologyReport getTopologyReport();
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyReport(AsyncCallback callback, object state, );
      TopologyReport End_getTopologyReport(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of this host.
      /// </summary>
      HostReport getReport();
      #if SILVERLIGHT
      IAsyncResult Begin_getReport(AsyncCallback callback, object state, );
      HostReport End_getReport(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      long prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      long End_prepare(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      TransactionID apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      #if SILVERLIGHT
      IAsyncResult Begin_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      TransactionID End_apply(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was successful, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      void commit(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_commit(AsyncCallback callback, object state, TransactionID transactionID);
      void End_commit(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was unsuccessful, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      void rollback(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_rollback(AsyncCallback callback, object state, TransactionID transactionID);
      void End_rollback(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      void flush(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_flush(AsyncCallback callback, object state, TransactionID transactionID);
      void End_flush(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      bool doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      bool End_doesConflict(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      TransactionID update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      TransactionID End_update(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      Dictionary<int, Dictionary<Query, Answer>> transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      Dictionary<int, Dictionary<Query, Answer>> End_transgrade(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      long acquireLock(string name, LockMode mode, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout);
      long End_acquireLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      void keepLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_keepLock(AsyncCallback callback, object state, long lockID);
      void End_keepLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      void escalateLock(long lockID, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_escalateLock(AsyncCallback callback, object state, long lockID, int timeout);
      void End_escalateLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      void releaseLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_releaseLock(AsyncCallback callback, object state, long lockID);
      void End_releaseLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      Dictionary<int, ReadResult> query(Dictionary<int, Query> queries);
      #if SILVERLIGHT
      IAsyncResult Begin_query(AsyncCallback callback, object state, Dictionary<int, Query> queries);
      Dictionary<int, ReadResult> End_query(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      List<Statistic> getStatistics(List<int> columnIDs);
      #if SILVERLIGHT
      IAsyncResult Begin_getStatistics(AsyncCallback callback, object state, List<int> columnIDs);
      List<Statistic> End_getStatistics(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopology(AsyncCallback callback, object state, )
      {
        return send_getTopology(callback, state);
      }

      public TopologyResult End_getTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopology();
      }

      #endif

      /// <summary>
      /// Returns the target topology as this host presently understands it.
      /// </summary>
      public TopologyResult getTopology()
      {
        #if !SILVERLIGHT
        send_getTopology();
        return recv_getTopology();

        #else
        var asyncResult = Begin_getTopology(null, null, );
        return End_getTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopology(AsyncCallback callback, object state, )
      #else
      public void send_getTopology()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopology", TMessageType.Call, seqid_));
        getTopology_args args = new getTopology_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyResult recv_getTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopology_result result = new getTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_prepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology)
      {
        return send_prepareTopology(callback, state, transactionID, topology);
      }

      public long End_prepareTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_prepareTopology();
      }

      #endif

      /// <summary>
      /// Updates the topology and returns the new topology revision - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="topology"></param>
      public long prepareTopology(TransactionID transactionID, Topology topology)
      {
        #if !SILVERLIGHT
        send_prepareTopology(transactionID, topology);
        return recv_prepareTopology();

        #else
        var asyncResult = Begin_prepareTopology(null, null, transactionID, topology);
        return End_prepareTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_prepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology)
      #else
      public void send_prepareTopology(TransactionID transactionID, Topology topology)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("prepareTopology", TMessageType.Call, seqid_));
        prepareTopology_args args = new prepareTopology_args();
        args.TransactionID = transactionID;
        args.Topology = topology;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_prepareTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        prepareTopology_result result = new prepareTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "prepareTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commitTopology(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_commitTopology(callback, state, transactionID);
      }

      public void End_commitTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_commitTopology();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was successful, the change should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      public void commitTopology(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_commitTopology(transactionID);
        recv_commitTopology();

        #else
        var asyncResult = Begin_commitTopology(null, null, transactionID);
        End_commitTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commitTopology(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_commitTopology(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commitTopology", TMessageType.Call, seqid_));
        commitTopology_args args = new commitTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_commitTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        commitTopology_result result = new commitTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rollbackTopology(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_rollbackTopology(callback, state, transactionID);
      }

      public void End_rollbackTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rollbackTopology();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was unsuccessful, the change should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      public void rollbackTopology(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_rollbackTopology(transactionID);
        recv_rollbackTopology();

        #else
        var asyncResult = Begin_rollbackTopology(null, null, transactionID);
        End_rollbackTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rollbackTopology(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_rollbackTopology(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rollbackTopology", TMessageType.Call, seqid_));
        rollbackTopology_args args = new rollbackTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rollbackTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rollbackTopology_result result = new rollbackTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyReport(AsyncCallback callback, object state, )
      {
        return send_getTopologyReport(callback, state);
      }

      public TopologyReport End_getTopologyReport(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyReport();
      }

      #endif

      /// <summary>
      /// Returns the current status of all hosts as this host understands it.
      /// </summary>
      public TopologyReport getTopologyReport()
      {
        #if !SILVERLIGHT
        send_getTopologyReport();
        return recv_getTopologyReport();

        #else
        var asyncResult = Begin_getTopologyReport(null, null, );
        return End_getTopologyReport(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyReport(AsyncCallback callback, object state, )
      #else
      public void send_getTopologyReport()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyReport", TMessageType.Call, seqid_));
        getTopologyReport_args args = new getTopologyReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyReport recv_getTopologyReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyReport_result result = new getTopologyReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyReport failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getReport(AsyncCallback callback, object state, )
      {
        return send_getReport(callback, state);
      }

      public HostReport End_getReport(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getReport();
      }

      #endif

      /// <summary>
      /// Returns the current status of this host.
      /// </summary>
      public HostReport getReport()
      {
        #if !SILVERLIGHT
        send_getReport();
        return recv_getReport();

        #else
        var asyncResult = Begin_getReport(null, null, );
        return End_getReport(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getReport(AsyncCallback callback, object state, )
      #else
      public void send_getReport()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getReport", TMessageType.Call, seqid_));
        getReport_args args = new getReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostReport recv_getReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getReport_result result = new getReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReport failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_prepare(callback, state, transactionID, writes, reads);
      }

      public long End_prepare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_prepare();
      }

      #endif

      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public long prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_prepare(transactionID, writes, reads);
        return recv_prepare();

        #else
        var asyncResult = Begin_prepare(null, null, transactionID, writes, reads);
        return End_prepare(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("prepare", TMessageType.Call, seqid_));
        prepare_args args = new prepare_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_prepare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        prepare_result result = new prepare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notLatest) {
          throw result.NotLatest;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "prepare failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        return send_apply(callback, state, transactionID, writes);
      }

      public TransactionID End_apply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_apply();
      }

      #endif

      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      public TransactionID apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        #if !SILVERLIGHT
        send_apply(transactionID, writes);
        return recv_apply();

        #else
        var asyncResult = Begin_apply(null, null, transactionID, writes);
        return End_apply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #else
      public void send_apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("apply", TMessageType.Call, seqid_));
        apply_args args = new apply_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_apply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        apply_result result = new apply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apply failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commit(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_commit(callback, state, transactionID);
      }

      public void End_commit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_commit();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was successful, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      public void commit(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_commit(transactionID);
        recv_commit();

        #else
        var asyncResult = Begin_commit(null, null, transactionID);
        End_commit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commit(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_commit(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commit", TMessageType.Call, seqid_));
        commit_args args = new commit_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_commit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        commit_result result = new commit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rollback(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_rollback(callback, state, transactionID);
      }

      public void End_rollback(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rollback();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was unsuccessful, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      public void rollback(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_rollback(transactionID);
        recv_rollback();

        #else
        var asyncResult = Begin_rollback(null, null, transactionID);
        End_rollback(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rollback(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_rollback(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rollback", TMessageType.Call, seqid_));
        rollback_args args = new rollback_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rollback()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rollback_result result = new rollback_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_flush(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_flush(callback, state, transactionID);
      }

      public void End_flush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_flush();
      }

      #endif

      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      public void flush(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_flush(transactionID);
        recv_flush();

        #else
        var asyncResult = Begin_flush(null, null, transactionID);
        End_flush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_flush(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_flush(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("flush", TMessageType.Call, seqid_));
        flush_args args = new flush_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_result result = new flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_doesConflict(callback, state, reads, source, target);
      }

      public bool End_doesConflict(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_doesConflict();
      }

      #endif

      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public bool doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_doesConflict(reads, source, target);
        return recv_doesConflict();

        #else
        var asyncResult = Begin_doesConflict(null, null, reads, source, target);
        return End_doesConflict(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_doesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_doesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("doesConflict", TMessageType.Call, seqid_));
        doesConflict_args args = new doesConflict_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_doesConflict()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        doesConflict_result result = new doesConflict_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "doesConflict failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_update(callback, state, transactionID, writes, reads);
      }

      public TransactionID End_update(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_update();
      }

      #endif

      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public TransactionID update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_update(transactionID, writes, reads);
        return recv_update();

        #else
        var asyncResult = Begin_update(null, null, transactionID, writes, reads);
        return End_update(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("update", TMessageType.Call, seqid_));
        update_args args = new update_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        update_result result = new update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.conflict) {
          throw result.Conflict;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "update failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_transgrade(callback, state, reads, source, target);
      }

      public Dictionary<int, Dictionary<Query, Answer>> End_transgrade(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_transgrade();
      }

      #endif

      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public Dictionary<int, Dictionary<Query, Answer>> transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_transgrade(reads, source, target);
        return recv_transgrade();

        #else
        var asyncResult = Begin_transgrade(null, null, reads, source, target);
        return End_transgrade(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("transgrade", TMessageType.Call, seqid_));
        transgrade_args args = new transgrade_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, Dictionary<Query, Answer>> recv_transgrade()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        transgrade_result result = new transgrade_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "transgrade failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      {
        return send_acquireLock(callback, state, name, mode, timeout);
      }

      public long End_acquireLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acquireLock();
      }

      #endif

      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      public long acquireLock(string name, LockMode mode, int timeout)
      {
        #if !SILVERLIGHT
        send_acquireLock(name, mode, timeout);
        return recv_acquireLock();

        #else
        var asyncResult = Begin_acquireLock(null, null, name, mode, timeout);
        return End_acquireLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      #else
      public void send_acquireLock(string name, LockMode mode, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acquireLock", TMessageType.Call, seqid_));
        acquireLock_args args = new acquireLock_args();
        args.Name = name;
        args.Mode = mode;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_acquireLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acquireLock_result result = new acquireLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_keepLock(AsyncCallback callback, object state, long lockID)
      {
        return send_keepLock(callback, state, lockID);
      }

      public void End_keepLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_keepLock();
      }

      #endif

      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      public void keepLock(long lockID)
      {
        #if !SILVERLIGHT
        send_keepLock(lockID);
        recv_keepLock();

        #else
        var asyncResult = Begin_keepLock(null, null, lockID);
        End_keepLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_keepLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_keepLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("keepLock", TMessageType.Call, seqid_));
        keepLock_args args = new keepLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_keepLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        keepLock_result result = new keepLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_escalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      {
        return send_escalateLock(callback, state, lockID, timeout);
      }

      public void End_escalateLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_escalateLock();
      }

      #endif

      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      public void escalateLock(long lockID, int timeout)
      {
        #if !SILVERLIGHT
        send_escalateLock(lockID, timeout);
        recv_escalateLock();

        #else
        var asyncResult = Begin_escalateLock(null, null, lockID, timeout);
        End_escalateLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_escalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      #else
      public void send_escalateLock(long lockID, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("escalateLock", TMessageType.Call, seqid_));
        escalateLock_args args = new escalateLock_args();
        args.LockID = lockID;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_escalateLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        escalateLock_result result = new escalateLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_releaseLock(AsyncCallback callback, object state, long lockID)
      {
        return send_releaseLock(callback, state, lockID);
      }

      public void End_releaseLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_releaseLock();
      }

      #endif

      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      public void releaseLock(long lockID)
      {
        #if !SILVERLIGHT
        send_releaseLock(lockID);
        recv_releaseLock();

        #else
        var asyncResult = Begin_releaseLock(null, null, lockID);
        End_releaseLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_releaseLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_releaseLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("releaseLock", TMessageType.Call, seqid_));
        releaseLock_args args = new releaseLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_releaseLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        releaseLock_result result = new releaseLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      {
        return send_query(callback, state, queries);
      }

      public Dictionary<int, ReadResult> End_query(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_query();
      }

      #endif

      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      public Dictionary<int, ReadResult> query(Dictionary<int, Query> queries)
      {
        #if !SILVERLIGHT
        send_query(queries);
        return recv_query();

        #else
        var asyncResult = Begin_query(null, null, queries);
        return End_query(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      #else
      public void send_query(Dictionary<int, Query> queries)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("query", TMessageType.Call, seqid_));
        query_args args = new query_args();
        args.Queries = queries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, ReadResult> recv_query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        query_result result = new query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "query failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      {
        return send_getStatistics(callback, state, columnIDs);
      }

      public List<Statistic> End_getStatistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getStatistics();
      }

      #endif

      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      public List<Statistic> getStatistics(List<int> columnIDs)
      {
        #if !SILVERLIGHT
        send_getStatistics(columnIDs);
        return recv_getStatistics();

        #else
        var asyncResult = Begin_getStatistics(null, null, columnIDs);
        return End_getStatistics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      #else
      public void send_getStatistics(List<int> columnIDs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getStatistics", TMessageType.Call, seqid_));
        getStatistics_args args = new getStatistics_args();
        args.ColumnIDs = columnIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Statistic> recv_getStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getStatistics_result result = new getStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStatistics failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getTopology"] = getTopology_Process;
        processMap_["prepareTopology"] = prepareTopology_Process;
        processMap_["commitTopology"] = commitTopology_Process;
        processMap_["rollbackTopology"] = rollbackTopology_Process;
        processMap_["getTopologyReport"] = getTopologyReport_Process;
        processMap_["getReport"] = getReport_Process;
        processMap_["prepare"] = prepare_Process;
        processMap_["apply"] = apply_Process;
        processMap_["commit"] = commit_Process;
        processMap_["rollback"] = rollback_Process;
        processMap_["flush"] = flush_Process;
        processMap_["doesConflict"] = doesConflict_Process;
        processMap_["update"] = update_Process;
        processMap_["transgrade"] = transgrade_Process;
        processMap_["acquireLock"] = acquireLock_Process;
        processMap_["keepLock"] = keepLock_Process;
        processMap_["escalateLock"] = escalateLock_Process;
        processMap_["releaseLock"] = releaseLock_Process;
        processMap_["query"] = query_Process;
        processMap_["getStatistics"] = getStatistics_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopology_args args = new getTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopology_result result = new getTopology_result();
        result.Success = iface_.getTopology();
        oprot.WriteMessageBegin(new TMessage("getTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void prepareTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        prepareTopology_args args = new prepareTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        prepareTopology_result result = new prepareTopology_result();
        result.Success = iface_.prepareTopology(args.TransactionID, args.Topology);
        oprot.WriteMessageBegin(new TMessage("prepareTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commitTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commitTopology_args args = new commitTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        commitTopology_result result = new commitTopology_result();
        iface_.commitTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("commitTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rollbackTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rollbackTopology_args args = new rollbackTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rollbackTopology_result result = new rollbackTopology_result();
        iface_.rollbackTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("rollbackTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyReport_args args = new getTopologyReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyReport_result result = new getTopologyReport_result();
        result.Success = iface_.getTopologyReport();
        oprot.WriteMessageBegin(new TMessage("getTopologyReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getReport_args args = new getReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getReport_result result = new getReport_result();
        result.Success = iface_.getReport();
        oprot.WriteMessageBegin(new TMessage("getReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void prepare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        prepare_args args = new prepare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        prepare_result result = new prepare_result();
        try {
          result.Success = iface_.prepare(args.TransactionID, args.Writes, args.Reads);
        } catch (NotLatest notLatest) {
          result.NotLatest = notLatest;
        }
        oprot.WriteMessageBegin(new TMessage("prepare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void apply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        apply_args args = new apply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        apply_result result = new apply_result();
        result.Success = iface_.apply(args.TransactionID, args.Writes);
        oprot.WriteMessageBegin(new TMessage("apply", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commit_args args = new commit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        commit_result result = new commit_result();
        iface_.commit(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("commit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rollback_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rollback_args args = new rollback_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rollback_result result = new rollback_result();
        iface_.rollback(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("rollback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_args args = new flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_result result = new flush_result();
        iface_.flush(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void doesConflict_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        doesConflict_args args = new doesConflict_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        doesConflict_result result = new doesConflict_result();
        try {
          result.Success = iface_.doesConflict(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("doesConflict", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        update_args args = new update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        update_result result = new update_result();
        try {
          result.Success = iface_.update(args.TransactionID, args.Writes, args.Reads);
        } catch (Conflict conflict) {
          result.Conflict = conflict;
        }
        oprot.WriteMessageBegin(new TMessage("update", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void transgrade_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        transgrade_args args = new transgrade_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        transgrade_result result = new transgrade_result();
        try {
          result.Success = iface_.transgrade(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("transgrade", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acquireLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acquireLock_args args = new acquireLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acquireLock_result result = new acquireLock_result();
        try {
          result.Success = iface_.acquireLock(args.Name, args.Mode, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        }
        oprot.WriteMessageBegin(new TMessage("acquireLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void keepLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        keepLock_args args = new keepLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        keepLock_result result = new keepLock_result();
        try {
          iface_.keepLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("keepLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void escalateLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        escalateLock_args args = new escalateLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        escalateLock_result result = new escalateLock_result();
        try {
          iface_.escalateLock(args.LockID, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("escalateLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void releaseLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        releaseLock_args args = new releaseLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        releaseLock_result result = new releaseLock_result();
        try {
          iface_.releaseLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("releaseLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        query_args args = new query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        query_result result = new query_result();
        result.Success = iface_.query(args.Queries);
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getStatistics_args args = new getStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getStatistics_result result = new getStatistics_result();
        result.Success = iface_.getStatistics(args.ColumnIDs);
        oprot.WriteMessageBegin(new TMessage("getStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopology_args : TBase
    {

      public getTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopology_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopology_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopology_result : TBase
    {
      private TopologyResult _success;

      public TopologyResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareTopology_args : TBase
    {
      private TransactionID _transactionID;
      private Topology _topology;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Topology Topology
      {
        get
        {
          return _topology;
        }
        set
        {
          __isset.topology = true;
          this._topology = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool topology;
      }

      public prepareTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Topology = new Topology();
                Topology.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Topology != null && __isset.topology) {
          field.Name = "topology";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Topology.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepareTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Topology: ");
        sb.Append(Topology== null ? "<null>" : Topology.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareTopology_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public prepareTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepareTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public commitTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitTopology_result : TBase
    {

      public commitTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rollbackTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public rollbackTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rollbackTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rollbackTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rollbackTopology_result : TBase
    {

      public rollbackTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rollbackTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rollbackTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyReport_args : TBase
    {

      public getTopologyReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyReport_result : TBase
    {
      private TopologyReport _success;

      public TopologyReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTopologyReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReport_args : TBase
    {

      public getReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getReport_result : TBase
    {
      private HostReport _success;

      public HostReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepare_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public prepare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map54 = iprot.ReadMapBegin();
                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)
                  {
                    int _key56;
                    ColumnWrites _val57;
                    _key56 = iprot.ReadI32();
                    _val57 = new ColumnWrites();
                    _val57.Read(iprot);
                    Writes[_key56] = _val57;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map58 = iprot.ReadMapBegin();
                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)
                  {
                    int _key60;
                    Dictionary<Query, Answer> _val61;
                    _key60 = iprot.ReadI32();
                    {
                      _val61 = new Dictionary<Query, Answer>();
                      TMap _map62 = iprot.ReadMapBegin();
                      for( int _i63 = 0; _i63 < _map62.Count; ++_i63)
                      {
                        Query _key64;
                        Answer _val65;
                        _key64 = new Query();
                        _key64.Read(iprot);
                        _val65 = new Answer();
                        _val65.Read(iprot);
                        _val61[_key64] = _val65;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key60] = _val61;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter66 in Writes.Keys)
            {
              oprot.WriteI32(_iter66);
              Writes[_iter66].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter67 in Reads.Keys)
            {
              oprot.WriteI32(_iter67);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter67].Count));
                foreach (Query _iter68 in Reads[_iter67].Keys)
                {
                  _iter68.Write(oprot);
                  Reads[_iter67][_iter68].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepare_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepare_result : TBase
    {
      private long _success;
      private NotLatest _notLatest;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotLatest NotLatest
      {
        get
        {
          return _notLatest;
        }
        set
        {
          __isset.notLatest = true;
          this._notLatest = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool notLatest;
      }

      public prepare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotLatest = new NotLatest();
                NotLatest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.notLatest) {
          if (NotLatest != null) {
            field.Name = "NotLatest";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotLatest.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("prepare_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",NotLatest: ");
        sb.Append(NotLatest== null ? "<null>" : NotLatest.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class apply_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
      }

      public apply_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map69 = iprot.ReadMapBegin();
                  for( int _i70 = 0; _i70 < _map69.Count; ++_i70)
                  {
                    int _key71;
                    ColumnWrites _val72;
                    _key71 = iprot.ReadI32();
                    _val72 = new ColumnWrites();
                    _val72.Read(iprot);
                    Writes[_key71] = _val72;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("apply_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter73 in Writes.Keys)
            {
              oprot.WriteI32(_iter73);
              Writes[_iter73].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("apply_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class apply_result : TBase
    {
      private TransactionID _success;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public apply_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("apply_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("apply_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commit_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public commit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commit_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commit_result : TBase
    {

      public commit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commit_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commit_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rollback_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public rollback_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rollback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rollback_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rollback_result : TBase
    {

      public rollback_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rollback_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rollback_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_result : TBase
    {

      public flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class doesConflict_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public doesConflict_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map74 = iprot.ReadMapBegin();
                  for( int _i75 = 0; _i75 < _map74.Count; ++_i75)
                  {
                    int _key76;
                    Dictionary<Query, Answer> _val77;
                    _key76 = iprot.ReadI32();
                    {
                      _val77 = new Dictionary<Query, Answer>();
                      TMap _map78 = iprot.ReadMapBegin();
                      for( int _i79 = 0; _i79 < _map78.Count; ++_i79)
                      {
                        Query _key80;
                        Answer _val81;
                        _key80 = new Query();
                        _key80.Read(iprot);
                        _val81 = new Answer();
                        _val81.Read(iprot);
                        _val77[_key80] = _val81;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key76] = _val77;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("doesConflict_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter82 in Reads.Keys)
            {
              oprot.WriteI32(_iter82);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter82].Count));
                foreach (Query _iter83 in Reads[_iter82].Keys)
                {
                  _iter83.Write(oprot);
                  Reads[_iter82][_iter83].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("doesConflict_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class doesConflict_result : TBase
    {
      private bool _success;
      private BeyondHistory _beyondHistory;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public doesConflict_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("doesConflict_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("doesConflict_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class update_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public update_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map84 = iprot.ReadMapBegin();
                  for( int _i85 = 0; _i85 < _map84.Count; ++_i85)
                  {
                    int _key86;
                    ColumnWrites _val87;
                    _key86 = iprot.ReadI32();
                    _val87 = new ColumnWrites();
                    _val87.Read(iprot);
                    Writes[_key86] = _val87;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map88 = iprot.ReadMapBegin();
                  for( int _i89 = 0; _i89 < _map88.Count; ++_i89)
                  {
                    int _key90;
                    Dictionary<Query, Answer> _val91;
                    _key90 = iprot.ReadI32();
                    {
                      _val91 = new Dictionary<Query, Answer>();
                      TMap _map92 = iprot.ReadMapBegin();
                      for( int _i93 = 0; _i93 < _map92.Count; ++_i93)
                      {
                        Query _key94;
                        Answer _val95;
                        _key94 = new Query();
                        _key94.Read(iprot);
                        _val95 = new Answer();
                        _val95.Read(iprot);
                        _val91[_key94] = _val95;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key90] = _val91;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("update_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter96 in Writes.Keys)
            {
              oprot.WriteI32(_iter96);
              Writes[_iter96].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter97 in Reads.Keys)
            {
              oprot.WriteI32(_iter97);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter97].Count));
                foreach (Query _iter98 in Reads[_iter97].Keys)
                {
                  _iter98.Write(oprot);
                  Reads[_iter97][_iter98].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("update_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class update_result : TBase
    {
      private TransactionID _success;
      private Conflict _conflict;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Conflict Conflict
      {
        get
        {
          return _conflict;
        }
        set
        {
          __isset.conflict = true;
          this._conflict = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool conflict;
      }

      public update_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Conflict = new Conflict();
                Conflict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("update_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.conflict) {
          if (Conflict != null) {
            field.Name = "Conflict";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Conflict.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("update_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Conflict: ");
        sb.Append(Conflict== null ? "<null>" : Conflict.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class transgrade_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public transgrade_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map99 = iprot.ReadMapBegin();
                  for( int _i100 = 0; _i100 < _map99.Count; ++_i100)
                  {
                    int _key101;
                    Dictionary<Query, Answer> _val102;
                    _key101 = iprot.ReadI32();
                    {
                      _val102 = new Dictionary<Query, Answer>();
                      TMap _map103 = iprot.ReadMapBegin();
                      for( int _i104 = 0; _i104 < _map103.Count; ++_i104)
                      {
                        Query _key105;
                        Answer _val106;
                        _key105 = new Query();
                        _key105.Read(iprot);
                        _val106 = new Answer();
                        _val106.Read(iprot);
                        _val102[_key105] = _val106;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key101] = _val102;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transgrade_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter107 in Reads.Keys)
            {
              oprot.WriteI32(_iter107);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter107].Count));
                foreach (Query _iter108 in Reads[_iter107].Keys)
                {
                  _iter108.Write(oprot);
                  Reads[_iter107][_iter108].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transgrade_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class transgrade_result : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _success;
      private BeyondHistory _beyondHistory;

      public Dictionary<int, Dictionary<Query, Answer>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public transgrade_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map109 = iprot.ReadMapBegin();
                  for( int _i110 = 0; _i110 < _map109.Count; ++_i110)
                  {
                    int _key111;
                    Dictionary<Query, Answer> _val112;
                    _key111 = iprot.ReadI32();
                    {
                      _val112 = new Dictionary<Query, Answer>();
                      TMap _map113 = iprot.ReadMapBegin();
                      for( int _i114 = 0; _i114 < _map113.Count; ++_i114)
                      {
                        Query _key115;
                        Answer _val116;
                        _key115 = new Query();
                        _key115.Read(iprot);
                        _val116 = new Answer();
                        _val116.Read(iprot);
                        _val112[_key115] = _val116;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key111] = _val112;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("transgrade_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
              foreach (int _iter117 in Success.Keys)
              {
                oprot.WriteI32(_iter117);
                {
                  oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Success[_iter117].Count));
                  foreach (Query _iter118 in Success[_iter117].Keys)
                  {
                    _iter118.Write(oprot);
                    Success[_iter117][_iter118].Write(oprot);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("transgrade_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireLock_args : TBase
    {
      private string _name;
      private LockMode _mode;
      private int _timeout;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="LockMode"/>
      /// </summary>
      public LockMode Mode
      {
        get
        {
          return _mode;
        }
        set
        {
          __isset.mode = true;
          this._mode = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool mode;
        public bool timeout;
      }

      public acquireLock_args() {
        this._timeout = 1000;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = (LockMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireLock_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Mode: ");
        sb.Append(Mode);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireLock_result : TBase
    {
      private long _success;
      private LockTimedOut _timeout;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool timeout;
      }

      public acquireLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class keepLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public keepLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("keepLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("keepLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class keepLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
      }

      public keepLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("keepLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("keepLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class escalateLock_args : TBase
    {
      private long _lockID;
      private int _timeout;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
        public bool timeout;
      }

      public escalateLock_args() {
        this._timeout = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("escalateLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("escalateLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class escalateLock_result : TBase
    {
      private LockTimedOut _timeout;
      private LockExpired _expired;

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeout;
        public bool expired;
      }

      public escalateLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("escalateLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("escalateLock_result(");
        sb.Append("Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(",Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public releaseLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
      }

      public releaseLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_args : TBase
    {
      private Dictionary<int, Query> _queries;

      public Dictionary<int, Query> Queries
      {
        get
        {
          return _queries;
        }
        set
        {
          __isset.queries = true;
          this._queries = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool queries;
      }

      public query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Queries = new Dictionary<int, Query>();
                  TMap _map119 = iprot.ReadMapBegin();
                  for( int _i120 = 0; _i120 < _map119.Count; ++_i120)
                  {
                    int _key121;
                    Query _val122;
                    _key121 = iprot.ReadI32();
                    _val122 = new Query();
                    _val122.Read(iprot);
                    Queries[_key121] = _val122;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Queries != null && __isset.queries) {
          field.Name = "queries";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Queries.Count));
            foreach (int _iter123 in Queries.Keys)
            {
              oprot.WriteI32(_iter123);
              Queries[_iter123].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_args(");
        sb.Append("Queries: ");
        sb.Append(Queries);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_result : TBase
    {
      private Dictionary<int, ReadResult> _success;

      public Dictionary<int, ReadResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, ReadResult>();
                  TMap _map124 = iprot.ReadMapBegin();
                  for( int _i125 = 0; _i125 < _map124.Count; ++_i125)
                  {
                    int _key126;
                    ReadResult _val127;
                    _key126 = iprot.ReadI32();
                    _val127 = new ReadResult();
                    _val127.Read(iprot);
                    Success[_key126] = _val127;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Success.Count));
              foreach (int _iter128 in Success.Keys)
              {
                oprot.WriteI32(_iter128);
                Success[_iter128].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStatistics_args : TBase
    {
      private List<int> _columnIDs;

      public List<int> ColumnIDs
      {
        get
        {
          return _columnIDs;
        }
        set
        {
          __isset.columnIDs = true;
          this._columnIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool columnIDs;
      }

      public getStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ColumnIDs = new List<int>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    int _elem131 = 0;
                    _elem131 = iprot.ReadI32();
                    ColumnIDs.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ColumnIDs != null && __isset.columnIDs) {
          field.Name = "columnIDs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ColumnIDs.Count));
            foreach (int _iter132 in ColumnIDs)
            {
              oprot.WriteI32(_iter132);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getStatistics_args(");
        sb.Append("ColumnIDs: ");
        sb.Append(ColumnIDs);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getStatistics_result : TBase
    {
      private List<Statistic> _success;

      public List<Statistic> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Statistic>();
                  TList _list133 = iprot.ReadListBegin();
                  for( int _i134 = 0; _i134 < _list133.Count; ++_i134)
                  {
                    Statistic _elem135 = new Statistic();
                    _elem135 = new Statistic();
                    _elem135.Read(iprot);
                    Success.Add(_elem135);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Statistic _iter136 in Success)
              {
                _iter136.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
