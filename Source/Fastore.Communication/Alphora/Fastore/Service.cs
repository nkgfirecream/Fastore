/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Alphora.Fastore
{
  public partial class Service {
    public interface Iface {
      /// <summary>
      /// Returns the target topology as this host presently understands it.
      /// </summary>
      TopologyResult GetTopology();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTopology(AsyncCallback callback, object state, );
      TopologyResult End_GetTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the topology and returns the new topology revision - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="topology"></param>
      long PrepareTopology(TransactionID transactionID, Topology topology);
      #if SILVERLIGHT
      IAsyncResult Begin_PrepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology);
      long End_PrepareTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was successful, the change should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      void CommitTopology(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_CommitTopology(AsyncCallback callback, object state, TransactionID transactionID);
      void End_CommitTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was unsuccessful, the change should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      void RollbackTopology(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_RollbackTopology(AsyncCallback callback, object state, TransactionID transactionID);
      void End_RollbackTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of all hosts as this host understands it.
      /// </summary>
      TopologyReport GetTopologyReport();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTopologyReport(AsyncCallback callback, object state, );
      TopologyReport End_GetTopologyReport(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the current status of this host.
      /// </summary>
      HostReport GetReport();
      #if SILVERLIGHT
      IAsyncResult Begin_GetReport(AsyncCallback callback, object state, );
      HostReport End_GetReport(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      long Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_Prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      long End_Prepare(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      TransactionID Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      #if SILVERLIGHT
      IAsyncResult Begin_Apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes);
      TransactionID End_Apply(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was successful, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      void Commit(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_Commit(AsyncCallback callback, object state, TransactionID transactionID);
      void End_Commit(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Informs that the prepare was unsuccessful, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      void Rollback(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_Rollback(AsyncCallback callback, object state, TransactionID transactionID);
      void End_Rollback(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      void Flush(TransactionID transactionID);
      #if SILVERLIGHT
      IAsyncResult Begin_Flush(AsyncCallback callback, object state, TransactionID transactionID);
      void End_Flush(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      bool DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_DoesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      bool End_DoesConflict(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      TransactionID Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      #if SILVERLIGHT
      IAsyncResult Begin_Update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads);
      TransactionID End_Update(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      Dictionary<int, Dictionary<Query, Answer>> Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      #if SILVERLIGHT
      IAsyncResult Begin_Transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target);
      Dictionary<int, Dictionary<Query, Answer>> End_Transgrade(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      long AcquireLock(string name, LockMode mode, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_AcquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout);
      long End_AcquireLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      void KeepLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_KeepLock(AsyncCallback callback, object state, long lockID);
      void End_KeepLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      void EscalateLock(long lockID, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_EscalateLock(AsyncCallback callback, object state, long lockID, int timeout);
      void End_EscalateLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      void ReleaseLock(long lockID);
      #if SILVERLIGHT
      IAsyncResult Begin_ReleaseLock(AsyncCallback callback, object state, long lockID);
      void End_ReleaseLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      ReadResults Query(Dictionary<int, Query> queries);
      #if SILVERLIGHT
      IAsyncResult Begin_Query(AsyncCallback callback, object state, Dictionary<int, Query> queries);
      ReadResults End_Query(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      List<Statistic> GetStatistics(List<int> columnIDs);
      #if SILVERLIGHT
      IAsyncResult Begin_GetStatistics(AsyncCallback callback, object state, List<int> columnIDs);
      List<Statistic> End_GetStatistics(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTopology(AsyncCallback callback, object state, )
      {
        return send_GetTopology(callback, state);
      }

      public TopologyResult End_GetTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTopology();
      }

      #endif

      /// <summary>
      /// Returns the target topology as this host presently understands it.
      /// </summary>
      public TopologyResult GetTopology()
      {
        #if !SILVERLIGHT
        send_GetTopology();
        return recv_GetTopology();

        #else
        var asyncResult = Begin_GetTopology(null, null, );
        return End_GetTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTopology(AsyncCallback callback, object state, )
      #else
      public void send_GetTopology()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTopology", TMessageType.Call, seqid_));
        GetTopology_args args = new GetTopology_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyResult recv_GetTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTopology_result result = new GetTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PrepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology)
      {
        return send_PrepareTopology(callback, state, transactionID, topology);
      }

      public long End_PrepareTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PrepareTopology();
      }

      #endif

      /// <summary>
      /// Updates the topology and returns the new topology revision - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="topology"></param>
      public long PrepareTopology(TransactionID transactionID, Topology topology)
      {
        #if !SILVERLIGHT
        send_PrepareTopology(transactionID, topology);
        return recv_PrepareTopology();

        #else
        var asyncResult = Begin_PrepareTopology(null, null, transactionID, topology);
        return End_PrepareTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PrepareTopology(AsyncCallback callback, object state, TransactionID transactionID, Topology topology)
      #else
      public void send_PrepareTopology(TransactionID transactionID, Topology topology)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PrepareTopology", TMessageType.Call, seqid_));
        PrepareTopology_args args = new PrepareTopology_args();
        args.TransactionID = transactionID;
        args.Topology = topology;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_PrepareTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PrepareTopology_result result = new PrepareTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PrepareTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CommitTopology(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_CommitTopology(callback, state, transactionID);
      }

      public void End_CommitTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CommitTopology();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was successful, the change should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      public void CommitTopology(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_CommitTopology(transactionID);
        recv_CommitTopology();

        #else
        var asyncResult = Begin_CommitTopology(null, null, transactionID);
        End_CommitTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CommitTopology(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_CommitTopology(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CommitTopology", TMessageType.Call, seqid_));
        CommitTopology_args args = new CommitTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CommitTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CommitTopology_result result = new CommitTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RollbackTopology(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_RollbackTopology(callback, state, transactionID);
      }

      public void End_RollbackTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RollbackTopology();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was unsuccessful, the change should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      public void RollbackTopology(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_RollbackTopology(transactionID);
        recv_RollbackTopology();

        #else
        var asyncResult = Begin_RollbackTopology(null, null, transactionID);
        End_RollbackTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RollbackTopology(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_RollbackTopology(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RollbackTopology", TMessageType.Call, seqid_));
        RollbackTopology_args args = new RollbackTopology_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RollbackTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RollbackTopology_result result = new RollbackTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTopologyReport(AsyncCallback callback, object state, )
      {
        return send_GetTopologyReport(callback, state);
      }

      public TopologyReport End_GetTopologyReport(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTopologyReport();
      }

      #endif

      /// <summary>
      /// Returns the current status of all hosts as this host understands it.
      /// </summary>
      public TopologyReport GetTopologyReport()
      {
        #if !SILVERLIGHT
        send_GetTopologyReport();
        return recv_GetTopologyReport();

        #else
        var asyncResult = Begin_GetTopologyReport(null, null, );
        return End_GetTopologyReport(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTopologyReport(AsyncCallback callback, object state, )
      #else
      public void send_GetTopologyReport()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTopologyReport", TMessageType.Call, seqid_));
        GetTopologyReport_args args = new GetTopologyReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyReport recv_GetTopologyReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTopologyReport_result result = new GetTopologyReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTopologyReport failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetReport(AsyncCallback callback, object state, )
      {
        return send_GetReport(callback, state);
      }

      public HostReport End_GetReport(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetReport();
      }

      #endif

      /// <summary>
      /// Returns the current status of this host.
      /// </summary>
      public HostReport GetReport()
      {
        #if !SILVERLIGHT
        send_GetReport();
        return recv_GetReport();

        #else
        var asyncResult = Begin_GetReport(null, null, );
        return End_GetReport(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetReport(AsyncCallback callback, object state, )
      #else
      public void send_GetReport()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetReport", TMessageType.Call, seqid_));
        GetReport_args args = new GetReport_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostReport recv_GetReport()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReport_result result = new GetReport_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReport failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_Prepare(callback, state, transactionID, writes, reads);
      }

      public long End_Prepare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Prepare();
      }

      #endif

      /// <summary>
      /// Validates that the transaction ID is updated to the latest and then Applies all changes - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public long Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_Prepare(transactionID, writes, reads);
        return recv_Prepare();

        #else
        var asyncResult = Begin_Prepare(null, null, transactionID, writes, reads);
        return End_Prepare(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Prepare(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_Prepare(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Prepare", TMessageType.Call, seqid_));
        Prepare_args args = new Prepare_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_Prepare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Prepare_result result = new Prepare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.notLatest) {
          throw result.NotLatest;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Prepare failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        return send_Apply(callback, state, transactionID, writes);
      }

      public TransactionID End_Apply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Apply();
      }

      #endif

      /// <summary>
      /// Applies the given writes as of the latest revision (regardless of whether the transaction ID is out of date),
      /// returns an updated Transaction ID - GRID COORDINATED.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      public TransactionID Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      {
        #if !SILVERLIGHT
        send_Apply(transactionID, writes);
        return recv_Apply();

        #else
        var asyncResult = Begin_Apply(null, null, transactionID, writes);
        return End_Apply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Apply(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #else
      public void send_Apply(TransactionID transactionID, Dictionary<int, ColumnWrites> writes)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Apply", TMessageType.Call, seqid_));
        Apply_args args = new Apply_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_Apply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Apply_result result = new Apply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Apply failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Commit(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_Commit(callback, state, transactionID);
      }

      public void End_Commit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Commit();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was successful, the changes should be committed.
      /// </summary>
      /// <param name="transactionID"></param>
      public void Commit(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_Commit(transactionID);
        recv_Commit();

        #else
        var asyncResult = Begin_Commit(null, null, transactionID);
        End_Commit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Commit(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_Commit(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Commit", TMessageType.Call, seqid_));
        Commit_args args = new Commit_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Commit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Commit_result result = new Commit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Rollback(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_Rollback(callback, state, transactionID);
      }

      public void End_Rollback(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Rollback();
      }

      #endif

      /// <summary>
      /// Informs that the prepare was unsuccessful, the changes should be rolled back.
      /// </summary>
      /// <param name="transactionID"></param>
      public void Rollback(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_Rollback(transactionID);
        recv_Rollback();

        #else
        var asyncResult = Begin_Rollback(null, null, transactionID);
        End_Rollback(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Rollback(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_Rollback(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Rollback", TMessageType.Call, seqid_));
        Rollback_args args = new Rollback_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Rollback()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Rollback_result result = new Rollback_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Flush(AsyncCallback callback, object state, TransactionID transactionID)
      {
        return send_Flush(callback, state, transactionID);
      }

      public void End_Flush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Flush();
      }

      #endif

      /// <summary>
      /// Waits for the given transaction to be flushed to disk
      /// </summary>
      /// <param name="transactionID"></param>
      public void Flush(TransactionID transactionID)
      {
        #if !SILVERLIGHT
        send_Flush(transactionID);
        recv_Flush();

        #else
        var asyncResult = Begin_Flush(null, null, transactionID);
        End_Flush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Flush(AsyncCallback callback, object state, TransactionID transactionID)
      #else
      public void send_Flush(TransactionID transactionID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Flush", TMessageType.Call, seqid_));
        Flush_args args = new Flush_args();
        args.TransactionID = transactionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Flush_result result = new Flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DoesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_DoesConflict(callback, state, reads, source, target);
      }

      public bool End_DoesConflict(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoesConflict();
      }

      #endif

      /// <summary>
      /// Determines whether the given set of reads conflict with any intervening revisions.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public bool DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_DoesConflict(reads, source, target);
        return recv_DoesConflict();

        #else
        var asyncResult = Begin_DoesConflict(null, null, reads, source, target);
        return End_DoesConflict(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoesConflict(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_DoesConflict(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DoesConflict", TMessageType.Call, seqid_));
        DoesConflict_args args = new DoesConflict_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DoesConflict()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoesConflict_result result = new DoesConflict_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoesConflict failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        return send_Update(callback, state, transactionID, writes, reads);
      }

      public TransactionID End_Update(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Update();
      }

      #endif

      /// <summary>
      /// Updates the given transaction to the latest by validating reads and writes for conflicts, and returns a new TransactionID.
      /// </summary>
      /// <param name="transactionID"></param>
      /// <param name="writes"></param>
      /// <param name="reads"></param>
      public TransactionID Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      {
        #if !SILVERLIGHT
        send_Update(transactionID, writes, reads);
        return recv_Update();

        #else
        var asyncResult = Begin_Update(null, null, transactionID, writes, reads);
        return End_Update(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Update(AsyncCallback callback, object state, TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #else
      public void send_Update(TransactionID transactionID, Dictionary<int, ColumnWrites> writes, Dictionary<int, Dictionary<Query, Answer>> reads)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Update", TMessageType.Call, seqid_));
        Update_args args = new Update_args();
        args.TransactionID = transactionID;
        args.Writes = writes;
        args.Reads = reads;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionID recv_Update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Update_result result = new Update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.conflict) {
          throw result.Conflict;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Update failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        return send_Transgrade(callback, state, reads, source, target);
      }

      public Dictionary<int, Dictionary<Query, Answer>> End_Transgrade(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Transgrade();
      }

      #endif

      /// <summary>
      /// Upgrades or downgrades the given reads to match the data as of a given revision.
      /// </summary>
      /// <param name="reads"></param>
      /// <param name="source"></param>
      /// <param name="target"></param>
      public Dictionary<int, Dictionary<Query, Answer>> Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      {
        #if !SILVERLIGHT
        send_Transgrade(reads, source, target);
        return recv_Transgrade();

        #else
        var asyncResult = Begin_Transgrade(null, null, reads, source, target);
        return End_Transgrade(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Transgrade(AsyncCallback callback, object state, Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #else
      public void send_Transgrade(Dictionary<int, Dictionary<Query, Answer>> reads, long source, long target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Transgrade", TMessageType.Call, seqid_));
        Transgrade_args args = new Transgrade_args();
        args.Reads = reads;
        args.Source = source;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, Dictionary<Query, Answer>> recv_Transgrade()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Transgrade_result result = new Transgrade_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.beyondHistory) {
          throw result.BeyondHistory;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Transgrade failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AcquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      {
        return send_AcquireLock(callback, state, name, mode, timeout);
      }

      public long End_AcquireLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AcquireLock();
      }

      #endif

      /// <summary>
      /// Acquires a given named lock given a mode and timeout.
      /// </summary>
      /// <param name="name"></param>
      /// <param name="mode"></param>
      /// <param name="timeout"></param>
      public long AcquireLock(string name, LockMode mode, int timeout)
      {
        #if !SILVERLIGHT
        send_AcquireLock(name, mode, timeout);
        return recv_AcquireLock();

        #else
        var asyncResult = Begin_AcquireLock(null, null, name, mode, timeout);
        return End_AcquireLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AcquireLock(AsyncCallback callback, object state, string name, LockMode mode, int timeout)
      #else
      public void send_AcquireLock(string name, LockMode mode, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AcquireLock", TMessageType.Call, seqid_));
        AcquireLock_args args = new AcquireLock_args();
        args.Name = name;
        args.Mode = mode;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_AcquireLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AcquireLock_result result = new AcquireLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AcquireLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_KeepLock(AsyncCallback callback, object state, long lockID)
      {
        return send_KeepLock(callback, state, lockID);
      }

      public void End_KeepLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_KeepLock();
      }

      #endif

      /// <summary>
      /// Keeps a given lock alive - locks automatically expire if not renewed.
      /// </summary>
      /// <param name="lockID"></param>
      public void KeepLock(long lockID)
      {
        #if !SILVERLIGHT
        send_KeepLock(lockID);
        recv_KeepLock();

        #else
        var asyncResult = Begin_KeepLock(null, null, lockID);
        End_KeepLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_KeepLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_KeepLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("KeepLock", TMessageType.Call, seqid_));
        KeepLock_args args = new KeepLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_KeepLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        KeepLock_result result = new KeepLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EscalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      {
        return send_EscalateLock(callback, state, lockID, timeout);
      }

      public void End_EscalateLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_EscalateLock();
      }

      #endif

      /// <summary>
      /// Attempts to escalate the given lock to write mode
      /// </summary>
      /// <param name="lockID"></param>
      /// <param name="timeout"></param>
      public void EscalateLock(long lockID, int timeout)
      {
        #if !SILVERLIGHT
        send_EscalateLock(lockID, timeout);
        recv_EscalateLock();

        #else
        var asyncResult = Begin_EscalateLock(null, null, lockID, timeout);
        End_EscalateLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EscalateLock(AsyncCallback callback, object state, long lockID, int timeout)
      #else
      public void send_EscalateLock(long lockID, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EscalateLock", TMessageType.Call, seqid_));
        EscalateLock_args args = new EscalateLock_args();
        args.LockID = lockID;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_EscalateLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EscalateLock_result result = new EscalateLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.timeout) {
          throw result.Timeout;
        }
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReleaseLock(AsyncCallback callback, object state, long lockID)
      {
        return send_ReleaseLock(callback, state, lockID);
      }

      public void End_ReleaseLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ReleaseLock();
      }

      #endif

      /// <summary>
      /// Releases the given lock
      /// </summary>
      /// <param name="lockID"></param>
      public void ReleaseLock(long lockID)
      {
        #if !SILVERLIGHT
        send_ReleaseLock(lockID);
        recv_ReleaseLock();

        #else
        var asyncResult = Begin_ReleaseLock(null, null, lockID);
        End_ReleaseLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReleaseLock(AsyncCallback callback, object state, long lockID)
      #else
      public void send_ReleaseLock(long lockID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReleaseLock", TMessageType.Call, seqid_));
        ReleaseLock_args args = new ReleaseLock_args();
        args.LockID = lockID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ReleaseLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReleaseLock_result result = new ReleaseLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.expired) {
          throw result.Expired;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      {
        return send_Query(callback, state, queries);
      }

      public ReadResults End_Query(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Query();
      }

      #endif

      /// <summary>
      /// Retrieves data and the latest revision number corresponding to a given list of queries.
      /// </summary>
      /// <param name="queries"></param>
      public ReadResults Query(Dictionary<int, Query> queries)
      {
        #if !SILVERLIGHT
        send_Query(queries);
        return recv_Query();

        #else
        var asyncResult = Begin_Query(null, null, queries);
        return End_Query(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Query(AsyncCallback callback, object state, Dictionary<int, Query> queries)
      #else
      public void send_Query(Dictionary<int, Query> queries)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Query", TMessageType.Call, seqid_));
        Query_args args = new Query_args();
        args.Queries = queries;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ReadResults recv_Query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Query_result result = new Query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Query failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      {
        return send_GetStatistics(callback, state, columnIDs);
      }

      public List<Statistic> End_GetStatistics(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetStatistics();
      }

      #endif

      /// <summary>
      /// Retrieves statistics for a given list of columns based on the latest committed revision.
      /// </summary>
      /// <param name="columnIDs"></param>
      public List<Statistic> GetStatistics(List<int> columnIDs)
      {
        #if !SILVERLIGHT
        send_GetStatistics(columnIDs);
        return recv_GetStatistics();

        #else
        var asyncResult = Begin_GetStatistics(null, null, columnIDs);
        return End_GetStatistics(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetStatistics(AsyncCallback callback, object state, List<int> columnIDs)
      #else
      public void send_GetStatistics(List<int> columnIDs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatistics", TMessageType.Call, seqid_));
        GetStatistics_args args = new GetStatistics_args();
        args.ColumnIDs = columnIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Statistic> recv_GetStatistics()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStatistics_result result = new GetStatistics_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatistics failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetTopology"] = GetTopology_Process;
        processMap_["PrepareTopology"] = PrepareTopology_Process;
        processMap_["CommitTopology"] = CommitTopology_Process;
        processMap_["RollbackTopology"] = RollbackTopology_Process;
        processMap_["GetTopologyReport"] = GetTopologyReport_Process;
        processMap_["GetReport"] = GetReport_Process;
        processMap_["Prepare"] = Prepare_Process;
        processMap_["Apply"] = Apply_Process;
        processMap_["Commit"] = Commit_Process;
        processMap_["Rollback"] = Rollback_Process;
        processMap_["Flush"] = Flush_Process;
        processMap_["DoesConflict"] = DoesConflict_Process;
        processMap_["Update"] = Update_Process;
        processMap_["Transgrade"] = Transgrade_Process;
        processMap_["AcquireLock"] = AcquireLock_Process;
        processMap_["KeepLock"] = KeepLock_Process;
        processMap_["EscalateLock"] = EscalateLock_Process;
        processMap_["ReleaseLock"] = ReleaseLock_Process;
        processMap_["Query"] = Query_Process;
        processMap_["GetStatistics"] = GetStatistics_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTopology_args args = new GetTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTopology_result result = new GetTopology_result();
        result.Success = iface_.GetTopology();
        oprot.WriteMessageBegin(new TMessage("GetTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PrepareTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PrepareTopology_args args = new PrepareTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PrepareTopology_result result = new PrepareTopology_result();
        result.Success = iface_.PrepareTopology(args.TransactionID, args.Topology);
        oprot.WriteMessageBegin(new TMessage("PrepareTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CommitTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CommitTopology_args args = new CommitTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CommitTopology_result result = new CommitTopology_result();
        iface_.CommitTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("CommitTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RollbackTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RollbackTopology_args args = new RollbackTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RollbackTopology_result result = new RollbackTopology_result();
        iface_.RollbackTopology(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("RollbackTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTopologyReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTopologyReport_args args = new GetTopologyReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTopologyReport_result result = new GetTopologyReport_result();
        result.Success = iface_.GetTopologyReport();
        oprot.WriteMessageBegin(new TMessage("GetTopologyReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetReport_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReport_args args = new GetReport_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReport_result result = new GetReport_result();
        result.Success = iface_.GetReport();
        oprot.WriteMessageBegin(new TMessage("GetReport", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Prepare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Prepare_args args = new Prepare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Prepare_result result = new Prepare_result();
        try {
          result.Success = iface_.Prepare(args.TransactionID, args.Writes, args.Reads);
        } catch (NotLatest notLatest) {
          result.NotLatest = notLatest;
        }
        oprot.WriteMessageBegin(new TMessage("Prepare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Apply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Apply_args args = new Apply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Apply_result result = new Apply_result();
        result.Success = iface_.Apply(args.TransactionID, args.Writes);
        oprot.WriteMessageBegin(new TMessage("Apply", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Commit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Commit_args args = new Commit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Commit_result result = new Commit_result();
        iface_.Commit(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Commit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Rollback_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Rollback_args args = new Rollback_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Rollback_result result = new Rollback_result();
        iface_.Rollback(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Rollback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Flush_args args = new Flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Flush_result result = new Flush_result();
        iface_.Flush(args.TransactionID);
        oprot.WriteMessageBegin(new TMessage("Flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoesConflict_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoesConflict_args args = new DoesConflict_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoesConflict_result result = new DoesConflict_result();
        try {
          result.Success = iface_.DoesConflict(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("DoesConflict", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Update_args args = new Update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Update_result result = new Update_result();
        try {
          result.Success = iface_.Update(args.TransactionID, args.Writes, args.Reads);
        } catch (Conflict conflict) {
          result.Conflict = conflict;
        }
        oprot.WriteMessageBegin(new TMessage("Update", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Transgrade_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Transgrade_args args = new Transgrade_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Transgrade_result result = new Transgrade_result();
        try {
          result.Success = iface_.Transgrade(args.Reads, args.Source, args.Target);
        } catch (BeyondHistory beyondHistory) {
          result.BeyondHistory = beyondHistory;
        }
        oprot.WriteMessageBegin(new TMessage("Transgrade", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AcquireLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AcquireLock_args args = new AcquireLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AcquireLock_result result = new AcquireLock_result();
        try {
          result.Success = iface_.AcquireLock(args.Name, args.Mode, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        }
        oprot.WriteMessageBegin(new TMessage("AcquireLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void KeepLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        KeepLock_args args = new KeepLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        KeepLock_result result = new KeepLock_result();
        try {
          iface_.KeepLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("KeepLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EscalateLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EscalateLock_args args = new EscalateLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EscalateLock_result result = new EscalateLock_result();
        try {
          iface_.EscalateLock(args.LockID, args.Timeout);
        } catch (LockTimedOut timeout) {
          result.Timeout = timeout;
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("EscalateLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReleaseLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReleaseLock_args args = new ReleaseLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReleaseLock_result result = new ReleaseLock_result();
        try {
          iface_.ReleaseLock(args.LockID);
        } catch (LockExpired expired) {
          result.Expired = expired;
        }
        oprot.WriteMessageBegin(new TMessage("ReleaseLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Query_args args = new Query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Query_result result = new Query_result();
        result.Success = iface_.Query(args.Queries);
        oprot.WriteMessageBegin(new TMessage("Query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStatistics_args args = new GetStatistics_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStatistics_result result = new GetStatistics_result();
        result.Success = iface_.GetStatistics(args.ColumnIDs);
        oprot.WriteMessageBegin(new TMessage("GetStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTopology_args : TBase
    {

      public GetTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopology_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopology_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTopology_result : TBase
    {
      private TopologyResult _success;

      public TopologyResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PrepareTopology_args : TBase
    {
      private TransactionID _transactionID;
      private Topology _topology;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Topology Topology
      {
        get
        {
          return _topology;
        }
        set
        {
          __isset.topology = true;
          this._topology = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool topology;
      }

      public PrepareTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Topology = new Topology();
                Topology.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PrepareTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Topology != null && __isset.topology) {
          field.Name = "topology";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Topology.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PrepareTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Topology: ");
        sb.Append(Topology== null ? "<null>" : Topology.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PrepareTopology_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PrepareTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PrepareTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PrepareTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CommitTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public CommitTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CommitTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CommitTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CommitTopology_result : TBase
    {

      public CommitTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CommitTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CommitTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RollbackTopology_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public RollbackTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RollbackTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RollbackTopology_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RollbackTopology_result : TBase
    {

      public RollbackTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RollbackTopology_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RollbackTopology_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTopologyReport_args : TBase
    {

      public GetTopologyReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopologyReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopologyReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTopologyReport_result : TBase
    {
      private TopologyReport _success;

      public TopologyReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTopologyReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTopologyReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTopologyReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReport_args : TBase
    {

      public GetReport_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReport_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReport_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReport_result : TBase
    {
      private HostReport _success;

      public HostReport Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetReport_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostReport();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReport_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReport_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Prepare_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public Prepare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map59 = iprot.ReadMapBegin();
                  for( int _i60 = 0; _i60 < _map59.Count; ++_i60)
                  {
                    int _key61;
                    ColumnWrites _val62;
                    _key61 = iprot.ReadI32();
                    _val62 = new ColumnWrites();
                    _val62.Read(iprot);
                    Writes[_key61] = _val62;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map63 = iprot.ReadMapBegin();
                  for( int _i64 = 0; _i64 < _map63.Count; ++_i64)
                  {
                    int _key65;
                    Dictionary<Query, Answer> _val66;
                    _key65 = iprot.ReadI32();
                    {
                      _val66 = new Dictionary<Query, Answer>();
                      TMap _map67 = iprot.ReadMapBegin();
                      for( int _i68 = 0; _i68 < _map67.Count; ++_i68)
                      {
                        Query _key69;
                        Answer _val70;
                        _key69 = new Query();
                        _key69.Read(iprot);
                        _val70 = new Answer();
                        _val70.Read(iprot);
                        _val66[_key69] = _val70;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key65] = _val66;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Prepare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter71 in Writes.Keys)
            {
              oprot.WriteI32(_iter71);
              Writes[_iter71].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter72 in Reads.Keys)
            {
              oprot.WriteI32(_iter72);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter72].Count));
                foreach (Query _iter73 in Reads[_iter72].Keys)
                {
                  _iter73.Write(oprot);
                  Reads[_iter72][_iter73].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Prepare_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Prepare_result : TBase
    {
      private long _success;
      private NotLatest _notLatest;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotLatest NotLatest
      {
        get
        {
          return _notLatest;
        }
        set
        {
          __isset.notLatest = true;
          this._notLatest = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool notLatest;
      }

      public Prepare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                NotLatest = new NotLatest();
                NotLatest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Prepare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.notLatest) {
          if (NotLatest != null) {
            field.Name = "NotLatest";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NotLatest.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Prepare_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",NotLatest: ");
        sb.Append(NotLatest== null ? "<null>" : NotLatest.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Apply_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
      }

      public Apply_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map74 = iprot.ReadMapBegin();
                  for( int _i75 = 0; _i75 < _map74.Count; ++_i75)
                  {
                    int _key76;
                    ColumnWrites _val77;
                    _key76 = iprot.ReadI32();
                    _val77 = new ColumnWrites();
                    _val77.Read(iprot);
                    Writes[_key76] = _val77;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Apply_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter78 in Writes.Keys)
            {
              oprot.WriteI32(_iter78);
              Writes[_iter78].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Apply_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Apply_result : TBase
    {
      private TransactionID _success;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Apply_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Apply_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Apply_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Commit_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public Commit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Commit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Commit_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Commit_result : TBase
    {

      public Commit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Commit_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Commit_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Rollback_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public Rollback_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Rollback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Rollback_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Rollback_result : TBase
    {

      public Rollback_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Rollback_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Rollback_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Flush_args : TBase
    {
      private TransactionID _transactionID;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
      }

      public Flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Flush_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Flush_result : TBase
    {

      public Flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Flush_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Flush_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoesConflict_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public DoesConflict_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map79 = iprot.ReadMapBegin();
                  for( int _i80 = 0; _i80 < _map79.Count; ++_i80)
                  {
                    int _key81;
                    Dictionary<Query, Answer> _val82;
                    _key81 = iprot.ReadI32();
                    {
                      _val82 = new Dictionary<Query, Answer>();
                      TMap _map83 = iprot.ReadMapBegin();
                      for( int _i84 = 0; _i84 < _map83.Count; ++_i84)
                      {
                        Query _key85;
                        Answer _val86;
                        _key85 = new Query();
                        _key85.Read(iprot);
                        _val86 = new Answer();
                        _val86.Read(iprot);
                        _val82[_key85] = _val86;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key81] = _val82;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoesConflict_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter87 in Reads.Keys)
            {
              oprot.WriteI32(_iter87);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter87].Count));
                foreach (Query _iter88 in Reads[_iter87].Keys)
                {
                  _iter88.Write(oprot);
                  Reads[_iter87][_iter88].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DoesConflict_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoesConflict_result : TBase
    {
      private bool _success;
      private BeyondHistory _beyondHistory;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public DoesConflict_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DoesConflict_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DoesConflict_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Update_args : TBase
    {
      private TransactionID _transactionID;
      private Dictionary<int, ColumnWrites> _writes;
      private Dictionary<int, Dictionary<Query, Answer>> _reads;

      public TransactionID TransactionID
      {
        get
        {
          return _transactionID;
        }
        set
        {
          __isset.transactionID = true;
          this._transactionID = value;
        }
      }

      public Dictionary<int, ColumnWrites> Writes
      {
        get
        {
          return _writes;
        }
        set
        {
          __isset.writes = true;
          this._writes = value;
        }
      }

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionID;
        public bool writes;
        public bool reads;
      }

      public Update_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TransactionID = new TransactionID();
                TransactionID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Writes = new Dictionary<int, ColumnWrites>();
                  TMap _map89 = iprot.ReadMapBegin();
                  for( int _i90 = 0; _i90 < _map89.Count; ++_i90)
                  {
                    int _key91;
                    ColumnWrites _val92;
                    _key91 = iprot.ReadI32();
                    _val92 = new ColumnWrites();
                    _val92.Read(iprot);
                    Writes[_key91] = _val92;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map93 = iprot.ReadMapBegin();
                  for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                  {
                    int _key95;
                    Dictionary<Query, Answer> _val96;
                    _key95 = iprot.ReadI32();
                    {
                      _val96 = new Dictionary<Query, Answer>();
                      TMap _map97 = iprot.ReadMapBegin();
                      for( int _i98 = 0; _i98 < _map97.Count; ++_i98)
                      {
                        Query _key99;
                        Answer _val100;
                        _key99 = new Query();
                        _key99.Read(iprot);
                        _val100 = new Answer();
                        _val100.Read(iprot);
                        _val96[_key99] = _val100;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key95] = _val96;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Update_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransactionID != null && __isset.transactionID) {
          field.Name = "transactionID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TransactionID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Writes != null && __isset.writes) {
          field.Name = "writes";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Writes.Count));
            foreach (int _iter101 in Writes.Keys)
            {
              oprot.WriteI32(_iter101);
              Writes[_iter101].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter102 in Reads.Keys)
            {
              oprot.WriteI32(_iter102);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter102].Count));
                foreach (Query _iter103 in Reads[_iter102].Keys)
                {
                  _iter103.Write(oprot);
                  Reads[_iter102][_iter103].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Update_args(");
        sb.Append("TransactionID: ");
        sb.Append(TransactionID== null ? "<null>" : TransactionID.ToString());
        sb.Append(",Writes: ");
        sb.Append(Writes);
        sb.Append(",Reads: ");
        sb.Append(Reads);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Update_result : TBase
    {
      private TransactionID _success;
      private Conflict _conflict;

      public TransactionID Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Conflict Conflict
      {
        get
        {
          return _conflict;
        }
        set
        {
          __isset.conflict = true;
          this._conflict = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool conflict;
      }

      public Update_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransactionID();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Conflict = new Conflict();
                Conflict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Update_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.conflict) {
          if (Conflict != null) {
            field.Name = "Conflict";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Conflict.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Update_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Conflict: ");
        sb.Append(Conflict== null ? "<null>" : Conflict.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Transgrade_args : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _reads;
      private long _source;
      private long _target;

      public Dictionary<int, Dictionary<Query, Answer>> Reads
      {
        get
        {
          return _reads;
        }
        set
        {
          __isset.reads = true;
          this._reads = value;
        }
      }

      public long Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public long Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reads;
        public bool source;
        public bool target;
      }

      public Transgrade_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Reads = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map104 = iprot.ReadMapBegin();
                  for( int _i105 = 0; _i105 < _map104.Count; ++_i105)
                  {
                    int _key106;
                    Dictionary<Query, Answer> _val107;
                    _key106 = iprot.ReadI32();
                    {
                      _val107 = new Dictionary<Query, Answer>();
                      TMap _map108 = iprot.ReadMapBegin();
                      for( int _i109 = 0; _i109 < _map108.Count; ++_i109)
                      {
                        Query _key110;
                        Answer _val111;
                        _key110 = new Query();
                        _key110.Read(iprot);
                        _val111 = new Answer();
                        _val111.Read(iprot);
                        _val107[_key110] = _val111;
                      }
                      iprot.ReadMapEnd();
                    }
                    Reads[_key106] = _val107;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Source = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Target = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Transgrade_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reads != null && __isset.reads) {
          field.Name = "reads";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Reads.Count));
            foreach (int _iter112 in Reads.Keys)
            {
              oprot.WriteI32(_iter112);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Reads[_iter112].Count));
                foreach (Query _iter113 in Reads[_iter112].Keys)
                {
                  _iter113.Write(oprot);
                  Reads[_iter112][_iter113].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.source) {
          field.Name = "source";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.target) {
          field.Name = "target";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Target);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Transgrade_args(");
        sb.Append("Reads: ");
        sb.Append(Reads);
        sb.Append(",Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Transgrade_result : TBase
    {
      private Dictionary<int, Dictionary<Query, Answer>> _success;
      private BeyondHistory _beyondHistory;

      public Dictionary<int, Dictionary<Query, Answer>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeyondHistory BeyondHistory
      {
        get
        {
          return _beyondHistory;
        }
        set
        {
          __isset.beyondHistory = true;
          this._beyondHistory = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool beyondHistory;
      }

      public Transgrade_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, Dictionary<Query, Answer>>();
                  TMap _map114 = iprot.ReadMapBegin();
                  for( int _i115 = 0; _i115 < _map114.Count; ++_i115)
                  {
                    int _key116;
                    Dictionary<Query, Answer> _val117;
                    _key116 = iprot.ReadI32();
                    {
                      _val117 = new Dictionary<Query, Answer>();
                      TMap _map118 = iprot.ReadMapBegin();
                      for( int _i119 = 0; _i119 < _map118.Count; ++_i119)
                      {
                        Query _key120;
                        Answer _val121;
                        _key120 = new Query();
                        _key120.Read(iprot);
                        _val121 = new Answer();
                        _val121.Read(iprot);
                        _val117[_key120] = _val121;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key116] = _val117;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BeyondHistory = new BeyondHistory();
                BeyondHistory.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Transgrade_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
              foreach (int _iter122 in Success.Keys)
              {
                oprot.WriteI32(_iter122);
                {
                  oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Success[_iter122].Count));
                  foreach (Query _iter123 in Success[_iter122].Keys)
                  {
                    _iter123.Write(oprot);
                    Success[_iter122][_iter123].Write(oprot);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.beyondHistory) {
          if (BeyondHistory != null) {
            field.Name = "BeyondHistory";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BeyondHistory.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Transgrade_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",BeyondHistory: ");
        sb.Append(BeyondHistory== null ? "<null>" : BeyondHistory.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AcquireLock_args : TBase
    {
      private string _name;
      private LockMode _mode;
      private int _timeout;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="LockMode"/>
      /// </summary>
      public LockMode Mode
      {
        get
        {
          return _mode;
        }
        set
        {
          __isset.mode = true;
          this._mode = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool mode;
        public bool timeout;
      }

      public AcquireLock_args() {
        this._timeout = 1000;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = (LockMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireLock_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Mode: ");
        sb.Append(Mode);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AcquireLock_result : TBase
    {
      private long _success;
      private LockTimedOut _timeout;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool timeout;
      }

      public AcquireLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AcquireLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AcquireLock_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class KeepLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public KeepLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KeepLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KeepLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class KeepLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
      }

      public KeepLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("KeepLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("KeepLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EscalateLock_args : TBase
    {
      private long _lockID;
      private int _timeout;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
        public bool timeout;
      }

      public EscalateLock_args() {
        this._timeout = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EscalateLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EscalateLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(",Timeout: ");
        sb.Append(Timeout);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EscalateLock_result : TBase
    {
      private LockTimedOut _timeout;
      private LockExpired _expired;

      public LockTimedOut Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timeout;
        public bool expired;
      }

      public EscalateLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Timeout = new LockTimedOut();
                Timeout.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EscalateLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.timeout) {
          if (Timeout != null) {
            field.Name = "Timeout";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Timeout.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EscalateLock_result(");
        sb.Append("Timeout: ");
        sb.Append(Timeout== null ? "<null>" : Timeout.ToString());
        sb.Append(",Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseLock_args : TBase
    {
      private long _lockID;

      public long LockID
      {
        get
        {
          return _lockID;
        }
        set
        {
          __isset.lockID = true;
          this._lockID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lockID;
      }

      public ReleaseLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LockID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lockID) {
          field.Name = "lockID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LockID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseLock_args(");
        sb.Append("LockID: ");
        sb.Append(LockID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseLock_result : TBase
    {
      private LockExpired _expired;

      public LockExpired Expired
      {
        get
        {
          return _expired;
        }
        set
        {
          __isset.expired = true;
          this._expired = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expired;
      }

      public ReleaseLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Expired = new LockExpired();
                Expired.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ReleaseLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.expired) {
          if (Expired != null) {
            field.Name = "Expired";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expired.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ReleaseLock_result(");
        sb.Append("Expired: ");
        sb.Append(Expired== null ? "<null>" : Expired.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Query_args : TBase
    {
      private Dictionary<int, Query> _queries;

      public Dictionary<int, Query> Queries
      {
        get
        {
          return _queries;
        }
        set
        {
          __isset.queries = true;
          this._queries = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool queries;
      }

      public Query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Queries = new Dictionary<int, Query>();
                  TMap _map124 = iprot.ReadMapBegin();
                  for( int _i125 = 0; _i125 < _map124.Count; ++_i125)
                  {
                    int _key126;
                    Query _val127;
                    _key126 = iprot.ReadI32();
                    _val127 = new Query();
                    _val127.Read(iprot);
                    Queries[_key126] = _val127;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Queries != null && __isset.queries) {
          field.Name = "queries";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Queries.Count));
            foreach (int _iter128 in Queries.Keys)
            {
              oprot.WriteI32(_iter128);
              Queries[_iter128].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Query_args(");
        sb.Append("Queries: ");
        sb.Append(Queries);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Query_result : TBase
    {
      private ReadResults _success;

      public ReadResults Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReadResults();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Query_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatistics_args : TBase
    {
      private List<int> _columnIDs;

      public List<int> ColumnIDs
      {
        get
        {
          return _columnIDs;
        }
        set
        {
          __isset.columnIDs = true;
          this._columnIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool columnIDs;
      }

      public GetStatistics_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ColumnIDs = new List<int>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    int _elem131 = 0;
                    _elem131 = iprot.ReadI32();
                    ColumnIDs.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ColumnIDs != null && __isset.columnIDs) {
          field.Name = "columnIDs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, ColumnIDs.Count));
            foreach (int _iter132 in ColumnIDs)
            {
              oprot.WriteI32(_iter132);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatistics_args(");
        sb.Append("ColumnIDs: ");
        sb.Append(ColumnIDs);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatistics_result : TBase
    {
      private List<Statistic> _success;

      public List<Statistic> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetStatistics_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Statistic>();
                  TList _list133 = iprot.ReadListBegin();
                  for( int _i134 = 0; _i134 < _list133.Count; ++_i134)
                  {
                    Statistic _elem135 = new Statistic();
                    _elem135 = new Statistic();
                    _elem135.Read(iprot);
                    Success.Add(_elem135);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Statistic _iter136 in Success)
              {
                _iter136.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatistics_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
