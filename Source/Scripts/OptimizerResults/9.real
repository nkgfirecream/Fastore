Executing query: 9 (9.OUT)
*** Optimizer Start ***
*** Begin search for loop 0 ***
=== trying table 0 with isOptimal=1 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x1 log10N=1.0 nRow=100.0 cost=2600.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=1 nInMul=1 rangeDiv=1 bSort=1 bLookup=1 wsFlags=0x4011000
         notReady=0x1 log10N=3.0 nRow=1.0 cost=10.0 used=0x4
best index is: sqlite_autoindex_PART_1
=== trying table 1 with isOptimal=1 ===
SUPPLIER(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x2 log10N=1.0 nRow=10.0 cost=70.0 used=0x0
SUPPLIER(sqlite_autoindex_SUPPLIER_1): nEq=1 nInMul=1 rangeDiv=1 bSort=1 bLookup=1 wsFlags=0x4011000
         notReady=0x2 log10N=1.0 nRow=1.0 cost=6.0 used=0x4
best index is: sqlite_autoindex_SUPPLIER_1
=== trying table 2 with isOptimal=1 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x4 log10N=1.0 nRow=6005.0 cost=96080.0 used=0x0
best index is: none
=== table 2 is best so far with cost=96080 and nRow=6005
=== trying table 3 with isOptimal=1 ===
PARTSUPP(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x8 log10N=1.0 nRow=800.0 cost=10400.0 used=0x0
best index is: none
=== table 3 is best so far with cost=10400 and nRow=800
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=1500.0 cost=24000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=1 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=12.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
=== trying table 5 with isOptimal=1 ===
NATION(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=1 bLookup=0 wsFlags=0x0
         notReady=0x20 log10N=1.0 nRow=25.0 cost=250.0 used=0x0
NATION(sqlite_autoindex_NATION_1): nEq=1 nInMul=1 rangeDiv=1 bSort=1 bLookup=1 wsFlags=0x4011000
         notReady=0x20 log10N=2.0 nRow=1.0 cost=8.0 used=0x2
best index is: sqlite_autoindex_NATION_1
*** Optimizer selects table 3 for loop 0 with cost=10400 and nRow=800
*** Begin search for loop 1 ***
=== trying table 0 with isOptimal=1 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x1 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x1 log10N=3.0 nRow=1.0 cost=7.0 used=0x4
best index is: sqlite_autoindex_PART_1
=== trying table 1 with isOptimal=1 ===
SUPPLIER(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x2 log10N=1.0 nRow=10.0 cost=40.0 used=0x0
SUPPLIER(sqlite_autoindex_SUPPLIER_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x2 log10N=1.0 nRow=1.0 cost=3.0 used=0x4
best index is: sqlite_autoindex_SUPPLIER_1
=== trying table 2 with isOptimal=1 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x4 log10N=1.0 nRow=60.0 cost=24020.0 used=0x0
best index is: none
auto-index reduces cost from 24020.0 to 68.0
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=9.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
=== trying table 5 with isOptimal=1 ===
NATION(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x20 log10N=1.0 nRow=25.0 cost=100.0 used=0x0
NATION(sqlite_autoindex_NATION_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x20 log10N=2.0 nRow=1.0 cost=5.0 used=0x2
best index is: sqlite_autoindex_NATION_1
=== trying table 0 with isOptimal=0 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
best index is: none
=== table 0 is best so far with cost=800 and nRow=100
=== trying table 1 with isOptimal=0 ===
SUPPLIER(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=10.0 cost=40.0 used=0x0
SUPPLIER(sqlite_autoindex_SUPPLIER_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=10.0 cost=40.0 used=0x0
best index is: none
=== table 1 is best so far with cost=40 and nRow=10
=== trying table 2 with isOptimal=0 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=60.0 cost=24020.0 used=0x0
best index is: none
auto-index reduces cost from 24020.0 to 68.0
=== trying table 4 with isOptimal=0 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
best index is: none
=== trying table 5 with isOptimal=0 ===
NATION(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=25.0 cost=100.0 used=0x0
NATION(sqlite_autoindex_NATION_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xfffffffffffffff7 log10N=1.0 nRow=25.0 cost=100.0 used=0x0
best index is: none
*** Optimizer selects table 1 for loop 1 with cost=40 and nRow=10
*** Begin search for loop 2 ***
=== trying table 0 with isOptimal=1 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x1 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x1 log10N=3.0 nRow=1.0 cost=7.0 used=0x4
best index is: sqlite_autoindex_PART_1
=== trying table 2 with isOptimal=1 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x4 log10N=1.0 nRow=6.0 cost=24020.0 used=0x0
best index is: none
auto-index reduces cost from 24020.0 to 14.0
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=9.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
=== trying table 5 with isOptimal=1 ===
NATION(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x20 log10N=1.0 nRow=2.5 cost=100.0 used=0x0
NATION(sqlite_autoindex_NATION_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x20 log10N=2.0 nRow=1.0 cost=5.0 used=0x2
best index is: sqlite_autoindex_NATION_1
=== table 5 is best so far with cost=5 and nRow=1
*** Optimizer selects table 5 for loop 2 with cost=5 and nRow=1
*** Begin search for loop 3 ***
=== trying table 0 with isOptimal=1 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x1 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x1 log10N=3.0 nRow=1.0 cost=7.0 used=0x4
best index is: sqlite_autoindex_PART_1
=== trying table 2 with isOptimal=1 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x4 log10N=1.0 nRow=6.0 cost=24020.0 used=0x0
best index is: none
auto-index reduces cost from 24020.0 to 14.0
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=9.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
=== trying table 0 with isOptimal=0 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xffffffffffffffd5 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xffffffffffffffd5 log10N=1.0 nRow=100.0 cost=800.0 used=0x0
best index is: none
=== table 0 is best so far with cost=800 and nRow=100
=== trying table 2 with isOptimal=0 ===
LINEITEM(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xffffffffffffffd5 log10N=1.0 nRow=6.0 cost=24020.0 used=0x0
best index is: none
auto-index reduces cost from 24020.0 to 14.0
=== table 2 is best so far with cost=14.005 and nRow=5
=== trying table 4 with isOptimal=0 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xffffffffffffffd5 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0xffffffffffffffd5 log10N=1.0 nRow=1500.0 cost=6000.0 used=0x0
best index is: none
*** Optimizer selects table 2 for loop 3 with cost=14.005 and nRow=5
*** Begin search for loop 4 ***
=== trying table 0 with isOptimal=1 ===
PART(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x1 log10N=1.0 nRow=10.0 cost=800.0 used=0x0
PART(sqlite_autoindex_PART_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x1 log10N=3.0 nRow=1.0 cost=7.0 used=0x4
best index is: sqlite_autoindex_PART_1
=== table 0 is best so far with cost=7 and nRow=1
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=150.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=9.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
*** Optimizer selects table 0 for loop 4 with cost=7 and nRow=1
*** Begin search for loop 5 ***
=== trying table 4 with isOptimal=1 ===
ORDERS(ipk): nEq=0 nInMul=1 rangeDiv=1 bSort=0 bLookup=0 wsFlags=0x0
         notReady=0x10 log10N=1.0 nRow=150.0 cost=6000.0 used=0x0
ORDERS(sqlite_autoindex_ORDERS_1): nEq=1 nInMul=1 rangeDiv=1 bSort=0 bLookup=1 wsFlags=0x4011000
         notReady=0x10 log10N=4.0 nRow=1.0 cost=9.0 used=0x4
best index is: sqlite_autoindex_ORDERS_1
=== table 4 is best so far with cost=9 and nRow=1
*** Optimizer selects table 4 for loop 5 with cost=9 and nRow=1
*** Optimizer Finished ***

0|0|3|SCAN TABLE partsupp (~800 rows)|
0|1|1|SCAN TABLE supplier (~10 rows)|
0|2|5|SEARCH TABLE nation USING INDEX sqlite_autoindex_NATION_1 (N_NATIONKEY=?) (~1 rows)|
0|3|2|SEARCH TABLE lineitem USING AUTOMATIC COVERING INDEX (L_PARTKEY=? AND L_SUPPKEY=?) (~5 rows)|
0|4|0|SEARCH TABLE part USING INDEX sqlite_autoindex_PART_1 (P_PARTKEY=?) (~1 rows)|
0|5|4|SEARCH TABLE orders USING INDEX sqlite_autoindex_ORDERS_1 (O_ORDERKEY=?) (~1 rows)|
0|0|0|USE TEMP B-TREE FOR GROUP BY|
0|0|0|USE TEMP B-TREE FOR ORDER BY|
||||