// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Store.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::fastore::communication;

class StoreHandler : virtual public StoreIf {
 public:
  StoreHandler() {
    // Your initialization goes here
  }

  void checkpointBegin(const ColumnID columnID) {
    // Your implementation goes here
    printf("checkpointBegin\n");
  }

  void checkpointWrite(const ColumnID columnID, const ValueRowsList& values) {
    // Your implementation goes here
    printf("checkpointWrite\n");
  }

  void checkpointEnd(const ColumnID columnID) {
    // Your implementation goes here
    printf("checkpointEnd\n");
  }

  void getStatus(StoreStatus& _return) {
    // Your implementation goes here
    printf("getStatus\n");
  }

  void getWrites(GetWritesResults& _return, const Ranges& ranges) {
    // Your implementation goes here
    printf("getWrites\n");
  }

  void commit(const TransactionID transactionID, const std::map<ColumnID, Revision> & revisions, const Writes& writes) {
    // Your implementation goes here
    printf("commit\n");
  }

  void flush(const TransactionID transactionID) {
    // Your implementation goes here
    printf("flush\n");
  }

  void unpark(const int64_t connectionID, const std::string& data) {
    // Your implementation goes here
    printf("unpark\n");
  }

  void heartbeat() {
    // Your implementation goes here
    printf("heartbeat\n");
  }

  void start() {
    // Your implementation goes here
    printf("start\n");
  }

  void suspend() {
    // Your implementation goes here
    printf("suspend\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<StoreHandler> handler(new StoreHandler());
  shared_ptr<TProcessor> processor(new StoreProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

