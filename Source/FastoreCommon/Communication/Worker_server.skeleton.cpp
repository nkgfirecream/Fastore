// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Worker.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::fastore::communication;

class WorkerHandler : virtual public WorkerIf {
 public:
  WorkerHandler() {
    // Your initialization goes here
  }

  void shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

  void loadBegin(const ColumnID columnID) {
    // Your implementation goes here
    printf("loadBegin\n");
  }

  void loadBulkWrite(const ColumnID columnID, const ValueRowsList& values) {
    // Your implementation goes here
    printf("loadBulkWrite\n");
  }

  void loadWrite(const ColumnID columnID, const ColumnWrites& writes) {
    // Your implementation goes here
    printf("loadWrite\n");
  }

  void loadEnd(const ColumnID columnID, const Revision revision) {
    // Your implementation goes here
    printf("loadEnd\n");
  }

  void getState(WorkerState& _return) {
    // Your implementation goes here
    printf("getState\n");
  }

  void prepare(PrepareResults& _return, const TransactionID transactionID, const ColumnPrepares& columns) {
    // Your implementation goes here
    printf("prepare\n");
  }

  void apply(PrepareResults& _return, const TransactionID transactionID, const ColumnIDs& columns) {
    // Your implementation goes here
    printf("apply\n");
  }

  void commit(const TransactionID transactionID, const Writes& writes) {
    // Your implementation goes here
    printf("commit\n");
  }

  void rollback(const TransactionID transactionID) {
    // Your implementation goes here
    printf("rollback\n");
  }

  void query(ReadResults& _return, const Queries& queries) {
    // Your implementation goes here
    printf("query\n");
  }

  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) {
    // Your implementation goes here
    printf("getStatistics\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<WorkerHandler> handler(new WorkerHandler());
  shared_ptr<TProcessor> processor(new WorkerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

