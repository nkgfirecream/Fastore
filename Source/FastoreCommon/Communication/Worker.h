/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Worker_H
#define Worker_H

#include <thrift/TDispatchProcessor.h>
#include "Comm_types.h"

namespace fastore { namespace communication {

class WorkerIf {
 public:
  virtual ~WorkerIf() {}
  virtual void shutdown() = 0;
  virtual void loadBegin(const ColumnID columnID) = 0;
  virtual void loadBulkWrite(const ColumnID columnID, const ValueRowsList& values) = 0;
  virtual void loadWrite(const ColumnID columnID, const ColumnWrites& writes) = 0;
  virtual void loadEnd(const ColumnID columnID, const Revision revision) = 0;
  virtual void getState(WorkerState& _return) = 0;
  virtual void prepare(PrepareResults& _return, const TransactionID transactionID, const ColumnPrepares& columns) = 0;
  virtual void apply(PrepareResults& _return, const TransactionID transactionID, const ColumnIDs& columns) = 0;
  virtual void commit(const TransactionID transactionID, const Writes& writes) = 0;
  virtual void rollback(const TransactionID transactionID) = 0;
  virtual void query(ReadResults& _return, const Queries& queries) = 0;
  virtual void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) = 0;
};

class WorkerIfFactory {
 public:
  typedef WorkerIf Handler;

  virtual ~WorkerIfFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WorkerIf* /* handler */) = 0;
};

class WorkerIfSingletonFactory : virtual public WorkerIfFactory {
 public:
  WorkerIfSingletonFactory(const boost::shared_ptr<WorkerIf>& iface) : iface_(iface) {}
  virtual ~WorkerIfSingletonFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<WorkerIf> iface_;
};

class WorkerNull : virtual public WorkerIf {
 public:
  virtual ~WorkerNull() {}
  void shutdown() {
    return;
  }
  void loadBegin(const ColumnID /* columnID */) {
    return;
  }
  void loadBulkWrite(const ColumnID /* columnID */, const ValueRowsList& /* values */) {
    return;
  }
  void loadWrite(const ColumnID /* columnID */, const ColumnWrites& /* writes */) {
    return;
  }
  void loadEnd(const ColumnID /* columnID */, const Revision /* revision */) {
    return;
  }
  void getState(WorkerState& /* _return */) {
    return;
  }
  void prepare(PrepareResults& /* _return */, const TransactionID /* transactionID */, const ColumnPrepares& /* columns */) {
    return;
  }
  void apply(PrepareResults& /* _return */, const TransactionID /* transactionID */, const ColumnIDs& /* columns */) {
    return;
  }
  void commit(const TransactionID /* transactionID */, const Writes& /* writes */) {
    return;
  }
  void rollback(const TransactionID /* transactionID */) {
    return;
  }
  void query(ReadResults& /* _return */, const Queries& /* queries */) {
    return;
  }
  void getStatistics(std::vector<Statistic> & /* _return */, const std::vector<ColumnID> & /* columnIDs */) {
    return;
  }
};


class Worker_shutdown_args {
 public:

  Worker_shutdown_args() {
  }

  virtual ~Worker_shutdown_args() throw() {}


  bool operator == (const Worker_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_shutdown_pargs {
 public:


  virtual ~Worker_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_shutdown_result {
 public:

  Worker_shutdown_result() {
  }

  virtual ~Worker_shutdown_result() throw() {}


  bool operator == (const Worker_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_shutdown_presult {
 public:


  virtual ~Worker_shutdown_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_loadBegin_args__isset {
  _Worker_loadBegin_args__isset() : columnID(false) {}
  bool columnID;
} _Worker_loadBegin_args__isset;

class Worker_loadBegin_args {
 public:

  Worker_loadBegin_args() : columnID(0) {
  }

  virtual ~Worker_loadBegin_args() throw() {}

  ColumnID columnID;

  _Worker_loadBegin_args__isset __isset;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  bool operator == (const Worker_loadBegin_args & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    return true;
  }
  bool operator != (const Worker_loadBegin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadBegin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBegin_pargs {
 public:


  virtual ~Worker_loadBegin_pargs() throw() {}

  const ColumnID* columnID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBegin_result {
 public:

  Worker_loadBegin_result() {
  }

  virtual ~Worker_loadBegin_result() throw() {}


  bool operator == (const Worker_loadBegin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_loadBegin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadBegin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBegin_presult {
 public:


  virtual ~Worker_loadBegin_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_loadBulkWrite_args__isset {
  _Worker_loadBulkWrite_args__isset() : columnID(false), values(false) {}
  bool columnID;
  bool values;
} _Worker_loadBulkWrite_args__isset;

class Worker_loadBulkWrite_args {
 public:

  Worker_loadBulkWrite_args() : columnID(0) {
  }

  virtual ~Worker_loadBulkWrite_args() throw() {}

  ColumnID columnID;
  ValueRowsList values;

  _Worker_loadBulkWrite_args__isset __isset;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  void __set_values(const ValueRowsList& val) {
    values = val;
  }

  bool operator == (const Worker_loadBulkWrite_args & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const Worker_loadBulkWrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadBulkWrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBulkWrite_pargs {
 public:


  virtual ~Worker_loadBulkWrite_pargs() throw() {}

  const ColumnID* columnID;
  const ValueRowsList* values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBulkWrite_result {
 public:

  Worker_loadBulkWrite_result() {
  }

  virtual ~Worker_loadBulkWrite_result() throw() {}


  bool operator == (const Worker_loadBulkWrite_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_loadBulkWrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadBulkWrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadBulkWrite_presult {
 public:


  virtual ~Worker_loadBulkWrite_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_loadWrite_args__isset {
  _Worker_loadWrite_args__isset() : columnID(false), writes(false) {}
  bool columnID;
  bool writes;
} _Worker_loadWrite_args__isset;

class Worker_loadWrite_args {
 public:

  Worker_loadWrite_args() : columnID(0) {
  }

  virtual ~Worker_loadWrite_args() throw() {}

  ColumnID columnID;
  ColumnWrites writes;

  _Worker_loadWrite_args__isset __isset;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  void __set_writes(const ColumnWrites& val) {
    writes = val;
  }

  bool operator == (const Worker_loadWrite_args & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    if (!(writes == rhs.writes))
      return false;
    return true;
  }
  bool operator != (const Worker_loadWrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadWrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadWrite_pargs {
 public:


  virtual ~Worker_loadWrite_pargs() throw() {}

  const ColumnID* columnID;
  const ColumnWrites* writes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadWrite_result {
 public:

  Worker_loadWrite_result() {
  }

  virtual ~Worker_loadWrite_result() throw() {}


  bool operator == (const Worker_loadWrite_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_loadWrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadWrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadWrite_presult {
 public:


  virtual ~Worker_loadWrite_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_loadEnd_args__isset {
  _Worker_loadEnd_args__isset() : columnID(false), revision(false) {}
  bool columnID;
  bool revision;
} _Worker_loadEnd_args__isset;

class Worker_loadEnd_args {
 public:

  Worker_loadEnd_args() : columnID(0), revision(0) {
  }

  virtual ~Worker_loadEnd_args() throw() {}

  ColumnID columnID;
  Revision revision;

  _Worker_loadEnd_args__isset __isset;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const Worker_loadEnd_args & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const Worker_loadEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadEnd_pargs {
 public:


  virtual ~Worker_loadEnd_pargs() throw() {}

  const ColumnID* columnID;
  const Revision* revision;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadEnd_result {
 public:

  Worker_loadEnd_result() {
  }

  virtual ~Worker_loadEnd_result() throw() {}


  bool operator == (const Worker_loadEnd_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_loadEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_loadEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_loadEnd_presult {
 public:


  virtual ~Worker_loadEnd_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Worker_getState_args {
 public:

  Worker_getState_args() {
  }

  virtual ~Worker_getState_args() throw() {}


  bool operator == (const Worker_getState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_getState_pargs {
 public:


  virtual ~Worker_getState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getState_result__isset {
  _Worker_getState_result__isset() : success(false) {}
  bool success;
} _Worker_getState_result__isset;

class Worker_getState_result {
 public:

  Worker_getState_result() {
  }

  virtual ~Worker_getState_result() throw() {}

  WorkerState success;

  _Worker_getState_result__isset __isset;

  void __set_success(const WorkerState& val) {
    success = val;
  }

  bool operator == (const Worker_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getState_presult__isset {
  _Worker_getState_presult__isset() : success(false) {}
  bool success;
} _Worker_getState_presult__isset;

class Worker_getState_presult {
 public:


  virtual ~Worker_getState_presult() throw() {}

  WorkerState* success;

  _Worker_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_prepare_args__isset {
  _Worker_prepare_args__isset() : transactionID(false), columns(false) {}
  bool transactionID;
  bool columns;
} _Worker_prepare_args__isset;

class Worker_prepare_args {
 public:

  Worker_prepare_args() : transactionID(0) {
  }

  virtual ~Worker_prepare_args() throw() {}

  TransactionID transactionID;
  ColumnPrepares columns;

  _Worker_prepare_args__isset __isset;

  void __set_transactionID(const TransactionID val) {
    transactionID = val;
  }

  void __set_columns(const ColumnPrepares& val) {
    columns = val;
  }

  bool operator == (const Worker_prepare_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const Worker_prepare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_prepare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_prepare_pargs {
 public:


  virtual ~Worker_prepare_pargs() throw() {}

  const TransactionID* transactionID;
  const ColumnPrepares* columns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_prepare_result__isset {
  _Worker_prepare_result__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_prepare_result__isset;

class Worker_prepare_result {
 public:

  Worker_prepare_result() {
  }

  virtual ~Worker_prepare_result() throw() {}

  PrepareResults success;
  AlreadyPending alreadyPending;

  _Worker_prepare_result__isset __isset;

  void __set_success(const PrepareResults& val) {
    success = val;
  }

  void __set_alreadyPending(const AlreadyPending& val) {
    alreadyPending = val;
  }

  bool operator == (const Worker_prepare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(alreadyPending == rhs.alreadyPending))
      return false;
    return true;
  }
  bool operator != (const Worker_prepare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_prepare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_prepare_presult__isset {
  _Worker_prepare_presult__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_prepare_presult__isset;

class Worker_prepare_presult {
 public:


  virtual ~Worker_prepare_presult() throw() {}

  PrepareResults* success;
  AlreadyPending alreadyPending;

  _Worker_prepare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_apply_args__isset {
  _Worker_apply_args__isset() : transactionID(false), columns(false) {}
  bool transactionID;
  bool columns;
} _Worker_apply_args__isset;

class Worker_apply_args {
 public:

  Worker_apply_args() : transactionID(0) {
  }

  virtual ~Worker_apply_args() throw() {}

  TransactionID transactionID;
  ColumnIDs columns;

  _Worker_apply_args__isset __isset;

  void __set_transactionID(const TransactionID val) {
    transactionID = val;
  }

  void __set_columns(const ColumnIDs& val) {
    columns = val;
  }

  bool operator == (const Worker_apply_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const Worker_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_apply_pargs {
 public:


  virtual ~Worker_apply_pargs() throw() {}

  const TransactionID* transactionID;
  const ColumnIDs* columns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_apply_result__isset {
  _Worker_apply_result__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_apply_result__isset;

class Worker_apply_result {
 public:

  Worker_apply_result() {
  }

  virtual ~Worker_apply_result() throw() {}

  PrepareResults success;
  AlreadyPending alreadyPending;

  _Worker_apply_result__isset __isset;

  void __set_success(const PrepareResults& val) {
    success = val;
  }

  void __set_alreadyPending(const AlreadyPending& val) {
    alreadyPending = val;
  }

  bool operator == (const Worker_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(alreadyPending == rhs.alreadyPending))
      return false;
    return true;
  }
  bool operator != (const Worker_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_apply_presult__isset {
  _Worker_apply_presult__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_apply_presult__isset;

class Worker_apply_presult {
 public:


  virtual ~Worker_apply_presult() throw() {}

  PrepareResults* success;
  AlreadyPending alreadyPending;

  _Worker_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_commit_args__isset {
  _Worker_commit_args__isset() : transactionID(false), writes(false) {}
  bool transactionID;
  bool writes;
} _Worker_commit_args__isset;

class Worker_commit_args {
 public:

  Worker_commit_args() : transactionID(0) {
  }

  virtual ~Worker_commit_args() throw() {}

  TransactionID transactionID;
  Writes writes;

  _Worker_commit_args__isset __isset;

  void __set_transactionID(const TransactionID val) {
    transactionID = val;
  }

  void __set_writes(const Writes& val) {
    writes = val;
  }

  bool operator == (const Worker_commit_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(writes == rhs.writes))
      return false;
    return true;
  }
  bool operator != (const Worker_commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_commit_pargs {
 public:


  virtual ~Worker_commit_pargs() throw() {}

  const TransactionID* transactionID;
  const Writes* writes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_rollback_args__isset {
  _Worker_rollback_args__isset() : transactionID(false) {}
  bool transactionID;
} _Worker_rollback_args__isset;

class Worker_rollback_args {
 public:

  Worker_rollback_args() : transactionID(0) {
  }

  virtual ~Worker_rollback_args() throw() {}

  TransactionID transactionID;

  _Worker_rollback_args__isset __isset;

  void __set_transactionID(const TransactionID val) {
    transactionID = val;
  }

  bool operator == (const Worker_rollback_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    return true;
  }
  bool operator != (const Worker_rollback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_rollback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_rollback_pargs {
 public:


  virtual ~Worker_rollback_pargs() throw() {}

  const TransactionID* transactionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_args__isset {
  _Worker_query_args__isset() : queries(false) {}
  bool queries;
} _Worker_query_args__isset;

class Worker_query_args {
 public:

  Worker_query_args() {
  }

  virtual ~Worker_query_args() throw() {}

  Queries queries;

  _Worker_query_args__isset __isset;

  void __set_queries(const Queries& val) {
    queries = val;
  }

  bool operator == (const Worker_query_args & rhs) const
  {
    if (!(queries == rhs.queries))
      return false;
    return true;
  }
  bool operator != (const Worker_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_query_pargs {
 public:


  virtual ~Worker_query_pargs() throw() {}

  const Queries* queries;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_result__isset {
  _Worker_query_result__isset() : success(false) {}
  bool success;
} _Worker_query_result__isset;

class Worker_query_result {
 public:

  Worker_query_result() {
  }

  virtual ~Worker_query_result() throw() {}

  ReadResults success;

  _Worker_query_result__isset __isset;

  void __set_success(const ReadResults& val) {
    success = val;
  }

  bool operator == (const Worker_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_presult__isset {
  _Worker_query_presult__isset() : success(false) {}
  bool success;
} _Worker_query_presult__isset;

class Worker_query_presult {
 public:


  virtual ~Worker_query_presult() throw() {}

  ReadResults* success;

  _Worker_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_getStatistics_args__isset {
  _Worker_getStatistics_args__isset() : columnIDs(false) {}
  bool columnIDs;
} _Worker_getStatistics_args__isset;

class Worker_getStatistics_args {
 public:

  Worker_getStatistics_args() {
  }

  virtual ~Worker_getStatistics_args() throw() {}

  std::vector<ColumnID>  columnIDs;

  _Worker_getStatistics_args__isset __isset;

  void __set_columnIDs(const std::vector<ColumnID> & val) {
    columnIDs = val;
  }

  bool operator == (const Worker_getStatistics_args & rhs) const
  {
    if (!(columnIDs == rhs.columnIDs))
      return false;
    return true;
  }
  bool operator != (const Worker_getStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_getStatistics_pargs {
 public:


  virtual ~Worker_getStatistics_pargs() throw() {}

  const std::vector<ColumnID> * columnIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getStatistics_result__isset {
  _Worker_getStatistics_result__isset() : success(false) {}
  bool success;
} _Worker_getStatistics_result__isset;

class Worker_getStatistics_result {
 public:

  Worker_getStatistics_result() {
  }

  virtual ~Worker_getStatistics_result() throw() {}

  std::vector<Statistic>  success;

  _Worker_getStatistics_result__isset __isset;

  void __set_success(const std::vector<Statistic> & val) {
    success = val;
  }

  bool operator == (const Worker_getStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_getStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getStatistics_presult__isset {
  _Worker_getStatistics_presult__isset() : success(false) {}
  bool success;
} _Worker_getStatistics_presult__isset;

class Worker_getStatistics_presult {
 public:


  virtual ~Worker_getStatistics_presult() throw() {}

  std::vector<Statistic> * success;

  _Worker_getStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WorkerClient : virtual public WorkerIf {
 public:
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void shutdown();
  void send_shutdown();
  void recv_shutdown();
  void loadBegin(const ColumnID columnID);
  void send_loadBegin(const ColumnID columnID);
  void recv_loadBegin();
  void loadBulkWrite(const ColumnID columnID, const ValueRowsList& values);
  void send_loadBulkWrite(const ColumnID columnID, const ValueRowsList& values);
  void recv_loadBulkWrite();
  void loadWrite(const ColumnID columnID, const ColumnWrites& writes);
  void send_loadWrite(const ColumnID columnID, const ColumnWrites& writes);
  void recv_loadWrite();
  void loadEnd(const ColumnID columnID, const Revision revision);
  void send_loadEnd(const ColumnID columnID, const Revision revision);
  void recv_loadEnd();
  void getState(WorkerState& _return);
  void send_getState();
  void recv_getState(WorkerState& _return);
  void prepare(PrepareResults& _return, const TransactionID transactionID, const ColumnPrepares& columns);
  void send_prepare(const TransactionID transactionID, const ColumnPrepares& columns);
  void recv_prepare(PrepareResults& _return);
  void apply(PrepareResults& _return, const TransactionID transactionID, const ColumnIDs& columns);
  void send_apply(const TransactionID transactionID, const ColumnIDs& columns);
  void recv_apply(PrepareResults& _return);
  void commit(const TransactionID transactionID, const Writes& writes);
  void send_commit(const TransactionID transactionID, const Writes& writes);
  void rollback(const TransactionID transactionID);
  void send_rollback(const TransactionID transactionID);
  void query(ReadResults& _return, const Queries& queries);
  void send_query(const Queries& queries);
  void recv_query(ReadResults& _return);
  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs);
  void send_getStatistics(const std::vector<ColumnID> & columnIDs);
  void recv_getStatistics(std::vector<Statistic> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WorkerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WorkerIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WorkerProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadBegin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadBulkWrite(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadWrite(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadEnd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepare(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_apply(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commit(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollback(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatistics(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerProcessor(boost::shared_ptr<WorkerIf> iface) :
    iface_(iface) {
    processMap_["shutdown"] = &WorkerProcessor::process_shutdown;
    processMap_["loadBegin"] = &WorkerProcessor::process_loadBegin;
    processMap_["loadBulkWrite"] = &WorkerProcessor::process_loadBulkWrite;
    processMap_["loadWrite"] = &WorkerProcessor::process_loadWrite;
    processMap_["loadEnd"] = &WorkerProcessor::process_loadEnd;
    processMap_["getState"] = &WorkerProcessor::process_getState;
    processMap_["prepare"] = &WorkerProcessor::process_prepare;
    processMap_["apply"] = &WorkerProcessor::process_apply;
    processMap_["commit"] = &WorkerProcessor::process_commit;
    processMap_["rollback"] = &WorkerProcessor::process_rollback;
    processMap_["query"] = &WorkerProcessor::process_query;
    processMap_["getStatistics"] = &WorkerProcessor::process_getStatistics;
  }

  virtual ~WorkerProcessor() {}
};

class WorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerProcessorFactory(const ::boost::shared_ptr< WorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WorkerIfFactory > handlerFactory_;
};

class WorkerMultiface : virtual public WorkerIf {
 public:
  WorkerMultiface(std::vector<boost::shared_ptr<WorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WorkerIf> > ifaces_;
  WorkerMultiface() {}
  void add(boost::shared_ptr<WorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  void loadBegin(const ColumnID columnID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadBegin(columnID);
    }
    ifaces_[i]->loadBegin(columnID);
  }

  void loadBulkWrite(const ColumnID columnID, const ValueRowsList& values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadBulkWrite(columnID, values);
    }
    ifaces_[i]->loadBulkWrite(columnID, values);
  }

  void loadWrite(const ColumnID columnID, const ColumnWrites& writes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadWrite(columnID, writes);
    }
    ifaces_[i]->loadWrite(columnID, writes);
  }

  void loadEnd(const ColumnID columnID, const Revision revision) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadEnd(columnID, revision);
    }
    ifaces_[i]->loadEnd(columnID, revision);
  }

  void getState(WorkerState& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return);
    }
    ifaces_[i]->getState(_return);
    return;
  }

  void prepare(PrepareResults& _return, const TransactionID transactionID, const ColumnPrepares& columns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepare(_return, transactionID, columns);
    }
    ifaces_[i]->prepare(_return, transactionID, columns);
    return;
  }

  void apply(PrepareResults& _return, const TransactionID transactionID, const ColumnIDs& columns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply(_return, transactionID, columns);
    }
    ifaces_[i]->apply(_return, transactionID, columns);
    return;
  }

  void commit(const TransactionID transactionID, const Writes& writes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commit(transactionID, writes);
    }
    ifaces_[i]->commit(transactionID, writes);
  }

  void rollback(const TransactionID transactionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollback(transactionID);
    }
    ifaces_[i]->rollback(transactionID);
  }

  void query(ReadResults& _return, const Queries& queries) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, queries);
    }
    ifaces_[i]->query(_return, queries);
    return;
  }

  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatistics(_return, columnIDs);
    }
    ifaces_[i]->getStatistics(_return, columnIDs);
    return;
  }

};

}} // namespace

#endif
