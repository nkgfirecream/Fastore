/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Fastore_TYPES_H
#define Fastore_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace fastore {

struct RepositoryStatus {
  enum type {
    Loading = 1,
    Unloading = 2,
    Online = 3,
    Checkpointing = 4
  };
};

extern const std::map<int, const char*> _RepositoryStatus_VALUES_TO_NAMES;

struct HostStatus {
  enum type {
    Offline = 1,
    Online = 2,
    Unreachable = 3
  };
};

extern const std::map<int, const char*> _HostStatus_VALUES_TO_NAMES;

struct LockMode {
  enum type {
    Read = 1,
    Write = 2
  };
};

extern const std::map<int, const char*> _LockMode_VALUES_TO_NAMES;

typedef int64_t Revision;

typedef int32_t TopologyID;

typedef int32_t ColumnID;

typedef int32_t HostID;

typedef std::string HostAddress;

typedef int64_t LockID;

typedef std::string LockName;

typedef int32_t LockTimeout;

typedef std::map<ColumnID, class ColumnWrites>  Writes;

typedef std::vector<class ValueRows>  ValueRowsList;

typedef std::map<ColumnID, class Query>  Queries;

typedef std::map<ColumnID, class ReadResult>  ReadResults;

typedef std::map<class Query, class Answer>  Read;

typedef std::map<ColumnID, Read>  Reads;


class Host {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Host() : id(0), address() {
  }

  virtual ~Host() throw() {}

  HostID id;
  HostAddress address;

  void __set_id(const HostID val) {
    id = val;
  }

  void __set_address(const HostAddress& val) {
    address = val;
  }

  bool operator == (const Host & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const Host &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Host & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Host &a, Host &b);


class Repository {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Repository() : columnID(0), hostID(0) {
  }

  virtual ~Repository() throw() {}

  ColumnID columnID;
  HostID hostID;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  void __set_hostID(const HostID val) {
    hostID = val;
  }

  bool operator == (const Repository & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    if (!(hostID == rhs.hostID))
      return false;
    return true;
  }
  bool operator != (const Repository &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Repository & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Repository &a, Repository &b);


class Topology {
 public:

  static const char* ascii_fingerprint; // = "D087BB3015A7C1BA44729FFF8D9C4426";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x87,0xBB,0x30,0x15,0xA7,0xC1,0xBA,0x44,0x72,0x9F,0xFF,0x8D,0x9C,0x44,0x26};

  Topology() : id(0) {
  }

  virtual ~Topology() throw() {}

  TopologyID id;
  std::set<Host>  hosts;
  std::set<Repository>  repositories;

  void __set_id(const TopologyID val) {
    id = val;
  }

  void __set_hosts(const std::set<Host> & val) {
    hosts = val;
  }

  void __set_repositories(const std::set<Repository> & val) {
    repositories = val;
  }

  bool operator == (const Topology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(hosts == rhs.hosts))
      return false;
    if (!(repositories == rhs.repositories))
      return false;
    return true;
  }
  bool operator != (const Topology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Topology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Topology &a, Topology &b);


class TopologyResult {
 public:

  static const char* ascii_fingerprint; // = "9EE0432C90FEA50EA66B7F2398815ABF";
  static const uint8_t binary_fingerprint[16]; // = {0x9E,0xE0,0x43,0x2C,0x90,0xFE,0xA5,0x0E,0xA6,0x6B,0x7F,0x23,0x98,0x81,0x5A,0xBF};

  TopologyResult() : revision(0) {
  }

  virtual ~TopologyResult() throw() {}

  Topology topology;
  Revision revision;

  void __set_topology(const Topology& val) {
    topology = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const TopologyResult & rhs) const
  {
    if (!(topology == rhs.topology))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const TopologyResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopologyResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopologyResult &a, TopologyResult &b);


class HostReport {
 public:

  static const char* ascii_fingerprint; // = "7402C27C789620E471CF3FE2CB95E6AF";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x02,0xC2,0x7C,0x78,0x96,0x20,0xE4,0x71,0xCF,0x3F,0xE2,0xCB,0x95,0xE6,0xAF};

  HostReport() : status((HostStatus::type)0) {
  }

  virtual ~HostReport() throw() {}

  HostStatus::type status;
  std::map<ColumnID, RepositoryStatus::type>  repositoryStatus;

  void __set_status(const HostStatus::type val) {
    status = val;
  }

  void __set_repositoryStatus(const std::map<ColumnID, RepositoryStatus::type> & val) {
    repositoryStatus = val;
  }

  bool operator == (const HostReport & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(repositoryStatus == rhs.repositoryStatus))
      return false;
    return true;
  }
  bool operator != (const HostReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostReport &a, HostReport &b);


class TopologyReport {
 public:

  static const char* ascii_fingerprint; // = "E6AEC4F867448704EF06F6B449656C5E";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xAE,0xC4,0xF8,0x67,0x44,0x87,0x04,0xEF,0x06,0xF6,0xB4,0x49,0x65,0x6C,0x5E};

  TopologyReport() : topologyID(0), revision(1LL) {
  }

  virtual ~TopologyReport() throw() {}

  TopologyID topologyID;
  std::map<HostID, HostReport>  hosts;
  Revision revision;

  void __set_topologyID(const TopologyID val) {
    topologyID = val;
  }

  void __set_hosts(const std::map<HostID, HostReport> & val) {
    hosts = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const TopologyReport & rhs) const
  {
    if (!(topologyID == rhs.topologyID))
      return false;
    if (!(hosts == rhs.hosts))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const TopologyReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopologyReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopologyReport &a, TopologyReport &b);


class TransactionID {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TransactionID() : revision(0), key(0) {
  }

  virtual ~TransactionID() throw() {}

  Revision revision;
  int64_t key;

  void __set_revision(const Revision val) {
    revision = val;
  }

  void __set_key(const int64_t val) {
    key = val;
  }

  bool operator == (const TransactionID & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TransactionID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TransactionID &a, TransactionID &b);


class Include {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Include() : rowID(), value() {
  }

  virtual ~Include() throw() {}

  std::string rowID;
  std::string value;

  void __set_rowID(const std::string& val) {
    rowID = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const Include & rhs) const
  {
    if (!(rowID == rhs.rowID))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Include &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Include & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Include &a, Include &b);


class Exclude {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Exclude() : rowID() {
  }

  virtual ~Exclude() throw() {}

  std::string rowID;

  void __set_rowID(const std::string& val) {
    rowID = val;
  }

  bool operator == (const Exclude & rhs) const
  {
    if (!(rowID == rhs.rowID))
      return false;
    return true;
  }
  bool operator != (const Exclude &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exclude & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Exclude &a, Exclude &b);

typedef struct _ColumnWrites__isset {
  _ColumnWrites__isset() : includes(false), excludes(false) {}
  bool includes;
  bool excludes;
} _ColumnWrites__isset;

class ColumnWrites {
 public:

  static const char* ascii_fingerprint; // = "7B474451502DF848AF475006A25AB746";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x47,0x44,0x51,0x50,0x2D,0xF8,0x48,0xAF,0x47,0x50,0x06,0xA2,0x5A,0xB7,0x46};

  ColumnWrites() {
  }

  virtual ~ColumnWrites() throw() {}

  std::vector<Include>  includes;
  std::vector<Exclude>  excludes;

  _ColumnWrites__isset __isset;

  void __set_includes(const std::vector<Include> & val) {
    includes = val;
    __isset.includes = true;
  }

  void __set_excludes(const std::vector<Exclude> & val) {
    excludes = val;
    __isset.excludes = true;
  }

  bool operator == (const ColumnWrites & rhs) const
  {
    if (__isset.includes != rhs.__isset.includes)
      return false;
    else if (__isset.includes && !(includes == rhs.includes))
      return false;
    if (__isset.excludes != rhs.__isset.excludes)
      return false;
    else if (__isset.excludes && !(excludes == rhs.excludes))
      return false;
    return true;
  }
  bool operator != (const ColumnWrites &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnWrites & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnWrites &a, ColumnWrites &b);


class Statistic {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  Statistic() : total(0), unique(0) {
  }

  virtual ~Statistic() throw() {}

  int64_t total;
  int64_t unique;

  void __set_total(const int64_t val) {
    total = val;
  }

  void __set_unique(const int64_t val) {
    unique = val;
  }

  bool operator == (const Statistic & rhs) const
  {
    if (!(total == rhs.total))
      return false;
    if (!(unique == rhs.unique))
      return false;
    return true;
  }
  bool operator != (const Statistic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Statistic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Statistic &a, Statistic &b);

typedef struct _RangeBound__isset {
  _RangeBound__isset() : rowID(false) {}
  bool rowID;
} _RangeBound__isset;

class RangeBound {
 public:

  static const char* ascii_fingerprint; // = "9D71179D9CC54C80954B5F64B2A9E947";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x71,0x17,0x9D,0x9C,0xC5,0x4C,0x80,0x95,0x4B,0x5F,0x64,0xB2,0xA9,0xE9,0x47};

  RangeBound() : value(), inclusive(0), rowID() {
  }

  virtual ~RangeBound() throw() {}

  std::string value;
  bool inclusive;
  std::string rowID;

  _RangeBound__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_inclusive(const bool val) {
    inclusive = val;
  }

  void __set_rowID(const std::string& val) {
    rowID = val;
    __isset.rowID = true;
  }

  bool operator == (const RangeBound & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(inclusive == rhs.inclusive))
      return false;
    if (__isset.rowID != rhs.__isset.rowID)
      return false;
    else if (__isset.rowID && !(rowID == rhs.rowID))
      return false;
    return true;
  }
  bool operator != (const RangeBound &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeBound & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeBound &a, RangeBound &b);

typedef struct _RangeRequest__isset {
  _RangeRequest__isset() : first(false), last(false) {}
  bool first;
  bool last;
} _RangeRequest__isset;

class RangeRequest {
 public:

  static const char* ascii_fingerprint; // = "6DA53D6AD417E92FAC26EBB9A3A4F5BB";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xA5,0x3D,0x6A,0xD4,0x17,0xE9,0x2F,0xAC,0x26,0xEB,0xB9,0xA3,0xA4,0xF5,0xBB};

  RangeRequest() : limit(500), ascending(true) {
  }

  virtual ~RangeRequest() throw() {}

  int32_t limit;
  bool ascending;
  RangeBound first;
  RangeBound last;

  _RangeRequest__isset __isset;

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_ascending(const bool val) {
    ascending = val;
  }

  void __set_first(const RangeBound& val) {
    first = val;
    __isset.first = true;
  }

  void __set_last(const RangeBound& val) {
    last = val;
    __isset.last = true;
  }

  bool operator == (const RangeRequest & rhs) const
  {
    if (!(limit == rhs.limit))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (__isset.first != rhs.__isset.first)
      return false;
    else if (__isset.first && !(first == rhs.first))
      return false;
    if (__isset.last != rhs.__isset.last)
      return false;
    else if (__isset.last && !(last == rhs.last))
      return false;
    return true;
  }
  bool operator != (const RangeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeRequest &a, RangeRequest &b);


class ValueRows {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  ValueRows() : value() {
  }

  virtual ~ValueRows() throw() {}

  std::string value;
  std::vector<std::string>  rowIDs;

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_rowIDs(const std::vector<std::string> & val) {
    rowIDs = val;
  }

  bool operator == (const ValueRows & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(rowIDs == rhs.rowIDs))
      return false;
    return true;
  }
  bool operator != (const ValueRows &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueRows & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ValueRows &a, ValueRows &b);


class RangeResult {
 public:

  static const char* ascii_fingerprint; // = "35701C18CAAD9A6D5379929C792CFFB9";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x70,0x1C,0x18,0xCA,0xAD,0x9A,0x6D,0x53,0x79,0x92,0x9C,0x79,0x2C,0xFF,0xB9};

  RangeResult() : endOfRange(0), beginOfRange(0) {
  }

  virtual ~RangeResult() throw() {}

  ValueRowsList valueRowsList;
  bool endOfRange;
  bool beginOfRange;

  void __set_valueRowsList(const ValueRowsList& val) {
    valueRowsList = val;
  }

  void __set_endOfRange(const bool val) {
    endOfRange = val;
  }

  void __set_beginOfRange(const bool val) {
    beginOfRange = val;
  }

  bool operator == (const RangeResult & rhs) const
  {
    if (!(valueRowsList == rhs.valueRowsList))
      return false;
    if (!(endOfRange == rhs.endOfRange))
      return false;
    if (!(beginOfRange == rhs.beginOfRange))
      return false;
    return true;
  }
  bool operator != (const RangeResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeResult &a, RangeResult &b);

typedef struct _Query__isset {
  _Query__isset() : rowIDs(false), ranges(false) {}
  bool rowIDs;
  bool ranges;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "ACBB8261FB1752FEC255951E77ADC28F";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBB,0x82,0x61,0xFB,0x17,0x52,0xFE,0xC2,0x55,0x95,0x1E,0x77,0xAD,0xC2,0x8F};

  Query() {
  }

  virtual ~Query() throw() {}

  std::vector<std::string>  rowIDs;
  std::vector<RangeRequest>  ranges;

  _Query__isset __isset;

  void __set_rowIDs(const std::vector<std::string> & val) {
    rowIDs = val;
    __isset.rowIDs = true;
  }

  void __set_ranges(const std::vector<RangeRequest> & val) {
    ranges = val;
    __isset.ranges = true;
  }

  bool operator == (const Query & rhs) const
  {
    if (__isset.rowIDs != rhs.__isset.rowIDs)
      return false;
    else if (__isset.rowIDs && !(rowIDs == rhs.rowIDs))
      return false;
    if (__isset.ranges != rhs.__isset.ranges)
      return false;
    else if (__isset.ranges && !(ranges == rhs.ranges))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);

typedef struct _Answer__isset {
  _Answer__isset() : rowIDValues(false), rangeValues(false) {}
  bool rowIDValues;
  bool rangeValues;
} _Answer__isset;

class Answer {
 public:

  static const char* ascii_fingerprint; // = "07913048224474EEEB5D341EE66ECC37";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x91,0x30,0x48,0x22,0x44,0x74,0xEE,0xEB,0x5D,0x34,0x1E,0xE6,0x6E,0xCC,0x37};

  Answer() {
  }

  virtual ~Answer() throw() {}

  std::vector<std::string>  rowIDValues;
  std::vector<RangeResult>  rangeValues;

  _Answer__isset __isset;

  void __set_rowIDValues(const std::vector<std::string> & val) {
    rowIDValues = val;
    __isset.rowIDValues = true;
  }

  void __set_rangeValues(const std::vector<RangeResult> & val) {
    rangeValues = val;
    __isset.rangeValues = true;
  }

  bool operator == (const Answer & rhs) const
  {
    if (__isset.rowIDValues != rhs.__isset.rowIDValues)
      return false;
    else if (__isset.rowIDValues && !(rowIDValues == rhs.rowIDValues))
      return false;
    if (__isset.rangeValues != rhs.__isset.rangeValues)
      return false;
    else if (__isset.rangeValues && !(rangeValues == rhs.rangeValues))
      return false;
    return true;
  }
  bool operator != (const Answer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Answer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Answer &a, Answer &b);


class ReadResult {
 public:

  static const char* ascii_fingerprint; // = "E0979AC14FF7FD491002565C55191622";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x97,0x9A,0xC1,0x4F,0xF7,0xFD,0x49,0x10,0x02,0x56,0x5C,0x55,0x19,0x16,0x22};

  ReadResult() : revision(0) {
  }

  virtual ~ReadResult() throw() {}

  Answer answer;
  Revision revision;

  void __set_answer(const Answer& val) {
    answer = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const ReadResult & rhs) const
  {
    if (!(answer == rhs.answer))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ReadResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReadResult &a, ReadResult &b);

typedef struct _NotLatest__isset {
  _NotLatest__isset() : latest(false) {}
  bool latest;
} _NotLatest__isset;

class NotLatest : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  NotLatest() : latest(0) {
  }

  virtual ~NotLatest() throw() {}

  Revision latest;

  _NotLatest__isset __isset;

  void __set_latest(const Revision val) {
    latest = val;
  }

  bool operator == (const NotLatest & rhs) const
  {
    if (!(latest == rhs.latest))
      return false;
    return true;
  }
  bool operator != (const NotLatest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotLatest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotLatest &a, NotLatest &b);

typedef struct _Conflict__isset {
  _Conflict__isset() : details(false), columnIDs(false) {}
  bool details;
  bool columnIDs;
} _Conflict__isset;

class Conflict : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "920F6571EE6C0CF61556A788D6042213";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x0F,0x65,0x71,0xEE,0x6C,0x0C,0xF6,0x15,0x56,0xA7,0x88,0xD6,0x04,0x22,0x13};

  Conflict() : details() {
  }

  virtual ~Conflict() throw() {}

  std::string details;
  std::vector<ColumnID>  columnIDs;

  _Conflict__isset __isset;

  void __set_details(const std::string& val) {
    details = val;
  }

  void __set_columnIDs(const std::vector<ColumnID> & val) {
    columnIDs = val;
  }

  bool operator == (const Conflict & rhs) const
  {
    if (!(details == rhs.details))
      return false;
    if (!(columnIDs == rhs.columnIDs))
      return false;
    return true;
  }
  bool operator != (const Conflict &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conflict & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Conflict &a, Conflict &b);

typedef struct _BeyondHistory__isset {
  _BeyondHistory__isset() : minHistory(false) {}
  bool minHistory;
} _BeyondHistory__isset;

class BeyondHistory : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  BeyondHistory() : minHistory(0) {
  }

  virtual ~BeyondHistory() throw() {}

  Revision minHistory;

  _BeyondHistory__isset __isset;

  void __set_minHistory(const Revision val) {
    minHistory = val;
  }

  bool operator == (const BeyondHistory & rhs) const
  {
    if (!(minHistory == rhs.minHistory))
      return false;
    return true;
  }
  bool operator != (const BeyondHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeyondHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BeyondHistory &a, BeyondHistory &b);

typedef struct _LockExpired__isset {
  _LockExpired__isset() : lockID(false) {}
  bool lockID;
} _LockExpired__isset;

class LockExpired : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  LockExpired() : lockID(0) {
  }

  virtual ~LockExpired() throw() {}

  LockID lockID;

  _LockExpired__isset __isset;

  void __set_lockID(const LockID val) {
    lockID = val;
  }

  bool operator == (const LockExpired & rhs) const
  {
    if (!(lockID == rhs.lockID))
      return false;
    return true;
  }
  bool operator != (const LockExpired &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockExpired & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockExpired &a, LockExpired &b);


class LockTimedOut : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  LockTimedOut() {
  }

  virtual ~LockTimedOut() throw() {}


  bool operator == (const LockTimedOut & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LockTimedOut &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockTimedOut & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockTimedOut &a, LockTimedOut &b);

} // namespace

#endif
