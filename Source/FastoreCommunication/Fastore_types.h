/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Fastore_TYPES_H
#define Fastore_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace fastore {

struct RepositoryStatus {
  enum type {
    Loading = 1,
    Unloading = 2,
    Online = 3,
    Checkpointing = 4
  };
};

extern const std::map<int, const char*> _RepositoryStatus_VALUES_TO_NAMES;

struct HostStatus {
  enum type {
    Offline = 1,
    Online = 2,
    Unreachable = 3
  };
};

extern const std::map<int, const char*> _HostStatus_VALUES_TO_NAMES;

struct LockMode {
  enum type {
    Read = 1,
    Write = 2
  };
};

extern const std::map<int, const char*> _LockMode_VALUES_TO_NAMES;

typedef int64_t Revision;

typedef int32_t TopologyID;

typedef int32_t ColumnID;

typedef int32_t HostID;

typedef std::string HostAddress;

typedef int64_t LockID;

typedef std::string LockName;

typedef int32_t LockTimeout;

typedef std::map<ColumnID, class ColumnWrites>  Writes;

typedef std::vector<class ValueRows>  ValueRowsList;

typedef std::map<ColumnID, class Query>  Queries;

typedef std::map<class Query, class Answer>  Read;

typedef std::map<ColumnID, Read>  Reads;

typedef struct _Host__isset {
  _Host__isset() : ID(false), Address(false) {}
  bool ID;
  bool Address;
} _Host__isset;

class Host {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Host() : ID(0), Address() {
  }

  virtual ~Host() throw() {}

  HostID ID;
  HostAddress Address;

  _Host__isset __isset;

  void __set_ID(const HostID val) {
    ID = val;
  }

  void __set_Address(const HostAddress& val) {
    Address = val;
  }

  bool operator == (const Host & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Address == rhs.Address))
      return false;
    return true;
  }
  bool operator != (const Host &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Host & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Host &a, Host &b);

typedef struct _Repository__isset {
  _Repository__isset() : columnID(false), hostID(false) {}
  bool columnID;
  bool hostID;
} _Repository__isset;

class Repository {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Repository() : columnID(0), hostID(0) {
  }

  virtual ~Repository() throw() {}

  ColumnID columnID;
  HostID hostID;

  _Repository__isset __isset;

  void __set_columnID(const ColumnID val) {
    columnID = val;
  }

  void __set_hostID(const HostID val) {
    hostID = val;
  }

  bool operator == (const Repository & rhs) const
  {
    if (!(columnID == rhs.columnID))
      return false;
    if (!(hostID == rhs.hostID))
      return false;
    return true;
  }
  bool operator != (const Repository &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Repository & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Repository &a, Repository &b);

typedef struct _Topology__isset {
  _Topology__isset() : ID(false), Hosts(false), Repositories(false) {}
  bool ID;
  bool Hosts;
  bool Repositories;
} _Topology__isset;

class Topology {
 public:

  static const char* ascii_fingerprint; // = "D087BB3015A7C1BA44729FFF8D9C4426";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x87,0xBB,0x30,0x15,0xA7,0xC1,0xBA,0x44,0x72,0x9F,0xFF,0x8D,0x9C,0x44,0x26};

  Topology() : ID(0) {
  }

  virtual ~Topology() throw() {}

  TopologyID ID;
  std::set<Host>  Hosts;
  std::set<Repository>  Repositories;

  _Topology__isset __isset;

  void __set_ID(const TopologyID val) {
    ID = val;
  }

  void __set_Hosts(const std::set<Host> & val) {
    Hosts = val;
  }

  void __set_Repositories(const std::set<Repository> & val) {
    Repositories = val;
  }

  bool operator == (const Topology & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Hosts == rhs.Hosts))
      return false;
    if (!(Repositories == rhs.Repositories))
      return false;
    return true;
  }
  bool operator != (const Topology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Topology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Topology &a, Topology &b);

typedef struct _TopologyResult__isset {
  _TopologyResult__isset() : topology(false), revision(false) {}
  bool topology;
  bool revision;
} _TopologyResult__isset;

class TopologyResult {
 public:

  static const char* ascii_fingerprint; // = "9EE0432C90FEA50EA66B7F2398815ABF";
  static const uint8_t binary_fingerprint[16]; // = {0x9E,0xE0,0x43,0x2C,0x90,0xFE,0xA5,0x0E,0xA6,0x6B,0x7F,0x23,0x98,0x81,0x5A,0xBF};

  TopologyResult() : revision(0) {
  }

  virtual ~TopologyResult() throw() {}

  Topology topology;
  Revision revision;

  _TopologyResult__isset __isset;

  void __set_topology(const Topology& val) {
    topology = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const TopologyResult & rhs) const
  {
    if (!(topology == rhs.topology))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const TopologyResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopologyResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopologyResult &a, TopologyResult &b);

typedef struct _HostReport__isset {
  _HostReport__isset() : Status(false), RepositoryStatus(false) {}
  bool Status;
  bool RepositoryStatus;
} _HostReport__isset;

class HostReport {
 public:

  static const char* ascii_fingerprint; // = "7402C27C789620E471CF3FE2CB95E6AF";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x02,0xC2,0x7C,0x78,0x96,0x20,0xE4,0x71,0xCF,0x3F,0xE2,0xCB,0x95,0xE6,0xAF};

  HostReport() : Status((HostStatus::type)0) {
  }

  virtual ~HostReport() throw() {}

  HostStatus::type Status;
  std::map<ColumnID, RepositoryStatus::type>  RepositoryStatus;

  _HostReport__isset __isset;

  void __set_Status(const HostStatus::type val) {
    Status = val;
  }

  void __set_RepositoryStatus(const std::map<ColumnID, RepositoryStatus::type> & val) {
    RepositoryStatus = val;
  }

  bool operator == (const HostReport & rhs) const
  {
    if (!(Status == rhs.Status))
      return false;
    if (!(RepositoryStatus == rhs.RepositoryStatus))
      return false;
    return true;
  }
  bool operator != (const HostReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostReport &a, HostReport &b);

typedef struct _TopologyReport__isset {
  _TopologyReport__isset() : topologyID(false), Hosts(false), revision(true) {}
  bool topologyID;
  bool Hosts;
  bool revision;
} _TopologyReport__isset;

class TopologyReport {
 public:

  static const char* ascii_fingerprint; // = "E6AEC4F867448704EF06F6B449656C5E";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xAE,0xC4,0xF8,0x67,0x44,0x87,0x04,0xEF,0x06,0xF6,0xB4,0x49,0x65,0x6C,0x5E};

  TopologyReport() : topologyID(0), revision(1LL) {
  }

  virtual ~TopologyReport() throw() {}

  TopologyID topologyID;
  std::map<HostID, HostReport>  Hosts;
  Revision revision;

  _TopologyReport__isset __isset;

  void __set_topologyID(const TopologyID val) {
    topologyID = val;
  }

  void __set_Hosts(const std::map<HostID, HostReport> & val) {
    Hosts = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const TopologyReport & rhs) const
  {
    if (!(topologyID == rhs.topologyID))
      return false;
    if (!(Hosts == rhs.Hosts))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const TopologyReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopologyReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TopologyReport &a, TopologyReport &b);

typedef struct _TransactionID__isset {
  _TransactionID__isset() : revision(false), Key(false) {}
  bool revision;
  bool Key;
} _TransactionID__isset;

class TransactionID {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TransactionID() : revision(0), Key(0) {
  }

  virtual ~TransactionID() throw() {}

  Revision revision;
  int64_t Key;

  _TransactionID__isset __isset;

  void __set_revision(const Revision val) {
    revision = val;
  }

  void __set_Key(const int64_t val) {
    Key = val;
  }

  bool operator == (const TransactionID & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(Key == rhs.Key))
      return false;
    return true;
  }
  bool operator != (const TransactionID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TransactionID &a, TransactionID &b);

typedef struct _Include__isset {
  _Include__isset() : RowID(false), Value(false) {}
  bool RowID;
  bool Value;
} _Include__isset;

class Include {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Include() : RowID(), Value() {
  }

  virtual ~Include() throw() {}

  std::string RowID;
  std::string Value;

  _Include__isset __isset;

  void __set_RowID(const std::string& val) {
    RowID = val;
  }

  void __set_Value(const std::string& val) {
    Value = val;
  }

  bool operator == (const Include & rhs) const
  {
    if (!(RowID == rhs.RowID))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const Include &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Include & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Include &a, Include &b);

typedef struct _Exclude__isset {
  _Exclude__isset() : RowID(false) {}
  bool RowID;
} _Exclude__isset;

class Exclude {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Exclude() : RowID() {
  }

  virtual ~Exclude() throw() {}

  std::string RowID;

  _Exclude__isset __isset;

  void __set_RowID(const std::string& val) {
    RowID = val;
  }

  bool operator == (const Exclude & rhs) const
  {
    if (!(RowID == rhs.RowID))
      return false;
    return true;
  }
  bool operator != (const Exclude &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exclude & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Exclude &a, Exclude &b);

typedef struct _ColumnWrites__isset {
  _ColumnWrites__isset() : Includes(false), Excludes(false) {}
  bool Includes;
  bool Excludes;
} _ColumnWrites__isset;

class ColumnWrites {
 public:

  static const char* ascii_fingerprint; // = "DFEC8D8F713261375CCB5EAFB2655E05";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xEC,0x8D,0x8F,0x71,0x32,0x61,0x37,0x5C,0xCB,0x5E,0xAF,0xB2,0x65,0x5E,0x05};

  ColumnWrites() {
  }

  virtual ~ColumnWrites() throw() {}

  std::set<Include>  Includes;
  std::set<Exclude>  Excludes;

  _ColumnWrites__isset __isset;

  void __set_Includes(const std::set<Include> & val) {
    Includes = val;
  }

  void __set_Excludes(const std::set<Exclude> & val) {
    Excludes = val;
  }

  bool operator == (const ColumnWrites & rhs) const
  {
    if (!(Includes == rhs.Includes))
      return false;
    if (!(Excludes == rhs.Excludes))
      return false;
    return true;
  }
  bool operator != (const ColumnWrites &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnWrites & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnWrites &a, ColumnWrites &b);

typedef struct _Statistic__isset {
  _Statistic__isset() : Total(false), Unique(false) {}
  bool Total;
  bool Unique;
} _Statistic__isset;

class Statistic {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  Statistic() : Total(0), Unique(0) {
  }

  virtual ~Statistic() throw() {}

  int64_t Total;
  int64_t Unique;

  _Statistic__isset __isset;

  void __set_Total(const int64_t val) {
    Total = val;
  }

  void __set_Unique(const int64_t val) {
    Unique = val;
  }

  bool operator == (const Statistic & rhs) const
  {
    if (!(Total == rhs.Total))
      return false;
    if (!(Unique == rhs.Unique))
      return false;
    return true;
  }
  bool operator != (const Statistic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Statistic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Statistic &a, Statistic &b);

typedef struct _RangeBound__isset {
  _RangeBound__isset() : Value(false), Inclusive(false), RowID(false) {}
  bool Value;
  bool Inclusive;
  bool RowID;
} _RangeBound__isset;

class RangeBound {
 public:

  static const char* ascii_fingerprint; // = "9D71179D9CC54C80954B5F64B2A9E947";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x71,0x17,0x9D,0x9C,0xC5,0x4C,0x80,0x95,0x4B,0x5F,0x64,0xB2,0xA9,0xE9,0x47};

  RangeBound() : Value(), Inclusive(0), RowID() {
  }

  virtual ~RangeBound() throw() {}

  std::string Value;
  bool Inclusive;
  std::string RowID;

  _RangeBound__isset __isset;

  void __set_Value(const std::string& val) {
    Value = val;
  }

  void __set_Inclusive(const bool val) {
    Inclusive = val;
  }

  void __set_RowID(const std::string& val) {
    RowID = val;
    __isset.RowID = true;
  }

  bool operator == (const RangeBound & rhs) const
  {
    if (!(Value == rhs.Value))
      return false;
    if (!(Inclusive == rhs.Inclusive))
      return false;
    if (__isset.RowID != rhs.__isset.RowID)
      return false;
    else if (__isset.RowID && !(RowID == rhs.RowID))
      return false;
    return true;
  }
  bool operator != (const RangeBound &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeBound & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeBound &a, RangeBound &b);

typedef struct _RangeRequest__isset {
  _RangeRequest__isset() : Limit(true), Ascending(true), Start(false), End(false) {}
  bool Limit;
  bool Ascending;
  bool Start;
  bool End;
} _RangeRequest__isset;

class RangeRequest {
 public:

  static const char* ascii_fingerprint; // = "6DA53D6AD417E92FAC26EBB9A3A4F5BB";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xA5,0x3D,0x6A,0xD4,0x17,0xE9,0x2F,0xAC,0x26,0xEB,0xB9,0xA3,0xA4,0xF5,0xBB};

  RangeRequest() : Limit(500), Ascending(true) {
  }

  virtual ~RangeRequest() throw() {}

  int32_t Limit;
  bool Ascending;
  RangeBound Start;
  RangeBound End;

  _RangeRequest__isset __isset;

  void __set_Limit(const int32_t val) {
    Limit = val;
  }

  void __set_Ascending(const bool val) {
    Ascending = val;
  }

  void __set_Start(const RangeBound& val) {
    Start = val;
    __isset.Start = true;
  }

  void __set_End(const RangeBound& val) {
    End = val;
    __isset.End = true;
  }

  bool operator == (const RangeRequest & rhs) const
  {
    if (!(Limit == rhs.Limit))
      return false;
    if (!(Ascending == rhs.Ascending))
      return false;
    if (__isset.Start != rhs.__isset.Start)
      return false;
    else if (__isset.Start && !(Start == rhs.Start))
      return false;
    if (__isset.End != rhs.__isset.End)
      return false;
    else if (__isset.End && !(End == rhs.End))
      return false;
    return true;
  }
  bool operator != (const RangeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeRequest &a, RangeRequest &b);

typedef struct _ValueRows__isset {
  _ValueRows__isset() : Value(false), RowIDs(false) {}
  bool Value;
  bool RowIDs;
} _ValueRows__isset;

class ValueRows {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  ValueRows() : Value() {
  }

  virtual ~ValueRows() throw() {}

  std::string Value;
  std::vector<std::string>  RowIDs;

  _ValueRows__isset __isset;

  void __set_Value(const std::string& val) {
    Value = val;
  }

  void __set_RowIDs(const std::vector<std::string> & val) {
    RowIDs = val;
  }

  bool operator == (const ValueRows & rhs) const
  {
    if (!(Value == rhs.Value))
      return false;
    if (!(RowIDs == rhs.RowIDs))
      return false;
    return true;
  }
  bool operator != (const ValueRows &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueRows & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ValueRows &a, ValueRows &b);

typedef struct _RangeResult__isset {
  _RangeResult__isset() : valueRowsList(false), EndOfRange(false) {}
  bool valueRowsList;
  bool EndOfRange;
} _RangeResult__isset;

class RangeResult {
 public:

  static const char* ascii_fingerprint; // = "466F20C01BC68974A3A89E63D894331C";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x6F,0x20,0xC0,0x1B,0xC6,0x89,0x74,0xA3,0xA8,0x9E,0x63,0xD8,0x94,0x33,0x1C};

  RangeResult() : EndOfRange(0) {
  }

  virtual ~RangeResult() throw() {}

  ValueRowsList valueRowsList;
  bool EndOfRange;

  _RangeResult__isset __isset;

  void __set_valueRowsList(const ValueRowsList& val) {
    valueRowsList = val;
  }

  void __set_EndOfRange(const bool val) {
    EndOfRange = val;
  }

  bool operator == (const RangeResult & rhs) const
  {
    if (!(valueRowsList == rhs.valueRowsList))
      return false;
    if (!(EndOfRange == rhs.EndOfRange))
      return false;
    return true;
  }
  bool operator != (const RangeResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RangeResult &a, RangeResult &b);

typedef struct _Query__isset {
  _Query__isset() : RowIDs(false), Ranges(false) {}
  bool RowIDs;
  bool Ranges;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "EC0678E28E5088F474E56302FF4C2884";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x06,0x78,0xE2,0x8E,0x50,0x88,0xF4,0x74,0xE5,0x63,0x02,0xFF,0x4C,0x28,0x84};

  Query() {
  }

  virtual ~Query() throw() {}

  std::vector<std::string>  RowIDs;
  std::vector<RangeRequest>  Ranges;

  _Query__isset __isset;

  void __set_RowIDs(const std::vector<std::string> & val) {
    RowIDs = val;
  }

  void __set_Ranges(const std::vector<RangeRequest> & val) {
    Ranges = val;
  }

  bool operator == (const Query & rhs) const
  {
    if (!(RowIDs == rhs.RowIDs))
      return false;
    if (!(Ranges == rhs.Ranges))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);

typedef struct _Answer__isset {
  _Answer__isset() : RowIDValues(false), RangeValues(false) {}
  bool RowIDValues;
  bool RangeValues;
} _Answer__isset;

class Answer {
 public:

  static const char* ascii_fingerprint; // = "D36BF0BC25155834835044274D0ED190";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x6B,0xF0,0xBC,0x25,0x15,0x58,0x34,0x83,0x50,0x44,0x27,0x4D,0x0E,0xD1,0x90};

  Answer() {
  }

  virtual ~Answer() throw() {}

  std::vector<std::string>  RowIDValues;
  std::vector<RangeResult>  RangeValues;

  _Answer__isset __isset;

  void __set_RowIDValues(const std::vector<std::string> & val) {
    RowIDValues = val;
  }

  void __set_RangeValues(const std::vector<RangeResult> & val) {
    RangeValues = val;
  }

  bool operator == (const Answer & rhs) const
  {
    if (!(RowIDValues == rhs.RowIDValues))
      return false;
    if (!(RangeValues == rhs.RangeValues))
      return false;
    return true;
  }
  bool operator != (const Answer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Answer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Answer &a, Answer &b);

typedef struct _ReadResults__isset {
  _ReadResults__isset() : Answers(false), revision(false) {}
  bool Answers;
  bool revision;
} _ReadResults__isset;

class ReadResults {
 public:

  static const char* ascii_fingerprint; // = "53FF50347BF983624C055D1DF3E8FA41";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xFF,0x50,0x34,0x7B,0xF9,0x83,0x62,0x4C,0x05,0x5D,0x1D,0xF3,0xE8,0xFA,0x41};

  ReadResults() : revision(0) {
  }

  virtual ~ReadResults() throw() {}

  std::map<ColumnID, Answer>  Answers;
  Revision revision;

  _ReadResults__isset __isset;

  void __set_Answers(const std::map<ColumnID, Answer> & val) {
    Answers = val;
  }

  void __set_revision(const Revision val) {
    revision = val;
  }

  bool operator == (const ReadResults & rhs) const
  {
    if (!(Answers == rhs.Answers))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ReadResults &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadResults & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReadResults &a, ReadResults &b);

typedef struct _NotLatest__isset {
  _NotLatest__isset() : Latest(false) {}
  bool Latest;
} _NotLatest__isset;

class NotLatest : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  NotLatest() : Latest(0) {
  }

  virtual ~NotLatest() throw() {}

  Revision Latest;

  _NotLatest__isset __isset;

  void __set_Latest(const Revision val) {
    Latest = val;
  }

  bool operator == (const NotLatest & rhs) const
  {
    if (!(Latest == rhs.Latest))
      return false;
    return true;
  }
  bool operator != (const NotLatest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotLatest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotLatest &a, NotLatest &b);

typedef struct _Conflict__isset {
  _Conflict__isset() : Details(false) {}
  bool Details;
} _Conflict__isset;

class Conflict : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Conflict() : Details() {
  }

  virtual ~Conflict() throw() {}

  std::string Details;

  _Conflict__isset __isset;

  void __set_Details(const std::string& val) {
    Details = val;
  }

  bool operator == (const Conflict & rhs) const
  {
    if (!(Details == rhs.Details))
      return false;
    return true;
  }
  bool operator != (const Conflict &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conflict & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Conflict &a, Conflict &b);

typedef struct _BeyondHistory__isset {
  _BeyondHistory__isset() : MinHistory(false) {}
  bool MinHistory;
} _BeyondHistory__isset;

class BeyondHistory : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  BeyondHistory() : MinHistory(0) {
  }

  virtual ~BeyondHistory() throw() {}

  Revision MinHistory;

  _BeyondHistory__isset __isset;

  void __set_MinHistory(const Revision val) {
    MinHistory = val;
  }

  bool operator == (const BeyondHistory & rhs) const
  {
    if (!(MinHistory == rhs.MinHistory))
      return false;
    return true;
  }
  bool operator != (const BeyondHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeyondHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BeyondHistory &a, BeyondHistory &b);

typedef struct _LockExpired__isset {
  _LockExpired__isset() : lockID(false) {}
  bool lockID;
} _LockExpired__isset;

class LockExpired : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  LockExpired() : lockID(0) {
  }

  virtual ~LockExpired() throw() {}

  LockID lockID;

  _LockExpired__isset __isset;

  void __set_lockID(const LockID val) {
    lockID = val;
  }

  bool operator == (const LockExpired & rhs) const
  {
    if (!(lockID == rhs.lockID))
      return false;
    return true;
  }
  bool operator != (const LockExpired &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockExpired & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockExpired &a, LockExpired &b);


class LockTimedOut : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  LockTimedOut() {
  }

  virtual ~LockTimedOut() throw() {}


  bool operator == (const LockTimedOut & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LockTimedOut &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockTimedOut & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockTimedOut &a, LockTimedOut &b);

} // namespace

#endif
