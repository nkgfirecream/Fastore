// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::fastore;

class ServiceHandler : virtual public ServiceIf {
 public:
  ServiceHandler() {
    // Your initialization goes here
  }

  void getTopology(TopologyResult& _return) {
    // Your implementation goes here
    printf("getTopology\n");
  }

  Revision prepareTopology(const TransactionID& transactionID, const Topology& topology) {
    // Your implementation goes here
    printf("prepareTopology\n");
  }

  void commitTopology(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("commitTopology\n");
  }

  void rollbackTopology(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("rollbackTopology\n");
  }

  void getTopologyReport(TopologyReport& _return) {
    // Your implementation goes here
    printf("getTopologyReport\n");
  }

  void getReport(HostReport& _return) {
    // Your implementation goes here
    printf("getReport\n");
  }

  Revision prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    // Your implementation goes here
    printf("prepare\n");
  }

  void apply(TransactionID& _return, const TransactionID& transactionID, const Writes& writes) {
    // Your implementation goes here
    printf("apply\n");
  }

  void commit(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("commit\n");
  }

  void rollback(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("rollback\n");
  }

  void flush(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("flush\n");
  }

  bool doesConflict(const Reads& reads, const Revision source, const Revision target) {
    // Your implementation goes here
    printf("doesConflict\n");
  }

  void update(TransactionID& _return, const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    // Your implementation goes here
    printf("update\n");
  }

  void transgrade(Reads& _return, const Reads& reads, const Revision source, const Revision target) {
    // Your implementation goes here
    printf("transgrade\n");
  }

  LockID acquireLock(const LockName& name, const LockMode::type mode, const LockTimeout timeout) {
    // Your implementation goes here
    printf("acquireLock\n");
  }

  void keepLock(const LockID lockID) {
    // Your implementation goes here
    printf("keepLock\n");
  }

  void escalateLock(const LockID lockID, const LockTimeout timeout) {
    // Your implementation goes here
    printf("escalateLock\n");
  }

  void releaseLock(const LockID lockID) {
    // Your implementation goes here
    printf("releaseLock\n");
  }

  void query(ReadResults& _return, const Queries& queries) {
    // Your implementation goes here
    printf("query\n");
  }

  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) {
    // Your implementation goes here
    printf("getStatistics\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ServiceHandler> handler(new ServiceHandler());
  shared_ptr<TProcessor> processor(new ServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

