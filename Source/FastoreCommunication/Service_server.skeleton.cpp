// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::fastore;

class ServiceHandler : virtual public ServiceIf {
 public:
  ServiceHandler() {
    // Your initialization goes here
  }

  void GetTopology(TopologyResult& _return) {
    // Your implementation goes here
    printf("GetTopology\n");
  }

  Revision PrepareTopology(const TransactionID& transactionID, const Topology& topology) {
    // Your implementation goes here
    printf("PrepareTopology\n");
  }

  void CommitTopology(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("CommitTopology\n");
  }

  void RollbackTopology(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("RollbackTopology\n");
  }

  void GetTopologyReport(TopologyReport& _return) {
    // Your implementation goes here
    printf("GetTopologyReport\n");
  }

  void GetReport(HostReport& _return) {
    // Your implementation goes here
    printf("GetReport\n");
  }

  Revision Prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    // Your implementation goes here
    printf("Prepare\n");
  }

  void Apply(TransactionID& _return, const TransactionID& transactionID, const Writes& writes) {
    // Your implementation goes here
    printf("Apply\n");
  }

  void Commit(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("Commit\n");
  }

  void Rollback(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("Rollback\n");
  }

  void Flush(const TransactionID& transactionID) {
    // Your implementation goes here
    printf("Flush\n");
  }

  bool DoesConflict(const Reads& reads, const Revision source, const Revision target) {
    // Your implementation goes here
    printf("DoesConflict\n");
  }

  void Update(TransactionID& _return, const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    // Your implementation goes here
    printf("Update\n");
  }

  void Transgrade(Reads& _return, const Reads& reads, const Revision source, const Revision target) {
    // Your implementation goes here
    printf("Transgrade\n");
  }

  LockID AcquireLock(const LockName& name, const LockMode::type mode, const LockTimeout timeout) {
    // Your implementation goes here
    printf("AcquireLock\n");
  }

  void KeepLock(const LockID lockID) {
    // Your implementation goes here
    printf("KeepLock\n");
  }

  void EscalateLock(const LockID lockID, const LockTimeout timeout) {
    // Your implementation goes here
    printf("EscalateLock\n");
  }

  void ReleaseLock(const LockID lockID) {
    // Your implementation goes here
    printf("ReleaseLock\n");
  }

  void Query(ReadResults& _return, const Queries& queries) {
    // Your implementation goes here
    printf("Query\n");
  }

  void GetStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) {
    // Your implementation goes here
    printf("GetStatistics\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ServiceHandler> handler(new ServiceHandler());
  shared_ptr<TProcessor> processor(new ServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

