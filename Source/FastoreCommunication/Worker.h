/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Worker_H
#define Worker_H

#include <thrift/TDispatchProcessor.h>
#include "Comm_types.h"

namespace fastore { namespace communication {

class WorkerIf {
 public:
  virtual ~WorkerIf() {}
  virtual void getState(WorkerState& _return) = 0;
  virtual Revision prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads) = 0;
  virtual void apply(TransactionID& _return, const TransactionID& transactionID, const Writes& writes) = 0;
  virtual void commit(const TransactionID& transactionID) = 0;
  virtual void rollback(const TransactionID& transactionID) = 0;
  virtual void flush(const TransactionID& transactionID) = 0;
  virtual bool doesConflict(const Reads& reads, const Revision source, const Revision target) = 0;
  virtual void update(TransactionID& _return, const TransactionID& transactionID, const Writes& writes, const Reads& reads) = 0;
  virtual void transgrade(Reads& _return, const Reads& reads, const Revision source, const Revision target) = 0;
  virtual void query(ReadResults& _return, const Queries& queries) = 0;
  virtual void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) = 0;
};

class WorkerIfFactory {
 public:
  typedef WorkerIf Handler;

  virtual ~WorkerIfFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WorkerIf* /* handler */) = 0;
};

class WorkerIfSingletonFactory : virtual public WorkerIfFactory {
 public:
  WorkerIfSingletonFactory(const boost::shared_ptr<WorkerIf>& iface) : iface_(iface) {}
  virtual ~WorkerIfSingletonFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<WorkerIf> iface_;
};

class WorkerNull : virtual public WorkerIf {
 public:
  virtual ~WorkerNull() {}
  void getState(WorkerState& /* _return */) {
    return;
  }
  Revision prepare(const TransactionID& /* transactionID */, const Writes& /* writes */, const Reads& /* reads */) {
    Revision _return = 0;
    return _return;
  }
  void apply(TransactionID& /* _return */, const TransactionID& /* transactionID */, const Writes& /* writes */) {
    return;
  }
  void commit(const TransactionID& /* transactionID */) {
    return;
  }
  void rollback(const TransactionID& /* transactionID */) {
    return;
  }
  void flush(const TransactionID& /* transactionID */) {
    return;
  }
  bool doesConflict(const Reads& /* reads */, const Revision /* source */, const Revision /* target */) {
    bool _return = false;
    return _return;
  }
  void update(TransactionID& /* _return */, const TransactionID& /* transactionID */, const Writes& /* writes */, const Reads& /* reads */) {
    return;
  }
  void transgrade(Reads& /* _return */, const Reads& /* reads */, const Revision /* source */, const Revision /* target */) {
    return;
  }
  void query(ReadResults& /* _return */, const Queries& /* queries */) {
    return;
  }
  void getStatistics(std::vector<Statistic> & /* _return */, const std::vector<ColumnID> & /* columnIDs */) {
    return;
  }
};


class Worker_getState_args {
 public:

  Worker_getState_args() {
  }

  virtual ~Worker_getState_args() throw() {}


  bool operator == (const Worker_getState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_getState_pargs {
 public:


  virtual ~Worker_getState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getState_result__isset {
  _Worker_getState_result__isset() : success(false) {}
  bool success;
} _Worker_getState_result__isset;

class Worker_getState_result {
 public:

  Worker_getState_result() {
  }

  virtual ~Worker_getState_result() throw() {}

  WorkerState success;

  _Worker_getState_result__isset __isset;

  void __set_success(const WorkerState& val) {
    success = val;
  }

  bool operator == (const Worker_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getState_presult__isset {
  _Worker_getState_presult__isset() : success(false) {}
  bool success;
} _Worker_getState_presult__isset;

class Worker_getState_presult {
 public:


  virtual ~Worker_getState_presult() throw() {}

  WorkerState* success;

  _Worker_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_prepare_args__isset {
  _Worker_prepare_args__isset() : transactionID(false), writes(false), reads(false) {}
  bool transactionID;
  bool writes;
  bool reads;
} _Worker_prepare_args__isset;

class Worker_prepare_args {
 public:

  Worker_prepare_args() {
  }

  virtual ~Worker_prepare_args() throw() {}

  TransactionID transactionID;
  Writes writes;
  Reads reads;

  _Worker_prepare_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  void __set_writes(const Writes& val) {
    writes = val;
  }

  void __set_reads(const Reads& val) {
    reads = val;
  }

  bool operator == (const Worker_prepare_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(writes == rhs.writes))
      return false;
    if (!(reads == rhs.reads))
      return false;
    return true;
  }
  bool operator != (const Worker_prepare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_prepare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_prepare_pargs {
 public:


  virtual ~Worker_prepare_pargs() throw() {}

  const TransactionID* transactionID;
  const Writes* writes;
  const Reads* reads;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_prepare_result__isset {
  _Worker_prepare_result__isset() : success(false), notLatest(false), alreadyPending(false) {}
  bool success;
  bool notLatest;
  bool alreadyPending;
} _Worker_prepare_result__isset;

class Worker_prepare_result {
 public:

  Worker_prepare_result() : success(0) {
  }

  virtual ~Worker_prepare_result() throw() {}

  Revision success;
  NotLatest notLatest;
  AlreadyPending alreadyPending;

  _Worker_prepare_result__isset __isset;

  void __set_success(const Revision val) {
    success = val;
  }

  void __set_notLatest(const NotLatest& val) {
    notLatest = val;
  }

  void __set_alreadyPending(const AlreadyPending& val) {
    alreadyPending = val;
  }

  bool operator == (const Worker_prepare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(notLatest == rhs.notLatest))
      return false;
    if (!(alreadyPending == rhs.alreadyPending))
      return false;
    return true;
  }
  bool operator != (const Worker_prepare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_prepare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_prepare_presult__isset {
  _Worker_prepare_presult__isset() : success(false), notLatest(false), alreadyPending(false) {}
  bool success;
  bool notLatest;
  bool alreadyPending;
} _Worker_prepare_presult__isset;

class Worker_prepare_presult {
 public:


  virtual ~Worker_prepare_presult() throw() {}

  Revision* success;
  NotLatest notLatest;
  AlreadyPending alreadyPending;

  _Worker_prepare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_apply_args__isset {
  _Worker_apply_args__isset() : transactionID(false), writes(false) {}
  bool transactionID;
  bool writes;
} _Worker_apply_args__isset;

class Worker_apply_args {
 public:

  Worker_apply_args() {
  }

  virtual ~Worker_apply_args() throw() {}

  TransactionID transactionID;
  Writes writes;

  _Worker_apply_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  void __set_writes(const Writes& val) {
    writes = val;
  }

  bool operator == (const Worker_apply_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(writes == rhs.writes))
      return false;
    return true;
  }
  bool operator != (const Worker_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_apply_pargs {
 public:


  virtual ~Worker_apply_pargs() throw() {}

  const TransactionID* transactionID;
  const Writes* writes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_apply_result__isset {
  _Worker_apply_result__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_apply_result__isset;

class Worker_apply_result {
 public:

  Worker_apply_result() {
  }

  virtual ~Worker_apply_result() throw() {}

  TransactionID success;
  AlreadyPending alreadyPending;

  _Worker_apply_result__isset __isset;

  void __set_success(const TransactionID& val) {
    success = val;
  }

  void __set_alreadyPending(const AlreadyPending& val) {
    alreadyPending = val;
  }

  bool operator == (const Worker_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(alreadyPending == rhs.alreadyPending))
      return false;
    return true;
  }
  bool operator != (const Worker_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_apply_presult__isset {
  _Worker_apply_presult__isset() : success(false), alreadyPending(false) {}
  bool success;
  bool alreadyPending;
} _Worker_apply_presult__isset;

class Worker_apply_presult {
 public:


  virtual ~Worker_apply_presult() throw() {}

  TransactionID* success;
  AlreadyPending alreadyPending;

  _Worker_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_commit_args__isset {
  _Worker_commit_args__isset() : transactionID(false) {}
  bool transactionID;
} _Worker_commit_args__isset;

class Worker_commit_args {
 public:

  Worker_commit_args() {
  }

  virtual ~Worker_commit_args() throw() {}

  TransactionID transactionID;

  _Worker_commit_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  bool operator == (const Worker_commit_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    return true;
  }
  bool operator != (const Worker_commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_commit_pargs {
 public:


  virtual ~Worker_commit_pargs() throw() {}

  const TransactionID* transactionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_rollback_args__isset {
  _Worker_rollback_args__isset() : transactionID(false) {}
  bool transactionID;
} _Worker_rollback_args__isset;

class Worker_rollback_args {
 public:

  Worker_rollback_args() {
  }

  virtual ~Worker_rollback_args() throw() {}

  TransactionID transactionID;

  _Worker_rollback_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  bool operator == (const Worker_rollback_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    return true;
  }
  bool operator != (const Worker_rollback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_rollback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_rollback_pargs {
 public:


  virtual ~Worker_rollback_pargs() throw() {}

  const TransactionID* transactionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_flush_args__isset {
  _Worker_flush_args__isset() : transactionID(false) {}
  bool transactionID;
} _Worker_flush_args__isset;

class Worker_flush_args {
 public:

  Worker_flush_args() {
  }

  virtual ~Worker_flush_args() throw() {}

  TransactionID transactionID;

  _Worker_flush_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  bool operator == (const Worker_flush_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    return true;
  }
  bool operator != (const Worker_flush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_flush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_flush_pargs {
 public:


  virtual ~Worker_flush_pargs() throw() {}

  const TransactionID* transactionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_flush_result {
 public:

  Worker_flush_result() {
  }

  virtual ~Worker_flush_result() throw() {}


  bool operator == (const Worker_flush_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_flush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_flush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_flush_presult {
 public:


  virtual ~Worker_flush_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_doesConflict_args__isset {
  _Worker_doesConflict_args__isset() : reads(false), source(false), target(false) {}
  bool reads;
  bool source;
  bool target;
} _Worker_doesConflict_args__isset;

class Worker_doesConflict_args {
 public:

  Worker_doesConflict_args() : source(0), target(0) {
  }

  virtual ~Worker_doesConflict_args() throw() {}

  Reads reads;
  Revision source;
  Revision target;

  _Worker_doesConflict_args__isset __isset;

  void __set_reads(const Reads& val) {
    reads = val;
  }

  void __set_source(const Revision val) {
    source = val;
  }

  void __set_target(const Revision val) {
    target = val;
  }

  bool operator == (const Worker_doesConflict_args & rhs) const
  {
    if (!(reads == rhs.reads))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const Worker_doesConflict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_doesConflict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_doesConflict_pargs {
 public:


  virtual ~Worker_doesConflict_pargs() throw() {}

  const Reads* reads;
  const Revision* source;
  const Revision* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_doesConflict_result__isset {
  _Worker_doesConflict_result__isset() : success(false), beyondHistory(false) {}
  bool success;
  bool beyondHistory;
} _Worker_doesConflict_result__isset;

class Worker_doesConflict_result {
 public:

  Worker_doesConflict_result() : success(0) {
  }

  virtual ~Worker_doesConflict_result() throw() {}

  bool success;
  BeyondHistory beyondHistory;

  _Worker_doesConflict_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_beyondHistory(const BeyondHistory& val) {
    beyondHistory = val;
  }

  bool operator == (const Worker_doesConflict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(beyondHistory == rhs.beyondHistory))
      return false;
    return true;
  }
  bool operator != (const Worker_doesConflict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_doesConflict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_doesConflict_presult__isset {
  _Worker_doesConflict_presult__isset() : success(false), beyondHistory(false) {}
  bool success;
  bool beyondHistory;
} _Worker_doesConflict_presult__isset;

class Worker_doesConflict_presult {
 public:


  virtual ~Worker_doesConflict_presult() throw() {}

  bool* success;
  BeyondHistory beyondHistory;

  _Worker_doesConflict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_update_args__isset {
  _Worker_update_args__isset() : transactionID(false), writes(false), reads(false) {}
  bool transactionID;
  bool writes;
  bool reads;
} _Worker_update_args__isset;

class Worker_update_args {
 public:

  Worker_update_args() {
  }

  virtual ~Worker_update_args() throw() {}

  TransactionID transactionID;
  Writes writes;
  Reads reads;

  _Worker_update_args__isset __isset;

  void __set_transactionID(const TransactionID& val) {
    transactionID = val;
  }

  void __set_writes(const Writes& val) {
    writes = val;
  }

  void __set_reads(const Reads& val) {
    reads = val;
  }

  bool operator == (const Worker_update_args & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(writes == rhs.writes))
      return false;
    if (!(reads == rhs.reads))
      return false;
    return true;
  }
  bool operator != (const Worker_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_update_pargs {
 public:


  virtual ~Worker_update_pargs() throw() {}

  const TransactionID* transactionID;
  const Writes* writes;
  const Reads* reads;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_update_result__isset {
  _Worker_update_result__isset() : success(false), conflict(false) {}
  bool success;
  bool conflict;
} _Worker_update_result__isset;

class Worker_update_result {
 public:

  Worker_update_result() {
  }

  virtual ~Worker_update_result() throw() {}

  TransactionID success;
  Conflict conflict;

  _Worker_update_result__isset __isset;

  void __set_success(const TransactionID& val) {
    success = val;
  }

  void __set_conflict(const Conflict& val) {
    conflict = val;
  }

  bool operator == (const Worker_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(conflict == rhs.conflict))
      return false;
    return true;
  }
  bool operator != (const Worker_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_update_presult__isset {
  _Worker_update_presult__isset() : success(false), conflict(false) {}
  bool success;
  bool conflict;
} _Worker_update_presult__isset;

class Worker_update_presult {
 public:


  virtual ~Worker_update_presult() throw() {}

  TransactionID* success;
  Conflict conflict;

  _Worker_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_transgrade_args__isset {
  _Worker_transgrade_args__isset() : reads(false), source(false), target(false) {}
  bool reads;
  bool source;
  bool target;
} _Worker_transgrade_args__isset;

class Worker_transgrade_args {
 public:

  Worker_transgrade_args() : source(0), target(0) {
  }

  virtual ~Worker_transgrade_args() throw() {}

  Reads reads;
  Revision source;
  Revision target;

  _Worker_transgrade_args__isset __isset;

  void __set_reads(const Reads& val) {
    reads = val;
  }

  void __set_source(const Revision val) {
    source = val;
  }

  void __set_target(const Revision val) {
    target = val;
  }

  bool operator == (const Worker_transgrade_args & rhs) const
  {
    if (!(reads == rhs.reads))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const Worker_transgrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_transgrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_transgrade_pargs {
 public:


  virtual ~Worker_transgrade_pargs() throw() {}

  const Reads* reads;
  const Revision* source;
  const Revision* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_transgrade_result__isset {
  _Worker_transgrade_result__isset() : success(false), beyondHistory(false) {}
  bool success;
  bool beyondHistory;
} _Worker_transgrade_result__isset;

class Worker_transgrade_result {
 public:

  Worker_transgrade_result() {
  }

  virtual ~Worker_transgrade_result() throw() {}

  Reads success;
  BeyondHistory beyondHistory;

  _Worker_transgrade_result__isset __isset;

  void __set_success(const Reads& val) {
    success = val;
  }

  void __set_beyondHistory(const BeyondHistory& val) {
    beyondHistory = val;
  }

  bool operator == (const Worker_transgrade_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(beyondHistory == rhs.beyondHistory))
      return false;
    return true;
  }
  bool operator != (const Worker_transgrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_transgrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_transgrade_presult__isset {
  _Worker_transgrade_presult__isset() : success(false), beyondHistory(false) {}
  bool success;
  bool beyondHistory;
} _Worker_transgrade_presult__isset;

class Worker_transgrade_presult {
 public:


  virtual ~Worker_transgrade_presult() throw() {}

  Reads* success;
  BeyondHistory beyondHistory;

  _Worker_transgrade_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_query_args__isset {
  _Worker_query_args__isset() : queries(false) {}
  bool queries;
} _Worker_query_args__isset;

class Worker_query_args {
 public:

  Worker_query_args() {
  }

  virtual ~Worker_query_args() throw() {}

  Queries queries;

  _Worker_query_args__isset __isset;

  void __set_queries(const Queries& val) {
    queries = val;
  }

  bool operator == (const Worker_query_args & rhs) const
  {
    if (!(queries == rhs.queries))
      return false;
    return true;
  }
  bool operator != (const Worker_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_query_pargs {
 public:


  virtual ~Worker_query_pargs() throw() {}

  const Queries* queries;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_result__isset {
  _Worker_query_result__isset() : success(false) {}
  bool success;
} _Worker_query_result__isset;

class Worker_query_result {
 public:

  Worker_query_result() {
  }

  virtual ~Worker_query_result() throw() {}

  ReadResults success;

  _Worker_query_result__isset __isset;

  void __set_success(const ReadResults& val) {
    success = val;
  }

  bool operator == (const Worker_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_query_presult__isset {
  _Worker_query_presult__isset() : success(false) {}
  bool success;
} _Worker_query_presult__isset;

class Worker_query_presult {
 public:


  virtual ~Worker_query_presult() throw() {}

  ReadResults* success;

  _Worker_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_getStatistics_args__isset {
  _Worker_getStatistics_args__isset() : columnIDs(false) {}
  bool columnIDs;
} _Worker_getStatistics_args__isset;

class Worker_getStatistics_args {
 public:

  Worker_getStatistics_args() {
  }

  virtual ~Worker_getStatistics_args() throw() {}

  std::vector<ColumnID>  columnIDs;

  _Worker_getStatistics_args__isset __isset;

  void __set_columnIDs(const std::vector<ColumnID> & val) {
    columnIDs = val;
  }

  bool operator == (const Worker_getStatistics_args & rhs) const
  {
    if (!(columnIDs == rhs.columnIDs))
      return false;
    return true;
  }
  bool operator != (const Worker_getStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_getStatistics_pargs {
 public:


  virtual ~Worker_getStatistics_pargs() throw() {}

  const std::vector<ColumnID> * columnIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getStatistics_result__isset {
  _Worker_getStatistics_result__isset() : success(false) {}
  bool success;
} _Worker_getStatistics_result__isset;

class Worker_getStatistics_result {
 public:

  Worker_getStatistics_result() {
  }

  virtual ~Worker_getStatistics_result() throw() {}

  std::vector<Statistic>  success;

  _Worker_getStatistics_result__isset __isset;

  void __set_success(const std::vector<Statistic> & val) {
    success = val;
  }

  bool operator == (const Worker_getStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_getStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_getStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_getStatistics_presult__isset {
  _Worker_getStatistics_presult__isset() : success(false) {}
  bool success;
} _Worker_getStatistics_presult__isset;

class Worker_getStatistics_presult {
 public:


  virtual ~Worker_getStatistics_presult() throw() {}

  std::vector<Statistic> * success;

  _Worker_getStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WorkerClient : virtual public WorkerIf {
 public:
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getState(WorkerState& _return);
  void send_getState();
  void recv_getState(WorkerState& _return);
  Revision prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads);
  void send_prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads);
  Revision recv_prepare();
  void apply(TransactionID& _return, const TransactionID& transactionID, const Writes& writes);
  void send_apply(const TransactionID& transactionID, const Writes& writes);
  void recv_apply(TransactionID& _return);
  void commit(const TransactionID& transactionID);
  void send_commit(const TransactionID& transactionID);
  void rollback(const TransactionID& transactionID);
  void send_rollback(const TransactionID& transactionID);
  void flush(const TransactionID& transactionID);
  void send_flush(const TransactionID& transactionID);
  void recv_flush();
  bool doesConflict(const Reads& reads, const Revision source, const Revision target);
  void send_doesConflict(const Reads& reads, const Revision source, const Revision target);
  bool recv_doesConflict();
  void update(TransactionID& _return, const TransactionID& transactionID, const Writes& writes, const Reads& reads);
  void send_update(const TransactionID& transactionID, const Writes& writes, const Reads& reads);
  void recv_update(TransactionID& _return);
  void transgrade(Reads& _return, const Reads& reads, const Revision source, const Revision target);
  void send_transgrade(const Reads& reads, const Revision source, const Revision target);
  void recv_transgrade(Reads& _return);
  void query(ReadResults& _return, const Queries& queries);
  void send_query(const Queries& queries);
  void recv_query(ReadResults& _return);
  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs);
  void send_getStatistics(const std::vector<ColumnID> & columnIDs);
  void recv_getStatistics(std::vector<Statistic> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WorkerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WorkerIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WorkerProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getState(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepare(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_apply(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commit(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollback(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flush(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_doesConflict(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transgrade(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatistics(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerProcessor(boost::shared_ptr<WorkerIf> iface) :
    iface_(iface) {
    processMap_["getState"] = &WorkerProcessor::process_getState;
    processMap_["prepare"] = &WorkerProcessor::process_prepare;
    processMap_["apply"] = &WorkerProcessor::process_apply;
    processMap_["commit"] = &WorkerProcessor::process_commit;
    processMap_["rollback"] = &WorkerProcessor::process_rollback;
    processMap_["flush"] = &WorkerProcessor::process_flush;
    processMap_["doesConflict"] = &WorkerProcessor::process_doesConflict;
    processMap_["update"] = &WorkerProcessor::process_update;
    processMap_["transgrade"] = &WorkerProcessor::process_transgrade;
    processMap_["query"] = &WorkerProcessor::process_query;
    processMap_["getStatistics"] = &WorkerProcessor::process_getStatistics;
  }

  virtual ~WorkerProcessor() {}
};

class WorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerProcessorFactory(const ::boost::shared_ptr< WorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WorkerIfFactory > handlerFactory_;
};

class WorkerMultiface : virtual public WorkerIf {
 public:
  WorkerMultiface(std::vector<boost::shared_ptr<WorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WorkerIf> > ifaces_;
  WorkerMultiface() {}
  void add(boost::shared_ptr<WorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getState(WorkerState& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return);
    }
    ifaces_[i]->getState(_return);
    return;
  }

  Revision prepare(const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepare(transactionID, writes, reads);
    }
    return ifaces_[i]->prepare(transactionID, writes, reads);
  }

  void apply(TransactionID& _return, const TransactionID& transactionID, const Writes& writes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply(_return, transactionID, writes);
    }
    ifaces_[i]->apply(_return, transactionID, writes);
    return;
  }

  void commit(const TransactionID& transactionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commit(transactionID);
    }
    ifaces_[i]->commit(transactionID);
  }

  void rollback(const TransactionID& transactionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollback(transactionID);
    }
    ifaces_[i]->rollback(transactionID);
  }

  void flush(const TransactionID& transactionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flush(transactionID);
    }
    ifaces_[i]->flush(transactionID);
  }

  bool doesConflict(const Reads& reads, const Revision source, const Revision target) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->doesConflict(reads, source, target);
    }
    return ifaces_[i]->doesConflict(reads, source, target);
  }

  void update(TransactionID& _return, const TransactionID& transactionID, const Writes& writes, const Reads& reads) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(_return, transactionID, writes, reads);
    }
    ifaces_[i]->update(_return, transactionID, writes, reads);
    return;
  }

  void transgrade(Reads& _return, const Reads& reads, const Revision source, const Revision target) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transgrade(_return, reads, source, target);
    }
    ifaces_[i]->transgrade(_return, reads, source, target);
    return;
  }

  void query(ReadResults& _return, const Queries& queries) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, queries);
    }
    ifaces_[i]->query(_return, queries);
    return;
  }

  void getStatistics(std::vector<Statistic> & _return, const std::vector<ColumnID> & columnIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatistics(_return, columnIDs);
    }
    ifaces_[i]->getStatistics(_return, columnIDs);
    return;
  }

};

}} // namespace

#endif
